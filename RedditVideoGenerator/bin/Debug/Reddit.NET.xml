<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reddit.NET</name>
    </assembly>
    <members>
        <member name="T:Reddit.Controllers.Account">
            <summary>
            Controller class for tasks pertaining to the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Account.Me">
            <summary>
            The authenticated user's data.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Account.Messages">
            <summary>
            The authenticated user's private messages.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Account.Modmail">
            <summary>
            The authenticated user's modmail conversations.
            </summary>
        </member>
        <member name="F:Reddit.Controllers.Account.Dispatch">
            <summary>
            Allows direct access to the Models.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Account.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Creates a new Account instance.  Note that this is already taken care of in the main class.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Account.GetMe">
            <summary>
            Returns a User instance with the data returned from a call to the "me" endpoint.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Account.Karma">
            <summary>
            Return a breakdown of subreddit karma.
            </summary>
            <returns>A breakdown of subreddit karma.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.Prefs">
            <summary>
            Return the preference settings of the logged in user.
            </summary>
            <returns>The preference settings of the logged in user.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.UpdatePrefs(Reddit.Things.AccountPrefsSubmit)">
            <summary>
            Update preferences.
            </summary>
            <param name="accountPrefs">A valid AccountPrefs instance.</param>
            <returns>The updated preference settings of the logged in user.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.UpdatePrefsAsync(Reddit.Things.AccountPrefsSubmit)">
            <summary>
            Update preferences asynchronously.
            </summary>
            <param name="accountPrefs">A valid AccountPrefs instance.</param>
        </member>
        <member name="M:Reddit.Controllers.Account.Trophies">
            <summary>
            Return a list of trophies for the current user.
            </summary>
            <returns>A list of trophies for the current user.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.Friends(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get users whom the current user has friended.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.Messaging(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get users with whom the current user is messaging.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.Blocked(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get users whom the current user has blocked.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.Trusted(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get users whom the current user has trusted.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.DeleteFriend(System.String)">
            <summary>
            Stop being friends with a user.
            </summary>
            <param name="username">A valid, existing reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Account.DeleteFriendAsync(System.String)">
            <summary>
            Asynchronously stop being friends with a user.
            </summary>
            <param name="username">A valid, existing reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Account.GetFriend(System.String)">
            <summary>
            Get information about a specific 'friend', such as notes.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.UpdateFriend(System.String,System.String)">
            <summary>
            Create or update a "friend" relationship.
            This operation is idempotent. It can be used to add a new friend, or update an existing friend (e.g., add/change the note on that friend).
            The JSON fields can only be included if you have a Reddit Gold subscription, for some reason.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="json">{
            "name": A valid, existing reddit username
            "note": a string no longer than 300 characters
            }</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.UpdateFriendAsync(System.String,System.String)">
            <summary>
            Create or update a "friend" relationship asynchronously.
            This operation is idempotent. It can be used to add a new friend, or update an existing friend (e.g., add/change the note on that friend).
            The JSON fields can only be included if you have a Reddit Gold subscription, for some reason.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="json">{
            "name": A valid, existing reddit username
            "note": a string no longer than 300 characters
            }</param>
        </member>
        <member name="M:Reddit.Controllers.Account.Multis(System.Boolean)">
            <summary>
            Fetch a list of multis belonging to the current user.
            </summary>
            <param name="expandSrs">boolean value</param>
            <returns>A list of multis.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.MySubscribedSubreddits(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get subreddits that the current user is subscribed to.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of Subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.MyContributingSubreddits(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get subreddits that the current user is an approved submitter in.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of Subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.MyModeratorSubreddits(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get subreddits that the current user is a moderator of.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of Subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.MyStreamingSubreddits(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Get subreddits that the current user is subscribed to that contain hosted video links.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of Subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.ModmailSubreddits">
            <summary>
            Returns a list of srs that the user moderates that are also enrolled in the new modmail.
            </summary>
            <returns>A list of subreddits.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.ModmailUnreadCount">
            <summary>
            Endpoint to retrieve the unread conversation count by conversation state.
            </summary>
            <returns>An object with the int properties: highlighted, notifications, archived, new, inprogress, and mod.</returns>
        </member>
        <member name="M:Reddit.Controllers.Account.AcceptLiveThreadInvite(System.String)">
            <summary>
            Accept a pending invitation to contribute to a live thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.Account.AcceptLiveThreadInviteAsync(System.String)">
            <summary>
            Asynchronously accept a pending invitation to contribute to a live thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.Account.AbandonLiveThread(System.String)">
            <summary>
            Abdicate contributorship of the thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.Account.AbandonLiveThreadAsync(System.String)">
            <summary>
            Abdicate contributorship of the thread asynchronously.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="T:Reddit.Controllers.BaseController">
            <summary>
            The base Controller.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.BaseController.Lists">
            <summary>
            List-handling.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.BaseController.#ctor">
            <summary>
            Create a new Controller instance.
            </summary>
        </member>
        <member name="T:Reddit.Controllers.Comment">
            <summary>
            Controller class for comment-related tasks.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comment.CommentScoreUpdated">
            <summary>
            Event handler for monitoring comment score.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Subreddit">
            <summary>
            The subreddit in which this comment exists.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Author">
            <summary>
            The username of the comment author.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Id">
            <summary>
            The comment ID36.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Fullname">
            <summary>
            The comment fullname.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Permalink">
            <summary>
            The permalink URL of the comment.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Created">
            <summary>
            When the comment was created.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Edited">
            <summary>
            When the comment was last edited.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Score">
            <summary>
            The comment score.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.UpVotes">
            <summary>
            The number of upvotes received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.DownVotes">
            <summary>
            The number of downvotes received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Removed">
            <summary>
            Whether the comment has been removed.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Spam">
            <summary>
            Whether the comment has been marked as spam.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.More">
            <summary>
            A list of Things.More objects.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.ParentId">
            <summary>
            The parent ID36.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.ParentFullname">
            <summary>
            The parent fullname.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.CollapsedReason">
            <summary>
            The reason the comment was collapsed (if applicable).
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Collapsed">
            <summary>
            Whether the comment was collapsed.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.IsSubmitter">
            <summary>
            Whether the comment was authored by the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.ScoreHidden">
            <summary>
            Whether the comment score should be hidden.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Depth">
            <summary>
            The comment depth.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Awards">
            <summary>
            Any awards applied to the comment.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.IsUpvoted">
            <summary>
            Whether the comment has been upvoted by the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.IsDownvoted">
            <summary>
            Whether the comment has been downvoted by the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Replies">
            <summary>
            A list of comment replies.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.replies">
            <summary>
            A list of comment replies that does *not* automatically query the API if null.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.NumReplies">
            <summary>
            The number of direct comment replies.  
            Unlike Replies, accessing this property does not require a separate API call.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Body">
            <summary>
            The comment body.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.BodyHTML">
            <summary>
            The comment body in HTML format.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Root">
            <summary>
            The parent post.
            </summary>
        </member>
        <member name="F:Reddit.Controllers.Comment.Listing">
            <summary>
            Full comment data returned by the API.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comment.Comments">
            <summary>
            Comment replies to this comment.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.Comment)">
            <summary>
            Create a new comment controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="listing"></param>
        </member>
        <member name="M:Reddit.Controllers.Comment.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new comment controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">The subreddit to which the comment belongs</param>
            <param name="author">The username of the comment's author</param>
            <param name="body">The comment text</param>
            <param name="parentFullname">Fullname of the parent post or comment</param>
            <param name="bodyHtml"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
        </member>
        <member name="M:Reddit.Controllers.Comment.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new comment controller instance, populated only with its fullname.
            </summary>
            <param name="dispatch"></param>
            <param name="fullname">Fullname of the comment</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty comment controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Comment.SetBody(System.String)">
            <summary>
            Set the body manually without any automatic decoding.
            </summary>
            <param name="value">The body value you wish to set</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.SetBodyHTML(System.String)">
            <summary>
            Set the body HTML manually without any automatic decoding.
            </summary>
            <param name="value">The body HTML value you wish to set</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.GetRoot(System.String)">
            <summary>
            Get the post to which this comment belongs.
            </summary>
            <param name="fullname">The fullname of the comment whose post data we're looking for</param>
            <returns>The parent post of this comment.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Submit">
            <summary>
            Submit this comment to Reddit.
            </summary>
            <returns>An instance of this class populated with the return data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.SubmitAsync">
            <summary>
            Submit this comment to Reddit asynchronously.
            </summary>
            <returns>An instance of this class populated with the return data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Reply(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reply to this comment.
            </summary>
            <param name="body">The comment reply text</param>
            <param name="bodyHtml"></param>
            <param name="author"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <returns>The newly-created comment reply.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.ReplyAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reply to this comment asynchronously.
            </summary>
            <param name="body">The comment reply text</param>
            <param name="bodyHtml"></param>
            <param name="author"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
        </member>
        <member name="M:Reddit.Controllers.Comment.BuildReply(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a comment reply object without submitting it to Reddit.
            </summary>
            <param name="body">The comment reply text</param>
            <param name="bodyHtml"></param>
            <param name="author"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <returns>The unsent comment reply instance.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.About">
            <summary>
            Return information about the current Comment instance.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Info">
            <summary>
            Return information about the current Comment instance via the api/info endpoint.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Distinguish(System.String,System.Nullable{System.Boolean})">
            <summary>
            Distinguish a comment's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish.depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="sticky">boolean value</param>
            <returns>The distinguished comment object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.DistinguishAsync(System.String,System.Nullable{System.Boolean})">
            <summary>
            Distinguish a comment's author with a sigil asynchronously.
            This can be useful to draw attention to and confirm the identity of the user in the context of a comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish.depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="sticky">boolean value</param>
            <returns>The distinguished comment object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Remove(System.Boolean)">
            <summary>
            Redact and remove this comment from all subreddit comment listings.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.RemoveAsync(System.Boolean)">
            <summary>
            Asynchronously redact and remove this comment from all subreddit comment listings.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Delete">
            <summary>
            Delete this comment.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.DeleteAsync">
            <summary>
            Delete this comment asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Report(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Report this comment to the subreddit moderators.  The comment then becomes implicitly hidden, as well.
            </summary>
            <param name="additionalInfo">a string no longer than 2000 characters</param>
            <param name="banEvadingAccountsNames">a string no longer than 1000 characters</param>
            <param name="customText">a string no longer than 250 characters</param>
            <param name="fromHelpCenter">boolean value</param>
            <param name="otherReason">a string no longer than 100 characters</param>
            <param name="reason">a string no longer than 100 characters</param>
            <param name="ruleReason">a string no longer than 100 characters</param>
            <param name="siteReason">a string no longer than 100 characters</param>
            <param name="violatorUsername">A valid Reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.ReportAsync(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Report this comment to the subreddit moderators asynchronously.  The comment then becomes implicitly hidden, as well.
            </summary>
            <param name="additionalInfo">a string no longer than 2000 characters</param>
            <param name="banEvadingAccountsNames">a string no longer than 1000 characters</param>
            <param name="customText">a string no longer than 250 characters</param>
            <param name="fromHelpCenter">boolean value</param>
            <param name="otherReason">a string no longer than 100 characters</param>
            <param name="reason">a string no longer than 100 characters</param>
            <param name="ruleReason">a string no longer than 100 characters</param>
            <param name="siteReason">a string no longer than 100 characters</param>
            <param name="violatorUsername">A valid Reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.Report(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report this comment to the subreddit moderators.  The comment then becomes implicitly hidden, as well.
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.ReportAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report this comment to the subreddit moderators asynchronously.  The comment then becomes implicitly hidden, as well.
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.Save(System.String)">
            <summary>
            Save this comment.
            Saved things are kept in the user's saved listing for later perusal.
            </summary>
            <param name="category">a category name</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.SaveAsync(System.String)">
            <summary>
            Save this comment asynchronously.
            Saved things are kept in the user's saved listing for later perusal.
            </summary>
            <param name="category">a category name</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.EnableSendReplies">
            <summary>
            Enable inbox replies for this comment.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.EnableSendRepliesAsync">
            <summary>
            Enable inbox replies for this comment asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.DisableSendReplies">
            <summary>
            Disable inbox replies for this comment.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.DisableSendRepliesAsync">
            <summary>
            Disable inbox replies for this comment asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Unsave">
            <summary>
            Unsave this comment.
            This removes the thing from the user's saved listings as well.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.UnsaveAsync">
            <summary>
            Unsave this comment asynchronously.
            This removes the thing from the user's saved listings as well.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Edit(System.String)">
            <summary>
            Edit the body text of this comment.  This instance will be automatically updated with the return data.
            </summary>
            <param name="text">raw markdown text</param>
            <returns>This instance populated with the modified post data returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.EditAsync(System.String)">
            <summary>
            Edit the body text of this comment asynchronously.  This instance will be automatically updated with the return data.
            </summary>
            <param name="text">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.Comment.MoreChildren(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="children">a comma-delimited list of comment ID36s</param>
            <param name="limitChildren">boolean value</param>
            <param name="sort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="id">(optional) id of the associated MoreChildren object</param>
            <returns>The requested comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.MoreChildren(Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="linksAndCommentsMoreChildrenInput">A valid LinksAndCommentsMoreChildrenInput instance</param>
            <returns>The requested comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.Upvote">
            <summary>
            Upvote this comment.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.UpvoteAsync">
            <summary>
            Upvote this comment asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Downvote">
            <summary>
            Downvote this comment.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.DownvoteAsync">
            <summary>
            Downvote this comment asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.Unvote">
            <summary>
            Unvote this comment.  This is equivalent to "un-voting" by clicking again on a highlighted arrow.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.UnvoteAsync">
            <summary>
            Unvote this comment asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comment.OnCommentScoreUpdated(Reddit.Controllers.EventArgs.CommentUpdateEventArgs)">
            <summary>
            Invocation for CommentScoreUpdated event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Reddit.Controllers.Comment.MonitorCommentScore(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Monitor this comment for any score changes.
            In order for the event to fire, *both* minScoreMonitoringThreshold AND scoreMonitoringPercentThreshold must be met.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="minScoreMonitoringThreshold">The minimum change in score value between events (default: 4)</param>
            <param name="scoreMonitoringPercentThreshold">The minimum score percent change between events (default: 8)</param>
            <param name="cancellationThresholdMinutes">If not null, monitoring will automatically stop if more than this time elapses between score updates (default: null)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.CommentScoreIsMonitored">
            <summary>
            Whether the comment score is currently being monitored.
            </summary>
            <returns>Whether the comment score is currently being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comment.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.Comments">
            <summary>
            Controller class for comment replies.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.ConfidenceUpdated">
            <summary>
            Event handler for monitoring comments (confidence sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.TopUpdated">
            <summary>
            Event handler for monitoring comments (top sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.NewUpdated">
            <summary>
            Event handler for monitoring comments (new sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.ControversialUpdated">
            <summary>
            Event handler for monitoring comments (controversial sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.OldUpdated">
            <summary>
            Event handler for monitoring comments (old sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.RandomUpdated">
            <summary>
            Event handler for monitoring comments (random sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.QAUpdated">
            <summary>
            Event handler for monitoring comments (qa sort)
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Comments.LiveUpdated">
            <summary>
            Event handler for monitoring comments (live sort)
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Confidence">
            <summary>
            A list of comments using "confidence" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.IConfidence">
            <summary>
            A list interface of comments using "confidence" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Top">
            <summary>
            A list of comments using "top" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.ITop">
            <summary>
            A list interface of comments using "top" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.New">
            <summary>
            A list of comments using "new" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.INew">
            <summary>
            A list interface of comments using "new" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Controversial">
            <summary>
            A list of comments using "controversial" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.IControversial">
            <summary>
            A list interface of comments using "controversial" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Old">
            <summary>
            A list of comments using "old" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.IOld">
            <summary>
            A list interface of comments using "old" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Random">
            <summary>
            A list of comments using "random" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.IRandom">
            <summary>
            A list interface of comments using "random" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.QA">
            <summary>
            A list of comments using "qa" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.IQA">
            <summary>
            A list interface of comments using "qa" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Live">
            <summary>
            A list of comments using "live" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.ILive">
            <summary>
            A list interface of comments using "live" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.Comment">
            <summary>
            The parent comment (if one exists).
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Comments.SubKey">
            <summary>
            Monitoring SubKey.
            </summary>
        </member>
        <member name="F:Reddit.Controllers.Comments.Subreddit">
            <summary>
            The name of the parent subreddit.
            </summary>
        </member>
        <member name="F:Reddit.Controllers.Comments.PostId">
            <summary>
            The ID36 of the parent post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Comments.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,Reddit.Controllers.Comment,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Controllers.Comment})">
            <summary>
            Create a new instance of the comments controller.
            </summary>
            <param name="dispatch"></param>
            <param name="postId">The ID36 of the parent post</param>
            <param name="subreddit">The name of the parent subreddit</param>
            <param name="comment">The parent comment instance</param>
            <param name="confidence"></param>
            <param name="top"></param>
            <param name="newComments"></param>
            <param name="controversial"></param>
            <param name="old"></param>
            <param name="random"></param>
            <param name="qa"></param>
            <param name="live"></param>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetComments(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve comment replies to this comment.
            </summary>
            <param name="sort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetConfidence(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "confidence" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetTop(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "top" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetNew(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "new" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetControversial(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "controversial" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetOld(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "old" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetRandom(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "random" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetQA(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "qa" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.GetLive(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve a list of comments using "live" sort.
            </summary>
            <param name="context">an integer between 0 and 8</param>
            <param name="truncate">an integer between 0 and 50</param>
            <param name="showEdits">boolean value</param>
            <param name="showMore">boolean value</param>
            <param name="threaded">boolean value</param>
            <param name="depth">(optional) an integer</param>
            <param name="limit">(optional) an integer</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorConfidence(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "confidence" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorTop(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "top" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorNew(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "new" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorControversial(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "controversial" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorOld(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "old" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorRandom(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "random" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorQA(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "qa" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.MonitorLive(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "live" comments on this thread.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.TriggerUpdate(Reddit.Controllers.EventArgs.CommentsUpdateEventArgs,System.String)">
            <summary>
            Invoke the appropriate event for the given type.
            </summary>
            <param name="args">A valid CommentsUpdateEventArgs instance</param>
            <param name="type">One of: (confidence, top, new, controversial, old, random, qa, live)</param>
        </member>
        <member name="M:Reddit.Controllers.Comments.ConfidenceCommentsIsMonitored">
            <summary>
            Whether the confidence sort is being monitored.
            </summary>
            <returns>Whether the confidence sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.TopCommentsIsMonitored">
            <summary>
            Whether the top sort is being monitored.
            </summary>
            <returns>Whether the top sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.NewCommentsIsMonitored">
            <summary>
            Whether the new sort is being monitored.
            </summary>
            <returns>Whether the new sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.ControversialCommentsIsMonitored">
            <summary>
            Whether the controversial sort is being monitored.
            </summary>
            <returns>Whether the controversial sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.OldCommentsIsMonitored">
            <summary>
            Whether the old sort is being monitored.
            </summary>
            <returns>Whether the old sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.RandomCommentsIsMonitored">
            <summary>
            Whether the random sort is being monitored.
            </summary>
            <returns>Whether the random sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.QACommentsIsMonitored">
            <summary>
            Whether the qa sort is being monitored.
            </summary>
            <returns>Whether the qa sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.LiveCommentsIsMonitored">
            <summary>
            Whether the live sort is being monitored.
            </summary>
            <returns>Whether the live sort is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Comments.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.Dispatch">
            <summary>
            Dispatch Controller for direct access to Models.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Account">
            <summary>
            Account model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Emoji">
            <summary>
            Emoji model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Flair">
            <summary>
            Flair model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.LinksAndComments">
            <summary>
            LinksAndComments model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Listings">
            <summary>
            Listings model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.LiveThreads">
            <summary>
            LiveThreads model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Misc">
            <summary>
            Misc model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Moderation">
            <summary>
            Moderation model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Modmail">
            <summary>
            Modmail model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Multis">
            <summary>
            Multis model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.PrivateMessages">
            <summary>
            PrivateMessages model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.RedditGold">
            <summary>
            RedditGold model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Search">
            <summary>
            Search model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Subreddits">
            <summary>
            Subreddits model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Users">
            <summary>
            Users model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Widgets">
            <summary>
            Widgets model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.Wiki">
            <summary>
            Wiki model.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Dispatch.OAuthCredentials">
            <summary>
            Makes the Reddit OAuth credentials accessible to the calling app.
            Aside from populating these values for that reason, this class is not used by the library, itself.
            Each model class stores these credentials internally.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Dispatch.#ctor(System.String,System.String,System.String,System.String,RestSharp.RestClient,System.String,System.String)">
            <summary>
            Instantiate endpoint singletons.
            </summary>
            <param name="appId">The OAuth application ID</param>
            <param name="appSecret">The OAuth application secret; this parameter is required for 'script' apps which use a secret to authenticate</param>
            <param name="refreshToken">The OAuth refresh token required to obtain a Reddit API access token</param>
            <param name="accessToken">The OAuth access token required to access the Reddit API</param>
            <param name="restClient">A valid RestClient instance</param>
            <param name="deviceId">(optional) A unique Device ID required for app-only authentication</param>
            <param name="userAgent">(optional) A custom string for the User-Agent header</param>
        </member>
        <member name="M:Reddit.Controllers.Dispatch.C_TokenUpdated(System.Object,Reddit.Models.EventArgs.TokenUpdateEventArgs)">
            <summary>
            Propagate token across all models.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">A valid TokenUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Dispatch.C_RequestsUpdated(System.Object,Reddit.Models.EventArgs.RequestsUpdateEventArgs)">
            <summary>
            Keep track of requests across all models.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">A valid RequestsUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Dispatch.C_MonitoringUpdated(System.Object,Reddit.Models.EventArgs.MonitoringUpdateEventArgs)">
            <summary>
            Update what's being monitored across all models.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">A valid MonitoringUpdateEventArgs instance</param>
        </member>
        <member name="T:Reddit.Controllers.Flairs">
            <summary>
            Controller class for flairs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.FlairList">
            <summary>
            List of flairs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.FlairListNext">
            <summary>
            Fullname of the next page of flair list results.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.FlairListPrev">
            <summary>
            Fullname of the previous page of flair list results.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.LinkFlair">
            <summary>
            List of link flairs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.LinkFlairV2">
            <summary>
            List of link flairs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.UserFlair">
            <summary>
            List of user flairs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Flairs.UserFlairV2">
            <summary>
            List of user flairs.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new instance of the flairs controller.
            </summary>
            <param name="subreddit">The name of the subreddit with the flairs</param>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.ClearLinkFlairTemplates">
            <summary>
            Clear link flair templates.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.ClearLinkFlairTemplatesAsync">
            <summary>
            Clear link flair templates asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.ClearUserFlairTemplates">
            <summary>
            Clear user flair templates.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.ClearUserFlairTemplatesAsync">
            <summary>
            Clear user flair templates asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.DeleteFlair(System.String)">
            <summary>
            Delete flair.
            </summary>
            <param name="username">The user whose flair we're removing</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.DeleteFlairAsync(System.String)">
            <summary>
            Delete flair asynchronously.
            </summary>
            <param name="username">The user whose flair we're removing</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.DeleteFlairTemplate(System.String)">
            <summary>
            Delete flair template.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being deleted (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.DeleteFlairTemplateAsync(System.String)">
            <summary>
            Delete flair template asynchronously.
            <param name="flairTemplateId">The ID of the flair template being deleted (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlair(Reddit.Inputs.Flair.FlairSelectFlairInput)">
            <summary>
            Create a new link flair.
            </summary>
            <param name="flairSelectFlairInput">a valid FlairSelectFlairInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairAsync(Reddit.Inputs.Flair.FlairSelectFlairInput)">
            <summary>
            Create a new link flair asynchronously.
            </summary>
            <param name="flairSelectFlairInput">a valid FlairSelectFlairInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlair(System.String,System.String,System.String)">
            <summary>
            Create a new user flair.
            </summary>
            <param name="username">The user who's getting the new flair</param>
            <param name="text">The flair text</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairAsync(System.String,System.String,System.String)">
            <summary>
            Create a new user flair asynchronously.
            </summary>
            <param name="username">The user who's getting the new flair</param>
            <param name="text">The flair text</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlair(Reddit.Inputs.Flair.FlairCreateInput)">
            <summary>
            Create a new user flair.
            </summary>
            <param name="flairCreateInput">A valid FlairCreateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairAsync(Reddit.Inputs.Flair.FlairCreateInput)">
            <summary>
            Create a new user flair asynchronously.
            </summary>
            <param name="flairCreateInput">A valid FlairCreateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairConfig(Reddit.Inputs.Flair.FlairConfigInput)">
            <summary>
            Update the flair configuration settings for this subreddit.
            </summary>
            <param name="flairConfigInput">A valid FlairConfigInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairConfigAsync(Reddit.Inputs.Flair.FlairConfigInput)">
            <summary>
            Update the flair configuration settings for this subreddit asynchronously.
            </summary>
            <param name="flairConfigInput">A valid FlairConfigInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSV(System.String)">
            <summary>
            Change the flair of multiple users in the same subreddit with a single API call.
            Requires a string 'flair_csv' which has up to 100 lines of the form 'user,flairtext,cssclass' (Lines beyond the 100th are ignored).
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">comma-seperated flair information</param>
            <returns>Action results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSVAsync(System.String)">
            <summary>
            Asynchronously change the flair of multiple users in the same subreddit with a single API call.
            Requires a string 'flair_csv' which has up to 100 lines of the form 'user,flairtext,cssclass' (Lines beyond the 100th are ignored).
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">comma-seperated flair information</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSV(Reddit.Things.FlairListResultContainer)">
            <summary>
            Change the flair of multiple users in the same subreddit with a single API call.
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">A valid FlairListResultContainer object</param>
            <returns>Action results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSVAsync(Reddit.Things.FlairListResultContainer)">
            <summary>
            Asynchronously change the flair of multiple users in the same subreddit with a single API call.
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">A valid FlairListResultContainer object</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSV(System.Collections.Generic.List{Reddit.Things.FlairListResult})">
            <summary>
            Change the flair of multiple users in the same subreddit with a single API call.
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">A list of valid FlairListResult objects</param>
            <returns>Action results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairCSVAsync(System.Collections.Generic.List{Reddit.Things.FlairListResult})">
            <summary>
            Asynchronously change the flair of multiple users in the same subreddit with a single API call.
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">A list of valid FlairListResult objects</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetFlairList(System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            List of flairs.
            </summary>
            <param name="username">a user by name</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 1000)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>Flair list results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetFlairList(Reddit.Inputs.Flair.FlairNameListingInput)">
            <summary>
            List of flairs.
            </summary>
            <param name="flairNameListingInput">A valid FlairNameListingInput instance</param>
            <returns>Flair list results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.FlairSelector(System.String,System.String)">
            <summary>
            Return information about a user's or link's flair options.
            </summary>
            <param name="username">A valid Reddit username</param>
            /// <param name="link">a fullname of a link</param>
            <returns>Flair results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplate(System.String,System.Boolean,System.String)">
            <summary>
            Create a new link flair template.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateAsync(System.String,System.Boolean,System.String)">
            <summary>
            Create a new link flair template asynchronously.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplate(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Create a new link flair template.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateAsync(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Create a new link flair template asynchronously.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplate(System.String,System.Boolean,System.String)">
            <summary>
            Create a new user flair template.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateAsync(System.String,System.Boolean,System.String)">
            <summary>
            Create a new user flair template asynchronously.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplate(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Create a new user flair template.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateAsync(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Create a new user flair template asynchronously.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplate(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Update an existing link flair template.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Update an existing link flair template asynchronously.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplate(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Update an existing link flair template.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateAsync(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Update an existing link flair template asynchronously.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplate(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Update an existing user flair template.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Update an existing user flair template asynchronously.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplate(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Update an existing user flair template.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateAsync(Reddit.Inputs.Flair.FlairTemplateInput)">
            <summary>
            Update an existing user flair template asynchronously.
            </summary>
            <param name="flairTemplateInput">A valid FlairTemplateInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateV2(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Create a new link flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateV2Async(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Create a new link flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateV2(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Create a new link flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateLinkFlairTemplateV2Async(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Create a new link flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateV2(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Create a new user flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateV2Async(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Create a new user flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateV2(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Create a new user flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.CreateUserFlairTemplateV2Async(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Create a new user flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateV2(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Update an existing link flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
            <returns>The updated flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateV2Async(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Update an existing link flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateV2(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Update an existing link flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
            <returns>The updated flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateLinkFlairTemplateV2Async(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Update an existing link flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateV2(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Update an existing user flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
            <returns>The updated flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateV2Async(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Update an existing user flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateId">The ID of the flair template being updated (e.g. "0778d5ec-db43-11e8-9258-0e3a02270976")</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="modOnly">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateV2(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Update an existing user flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
            <returns>The updated flair object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.UpdateUserFlairTemplateV2Async(Reddit.Inputs.Flair.FlairTemplateV2Input)">
            <summary>
            Update an existing user flair template asynchronously.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">A valid FlairTemplateV2Input instance</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.SetFlairEnabled(System.Boolean)">
            <summary>
            Set flair enabled.
            </summary>
            <param name="flairEnabled">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.SetFlairEnabledAsync(System.Boolean)">
            <summary>
            Set flair enabled asynchronously.
            </summary>
            <param name="flairEnabled">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetLinkFlair">
            <summary>
            Return list of available link flair for the current subreddit.
            Will not return flair if the user cannot set their own link flair and they are not a moderator that can set flair.
            </summary>
            <returns>List of available link flairs.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetLinkFlairV2">
            <summary>
            Return list of available link flair for the current subreddit.
            Will not return flair if the user cannot set their own link flair and they are not a moderator that can set flair.
            </summary>
            <returns>List of available link flairs.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetUserFlair">
            <summary>
            Return list of available user flair for the current subreddit.
            Will not return flair if flair is disabled on the subreddit, the user cannot set their own flair, or they are not a moderator that can set flair.
            </summary>
            <returns>List of available user flairs.</returns>
        </member>
        <member name="M:Reddit.Controllers.Flairs.GetUserFlairV2">
            <summary>
            Return list of available user flair for the current subreddit.
            Will not return flair if flair is disabled on the subreddit, the user cannot set their own flair, or they are not a moderator that can set flair.
            </summary>
            <returns>List of available user flairs.</returns>
        </member>
        <member name="M:Reddit.Controllers.Internal.Lists.ListDiff``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Scan two lists for any differences.  Sequence is ignored.
            T must be a string or an object with a string Fullname.
            </summary>
            <param name="oldList">The original list being compared against</param>
            <param name="newList">The new list</param>
            <param name="added">Any entries that are present in the new list but not the old</param>
            <param name="removed">Any entries that are present in the old list but not the new</param>
            <param name="filterIds">Any IDs that should be excluded from the added result</param>
            <returns>True if the lists differ, otherwise false.</returns>
        </member>
        <member name="M:Reddit.Controllers.Internal.Lists.ForceNewSort(System.Collections.Generic.List{Reddit.Controllers.Post},System.Boolean)">
            <summary>
            The Reddit API doesn't always return new-sorted posts in the correct chronological order (pinned posts are always on top, for example).
            Use this method to give the list a proper sort.
            </summary>
            <param name="posts">A list of posts</param>
            <param name="descending">If true, sort by descending order (newest first); otherwise, sort by ascending order (oldest first)</param>
            <returns>A chronologically sorted list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.Internal.Lists.ForceNewSort(System.Collections.Generic.List{Reddit.Controllers.Comment},System.Boolean)">
            <summary>
            The Reddit API doesn't always return new-sorted comments in the correct chronological order (pinned comments are always on top, for example).
            Use this method to give the list a proper sort.
            </summary>
            <param name="comments">A list of comments</param>
            <param name="descending">If true, sort by descending order (newest first); otherwise, sort by ascending order (oldest first)</param>
            <returns>A chronologically sorted list of comments.</returns>
        </member>
        <member name="P:Reddit.Controllers.Internal.Monitors.MonitoringCache">
            <summary>
            An optional cache for preventing the same post from appearing multiple times during monitoring.
            See: https://github.com/sirkris/Reddit.NET/issues/117#issuecomment-759501039
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Internal.Monitors.InitMonitoringCache(System.Boolean,System.String)">
            <summary>
            Initializes the monitoring cache properties.
            </summary>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires</param>
            <param name="type">Which monitoring sort's cache to initialize</param>
        </member>
        <member name="T:Reddit.Controllers.LinkPost">
            <summary>
            Controller class for link posts.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LinkPost.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LinkPost.URL">
            <summary>
            The URL the LinkPost points to.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LinkPost.Thumbnail">
            <summary>
            Thumbnail URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LinkPost.ThumbnailHeight">
            <summary>
            Thumbnail height.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LinkPost.ThumbnailWidth">
            <summary>
            Thumbnail width.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.Post)">
            <summary>
            Create a new link post controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="listing"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Newtonsoft.Json.Linq.JObject,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new link post controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">The subreddit to which the post belongs</param>
            <param name="title">The title of the post</param>
            <param name="author">The post author's username</param>
            <param name="url">The link post URL</param>
            <param name="thumbnail"></param>
            <param name="thumbnailHeight"></param>
            <param name="thumbnailWidth"></param>
            <param name="preview"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <param name="nsfw"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new link post controller instance, populated only with its fullname.
            </summary>
            <param name="dispatch"></param>
            <param name="fullname">Fullname of the post</param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,System.String,System.String)">
            <summary>
            Create a new link post controller instance, populated only with its fullname and subreddit.
            </summary>
            <param name="dispatch"></param>
            <param name="fullname">Fullname of the post</param>
            <param name="subreddit">A valid subreddit instance</param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Newtonsoft.Json.Linq.JObject,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new link post controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">A valid subreddit instance</param>
            <param name="title">The title of the post</param>
            <param name="url">The link post URL</param>
            <param name="author">The post author's username</param>
            <param name="thumbnail"></param>
            <param name="thumbnailHeight"></param>
            <param name="thumbnailWidth"></param>
            <param name="preview"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.PostResultShortData,Reddit.Controllers.LinkPost)">
            <summary>
            Create a new link post controller instance, populated from post result data.
            </summary>
            <param name="dispatch"></param>
            <param name="postResultShortData"></param>
            <param name="linkPost"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Controllers.SelfPost)">
            <summary>
            Create a new link post controller instance, populated from SelfPost data.
            </summary>
            <param name="dispatch"></param>
            <param name="selfPost"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty link post controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.Submit(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Submit this link post to Reddit.
            </summary>
            <param name="resubmit">boolean value</param>
            <param name="ad">boolean value</param>
            <param name="app"></param>
            <param name="extension">extension used for redirects</param>
            <param name="flairId">a string no longer than 36 characters</param>
            <param name="flairText">a string no longer than 64 characters</param>
            <param name="gRecapthaResponse"></param>
            <param name="sendReplies">boolean value</param>
            <param name="spoiler">boolean value</param>
            <param name="videoPosterUrl">a valid URL</param>
            <returns>A copy of this instance populated with the ID and Fullname returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.SubmitAsync(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Submit this link post to Reddit asynchronously.  This instance will automatically be updated with the resulting fullname/id.
            </summary>
            <param name="resubmit">boolean value</param>
            <param name="ad">boolean value</param>
            <param name="app"></param>
            <param name="extension">extension used for redirects</param>
            <param name="flairId">a string no longer than 36 characters</param>
            <param name="flairText">a string no longer than 64 characters</param>
            <param name="gRecapthaResponse"></param>
            <param name="sendReplies">boolean value</param>
            <param name="spoiler">boolean value</param>
            <param name="videoPosterUrl">a valid URL</param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.Submit(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit this link post to Reddit.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecapthaResponse"></param>
            <returns>A copy of this instance populated with the ID and Fullname returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.SubmitAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit this link post to Reddit asynchronously.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecapthaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.XPostTo(System.String)">
            <summary>
            Cross-post this to another subreddit.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.XPostToAsync(System.String)">
            <summary>
            Cross-post this to another subreddit asynchronously.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.About">
            <summary>
            Return information about the current LinkPost instance.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.GetDuplicates(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Return a list of other submissions of the same URL.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="crosspostsOnly">boolean value</param>
            <param name="sort">one of (num_comments, new)</param>
            <param name="sr">subreddit name</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of matching posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.GetDuplicates(Reddit.Inputs.Listings.ListingsGetDuplicatesInput)">
            <summary>
            Return a list of other submissions of the same URL.
            </summary>
            <param name="listingsGetDuplicatesInput">A valid ListingsGetDuplicatesInput instance</param>
            <returns>A list of matching posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.GetCrossPosts(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Return a list of crossposts.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="sort">one of (num_comments, new)</param>
            <param name="sr">subreddit name</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of matching posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.LinkPost.GetCrossPosts(Reddit.Inputs.Listings.ListingsGetDuplicatesInput)">
            <summary>
            Return a list of crossposts.
            </summary>
            <param name="listingsGetDuplicatesInput">A valid ListingsGetDuplicatesInput instance</param>
            <returns>A list of matching posts.</returns>
        </member>
        <member name="T:Reddit.Controllers.LiveThread">
            <summary>
            Controller class for live threads.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.LiveThread.ThreadUpdated">
            <summary>
            Event handler for monitoring changes to live thread for changes to its properties.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.LiveThread.ContributorsUpdated">
            <summary>
            Event handler for monitoring changes to the contributors list.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.LiveThread.UpdatesUpdated">
            <summary>
            Event handler for monitoring live updates.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Id">
            <summary>
            The ID36 of the live thread.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Fullname">
            <summary>
            The fullname of the live thread.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Description">
            <summary>
            A description of the live thread.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.NSFW">
            <summary>
            Whether the live thread is NSFW.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Resources">
            <summary>
            Live thread resources.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Title">
            <summary>
            Title of the live thread.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.TotalViews">
            <summary>
            How many views the live thread has.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Created">
            <summary>
            When the live thread was created.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.WebsocketURL">
            <summary>
            Web socket URL (web sockets not yet supported by this library)
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.IsAnnouncement">
            <summary>
            Whether the live thread is an announcement.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.AnnouncementURL">
            <summary>
            The announcement URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.State">
            <summary>
            Live thread state.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.ViewerCount">
            <summary>
            How many people are viewing the live thread right now.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Icon">
            <summary>
            Icon URL for the live thread.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.EventData">
            <summary>
            The full LiveUpdateEvent data retrieved from the API.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Updates">
            <summary>
            List of live thread updates.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.LiveThread.Contributors">
            <summary>
            List of live thread contributors.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.#ctor(Reddit.Controllers.Dispatch,Reddit.Controllers.LiveThread)">
            <summary>
            Create a new live thread controller instance from another live thread controller instance.
            </summary>
            <param name="dispatch"></param>
            <param name="liveThread">A valid instance of this class</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.LiveUpdateEvent)">
            <summary>
            Create a new live thread controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="liveUpdateEvent"></param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Create a new live thread controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="title">Title of the thread</param>
            <param name="description">Description of the thread</param>
            <param name="nsfw">Whether the thread is NSFW</param>
            <param name="resources"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="websocketUrl"></param>
            <param name="announcementUrl"></param>
            <param name="state"></param>
            <param name="icon"></param>
            <param name="totalViews"></param>
            <param name="viewerCount"></param>
            <param name="created"></param>
            <param name="isAnnouncement"></param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new live thread controller instance populated with only its id.
            </summary>
            <param name="dispatch"></param>
            <param name="id">A valid live thread ID</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.About">
            <summary>
            Get some basic information about the live thread.
            </summary>
            <returns>An instance of this class populated with the returned data.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.GetUpdates(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get a list of updates posted in this thread.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="styleSr">subreddit name</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <returns>The requested live updates.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.GetUpdates(Reddit.Inputs.LiveThreads.LiveThreadsGetUpdatesInput)">
            <summary>
            Get a list of updates posted in this thread.
            </summary>
            <param name="liveThreadsGetUpdatesInput">A valid LiveThreadsGetUpdatesInput instance</param>
            <returns>The requested live updates.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Create(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Create a new live thread.
            </summary>
            <param name="title">a string no longer than 120 characters</param>
            <param name="description">raw markdown text</param>
            <param name="nsfw">boolean value</param>
            <param name="resources">raw markdown text</param>
            <returns>An instance of this class populated with data from the new live thread.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.CreateAsync(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Create a new live thread asynchronously.
            </summary>
            <param name="title">a string no longer than 120 characters</param>
            <param name="description">raw markdown text</param>
            <param name="nsfw">boolean value</param>
            <param name="resources">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Create(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Create a new live thread.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
            <returns>An instance of this class populated with data from the new live thread.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.CreateAsync(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Create a new live thread asynchronously.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.AcceptContributorInvite">
            <summary>
            Accept a pending invitation to contribute to the thread.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.AcceptContributorInviteAsync">
            <summary>
            Asynchronously accept a pending invitation to contribute to the thread.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Close">
            <summary>
            Permanently close the thread, disallowing future updates.
            Requires the close permission for this thread.
            Returns forbidden response if the thread has already been closed.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.CloseAsync">
            <summary>
            Permanently close the thread asynchronously, disallowing future updates.
            Requires the close permission for this thread.
            Returns forbidden response if the thread has already been closed.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.DeleteUpdate(System.String)">
            <summary>
            Delete an update from the thread.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            </summary>
            <param name="updateName">the Name of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.DeleteUpdateAsync(System.String)">
            <summary>
            Delete an update from the thread asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            </summary>
            <param name="updateName">the Name of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SaveChanges">
            <summary>
            Configure the thread.
            Requires the settings permission for this thread.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SaveChangesAsync">
            <summary>
            Configure the thread asynchronously.
            Requires the settings permission for this thread.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Edit(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Configure the thread.
            Requires the settings permission for this thread.
            </summary>
            <param name="title">a string no longer than 120 characters</param>
            <param name="description">raw markdown text</param>
            <param name="nsfw">boolean value</param>
            <param name="resources">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.EditAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Configure the thread asynchronously.
            Requires the settings permission for this thread.
            </summary>
            <param name="title">a string no longer than 120 characters</param>
            <param name="description">raw markdown text</param>
            <param name="nsfw">boolean value</param>
            <param name="resources">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Edit(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Configure the thread.
            Requires the settings permission for this thread.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.EditAsync(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Configure the thread asynchronously.
            Requires the settings permission for this thread.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.InviteContributor(System.String,System.String,System.String)">
            <summary>
            Invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.InviteContributorAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.InviteContributor(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.InviteContributorAsync(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Asynchronously invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Abandon">
            <summary>
            Abdicate contributorship of the thread.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.AbandonAsync">
            <summary>
            Abdicate contributorship of the thread asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Report(System.String)">
            <summary>
            Report the thread for violating the rules of reddit.
            </summary>
            <param name="type">one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.ReportAsync(System.String)">
            <summary>
            Asynchronously report the thread for violating the rules of reddit.
            </summary>
            <param name="type">one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.RemoveContributor(System.String)">
            <summary>
            Revoke another user's contributorship.
            Requires the manage permission for this thread.
            </summary>
            <param name="user">fullname of an account</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.RemoveContributorAsync(System.String)">
            <summary>
            Revoke another user's contributorship asynchronously.
            Requires the manage permission for this thread.
            </summary>
            <param name="user">fullname of an account</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.RemoveContributorInvite(System.String)">
            <summary>
            Revoke an outstanding contributor invite.
            Requires the manage permission for this thread.
            </summary>
            <param name="user">fullname of an account</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.RemoveContributorInviteAsync(System.String)">
            <summary>
            Revoke an outstanding contributor invite asynchronously.
            Requires the manage permission for this thread.
            </summary>
            <param name="user">fullname of an account</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SetContributorPermissions(System.String,System.String,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SetContributorPermissionsAsync(System.String,System.String,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions asynchronously.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SetContributorPermissions(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Change a contributor or contributor invite's permissions.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.SetContributorPermissionsAsync(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Change a contributor or contributor invite's permissions asynchronously.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.StrikeUpdate(System.String)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            </summary>
            <param name="updateId">the ID (Name) of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.StrikeUpdateAsync(System.String)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            </summary>
            <param name="updateId">the ID (Name) of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.Update(System.String)">
            <summary>
            Post an update to the thread.
            Requires the update permission for this thread.
            </summary>
            <param name="body">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.UpdateAsync(System.String)">
            <summary>
            Post an update to the thread asynchronously.
            Requires the update permission for this thread.
            </summary>
            <param name="body">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.GetContributors">
            <summary>
            Get a list of users that contribute to this thread.
            Note that this includes users who were invited but have not yet accepted.
            </summary>
            <returns>A list of users (0 => Active contributors, 1 => Invited/pending contributors).</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.GetUpdate(System.String)">
            <summary>
            Get details about a specific update in a live thread.
            </summary>
            <param name="updateId">Update Id (not the Name; i.e. without the "LiveUpdate_" prefix)</param>
            <returns>The requested update.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.MonitorThread(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor this live thread for any configuration changes.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.MonitorContributors(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor this live thread for any new or removed contributors.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.MonitorUpdates(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor this live thread for any new updates.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.LiveThread.C_ApplyThreadUpdates(System.Object,Reddit.Controllers.EventArgs.LiveThreadUpdateEventArgs)">
            <summary>
            If automatic monitoring of the thread (not updates or contributors) is enabled, this callback will apply any changes to this instance.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Reddit.Controllers.Modmail">
            <summary>
            Controller class for modmail.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Modmail.RecentUpdated">
            <summary>
            Event handler for monitoring modmail (recent set).
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Modmail.ModUpdated">
            <summary>
            Event handler for monitoring modmail (mod set).
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Modmail.UserUpdated">
            <summary>
            Event handler for monitoring modmail (user set).
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Modmail.UnreadUpdated">
            <summary>
            Event handler for monitoring modmail (unread set).
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Modmail.Recent">
            <summary>
            Recent modmail conversations.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Modmail.Mod">
            <summary>
            Mod modmail conversations.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Modmail.User">
            <summary>
            User modmail conversations.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Modmail.Unread">
            <summary>
            Unread modmail conversations.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Modmail.UnreadCount">
            <summary>
            Unread messages count.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Modmail.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create a new instance of the modmail controller.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetMe">
            <summary>
            Returns a User instance with the data returned from a call to the "me" endpoint.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetConversations(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="sort">one of (recent, mod, user, unread)</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetRecentConversations(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get recent conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetRecentConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get recent conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetModConversations(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get mod conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetModConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get mod conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetUserConversations(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get user conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetUserConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get user conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetUnreadConversations(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get unread conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetUnreadConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get user conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.Count(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Count the number of conversations.
            </summary>
            <param name="useRecent">Count recent conversations.</param>
            <param name="useMod">Count Mod conversations.</param>
            <param name="useUser">Count User conversations.</param>
            <param name="useUnread">Count Unread conversations.</param>
            <returns>The number of conversations.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewConversation(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new conversation for a particular SR.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="body">raw markdown text</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="to">Modmail conversation recipient username</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="srName">subreddit name</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewConversationAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new conversation for a particular SR asynchronously.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="body">raw markdown text</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="to">Modmail conversation recipient username</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="srName">subreddit name</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewConversation(Reddit.Inputs.Modmail.ModmailNewConversationInput,System.String)">
            <summary>
            Creates a new conversation for a particular SR.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="modmailNewConversationInput">A valid ModmailNewConversationInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewConversationAsync(Reddit.Inputs.Modmail.ModmailNewConversationInput)">
            <summary>
            Creates a new conversation for a particular SR asynchronously.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="modmailNewConversationInput">A valid ModmailNewConversationInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetConversation(System.String,System.Boolean)">
            <summary>
            Returns all messages, mod actions and conversation metadata for a given conversation id.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="markRead">boolean value</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewMessage(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new message for a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="body">raw markdown text</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="isInternal">boolean value</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewMessageAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new message for a particular conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="body">raw markdown text</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="isInternal">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewMessage(System.String,Reddit.Inputs.Modmail.ModmailNewMessageInput)">
            <summary>
            Creates a new message for a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="modmailNewMessageInput">A valid ModmailNewMessageInput instance</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.NewMessageAsync(System.String,Reddit.Inputs.Modmail.ModmailNewMessageInput)">
            <summary>
            Creates a new message for a particular conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="modmailNewMessageInput">A valid ModmailNewMessageInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkHighlighted(System.String)">
            <summary>
            Marks a conversation as highlighted.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkHighlightedAsync(System.String)">
            <summary>
            Marks a conversation as highlighted asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.RemoveHighlight(System.String)">
            <summary>
            Removes a highlight from a conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.RemoveHighlightAsync(System.String)">
            <summary>
            Removes a highlight from a conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.Mute(System.String)">
            <summary>
            Mutes the non-mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MuteAsync(System.String)">
            <summary>
            Mutes the non-mod user associated with a particular conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.Unmute(System.String)">
            <summary>
            Unmutes the non-mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.UnmuteAsync(System.String)">
            <summary>
            Unmutes the non-mod user associated with a particular conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.UserHistory(System.String)">
            <summary>
            Returns recent posts, comments and modmail conversations for the user that started this conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the user data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkRead(System.String)">
            <summary>
            Marks conversations as read for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkReadAsync(System.String)">
            <summary>
            Marks conversations as read for the user asynchronously.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkUnread(System.String)">
            <summary>
            Marks conversations as unread for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MarkUnreadAsync(System.String)">
            <summary>
            Marks conversations as unread for the user asynchronously.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.Subreddits">
            <summary>
            Returns a list of srs that the user moderates that are also enrolled in the new modmail.
            </summary>
            <returns>A list of subreddits.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.GetUnreadCount">
            <summary>
            Endpoint to retrieve the unread conversation count by conversation state.
            </summary>
            <returns>An object with the int properties: highlighted, notifications, archived, new, inprogress, and mod.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MonitorRecent(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor recent modmail messages as they arrive.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MonitorMod(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor mod modmail messages as they arrive.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MonitorUser(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor user modmail messages as they arrive.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.MonitorUnread(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor unread modmail messages as they arrive.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.OnRecentUpdated(Reddit.Controllers.EventArgs.ModmailConversationsEventArgs)">
            <summary>
            Invoke monitoring event for recent.
            </summary>
            <param name="e">A valid ModmailConversationsEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.OnModUpdated(Reddit.Controllers.EventArgs.ModmailConversationsEventArgs)">
            <summary>
            Invoke monitoring event for mod.
            </summary>
            <param name="e">A valid ModmailConversationsEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.OnUserUpdated(Reddit.Controllers.EventArgs.ModmailConversationsEventArgs)">
            <summary>
            Invoke monitoring event for user.
            </summary>
            <param name="e">A valid ModmailConversationsEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.OnUnreadUpdated(Reddit.Controllers.EventArgs.ModmailConversationsEventArgs)">
            <summary>
            Invoke monitoring event for unread.
            </summary>
            <param name="e">A valid ModmailConversationsEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.TriggerUpdate(Reddit.Controllers.EventArgs.ModmailConversationsEventArgs,System.String)">
            <summary>
            Invoke the appropriate event for the given type.
            </summary>
            <param name="args">A valid ModmailConversationsEventArgs instance</param>
            <param name="type">One of: (recent, mod, user, unread)</param>
        </member>
        <member name="M:Reddit.Controllers.Modmail.ModmailMessagesRecentIsMonitored">
            <summary>
            Whether recent is being monitored.
            </summary>
            <returns>Whether recent is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.ModmailMessagesModIsMonitored">
            <summary>
            Whether mod is being monitored.
            </summary>
            <returns>Whether mod is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.ModmailMessagesUserIsMonitored">
            <summary>
            Whether user is being monitored.
            </summary>
            <returns>Whether user is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.ModmailMessagesUnreadIsMonitored">
            <summary>
            Whether unread is being monitored.
            </summary>
            <returns>Whether unread is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Modmail.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.Post">
            <summary>
            Base controller for posts.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Post.PostDataUpdated">
            <summary>
            Event handler for monitoring post data.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Post.PostScoreUpdated">
            <summary>
            Event handler for monitoring post score.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Subreddit">
            <summary>
            The subreddit in which the post exists.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Author">
            <summary>
            The username of the post author.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Id">
            <summary>
            The ID36 of the post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Fullname">
            <summary>
            The fullname of the post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Permalink">
            <summary>
            The permalink URL of the post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Created">
            <summary>
            When the post was created.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Edited">
            <summary>
            When the post was last edited.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Removed">
            <summary>
            Whether the post was removed.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Spam">
            <summary>
            Whether the post was marked as spam.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.NSFW">
            <summary>
            Whether the post was marked as NSFW.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Score">
            <summary>
            The post score.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.UpVotes">
            <summary>
            The number of upvotes received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.UpvoteRatio">
            <summary>
            The number of upvotes received divided by the total number of votes.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.IsUpvoted">
            <summary>
            Whether the post has been upvoted by the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.IsDownvoted">
            <summary>
            Whether the post has been downvoted by the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Awards">
            <summary>
            Any awards applied to the post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.DownVotes">
            <summary>
            The number of downvotes received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Title">
            <summary>
            The title of the post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Listing">
            <summary>
            The full Listing object returned by the Reddit API;
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Post.Comments">
            <summary>
            Comment replies to this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.Post)">
            <summary>
            Create a new post controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="listing"></param>
        </member>
        <member name="M:Reddit.Controllers.Post.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new post controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">The subreddit to which the post belongs</param>
            <param name="title">The title of the post</param>
            <param name="author">The post author's username</param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <param name="nsfw"></param>
        </member>
        <member name="M:Reddit.Controllers.Post.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new post controller instance, populated with only its fullname.
            </summary>
            <param name="dispatch"></param>
            <param name="fullname">Fullname of the post</param>
        </member>
        <member name="M:Reddit.Controllers.Post.#ctor(Reddit.Controllers.Dispatch,System.String,System.String)">
            <summary>
            Create a new post controller instance, populated with only its fullname and subreddit.
            </summary>
            <param name="dispatch"></param>
            <param name="fullname">Fullname of the post</param>
            <param name="subreddit">A valid subreddit name</param>
        </member>
        <member name="M:Reddit.Controllers.Post.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty post controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Post.SetTitle(System.String)">
            <summary>
            Set the title manually without any automatic decoding.
            </summary>
            <param name="value">The title value you wish to set</param>
        </member>
        <member name="M:Reddit.Controllers.Post.Comment(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new comment controller instance bound to this post, populated manually.
            </summary>
            <param name="body">The comment text</param>
            <param name="bodyHtml"></param>
            <param name="author">The username of the comment's author</param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <returns></returns>
        </member>
        <member name="M:Reddit.Controllers.Post.Comment">
            <summary>
            Create a new comment controller instance bound to this post.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reddit.Controllers.Post.Reply(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reply with a comment to this post.
            </summary>
            <param name="body">The comment reply text</param>
            <param name="bodyHtml"></param>
            <param name="author"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
            <returns>The newly-created comment reply.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.ReplyAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Reddit.Controllers.Comment},System.Collections.Generic.List{Reddit.Things.More},System.Boolean,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reply with a comment to this post asynchronously.
            </summary>
            <param name="body">The comment reply text</param>
            <param name="bodyHtml"></param>
            <param name="author"></param>
            <param name="collapsedReason"></param>
            <param name="collapsed"></param>
            <param name="isSubmitter"></param>
            <param name="replies"></param>
            <param name="more"></param>
            <param name="scoreHidden"></param>
            <param name="depth"></param>
            <param name="id"></param>
            <param name="fullname"></param>
            <param name="permalink"></param>
            <param name="created"></param>
            <param name="edited"></param>
            <param name="score"></param>
            <param name="upVotes"></param>
            <param name="downVotes"></param>
            <param name="removed"></param>
            <param name="spam"></param>
        </member>
        <member name="M:Reddit.Controllers.Post.About">
            <summary>
            Return information about the current Post instance.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.Info">
            <summary>
            Return information about the current Post instance via the api/info endpoint.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.SetFlair(System.String,System.String)">
            <summary>
            Sets the link flair.
            </summary>
            <param name="flairText">The text to be displayed in the flair</param>
            <param name="flairTemplateId">(optional) A flair template ID</param>
        </member>
        <member name="M:Reddit.Controllers.Post.SetFlair(Reddit.Inputs.Flair.FlairSelectFlairInput)">
            <summary>
            Sets the link flair.
            </summary>
            <param name="flairSelectFlairInput">The text to be displayed in the flair</param>
        </member>
        <member name="M:Reddit.Controllers.Post.Distinguish(System.String)">
            <summary>
            Distinguish a post's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <returns>The distinguished post object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.DistinguishAsync(System.String)">
            <summary>
            Distinguish a post's author with a sigil asynchronously.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <returns>The distinguished post object.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.Remove(System.Boolean)">
            <summary>
            Remove this post from all subreddit listings.
            </summary>
            <param name="spam">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Post.RemoveAsync(System.Boolean)">
            <summary>
            Asynchronously remove this post from all subreddit listings.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Delete">
            <summary>
            Delete this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DeleteAsync">
            <summary>
            Delete this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Hide">
            <summary>
            Hide this post.
            This removes it from the user's default view of subreddit listings.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.HideAsync">
            <summary>
            Hide this post asynchronously.
            This removes it from the user's default view of subreddit listings.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Lock">
            <summary>
            Lock this post.
            Prevents a post from receiving new comments.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.LockAsync">
            <summary>
            Lock this post asynchronously.
            Prevents a post from receiving new comments.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.MarkNSFW">
            <summary>
            Mark this post as NSFW.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.MarkNSFWAsync">
            <summary>
            Mark this post as NSFW asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.MoreChildren(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="children">a comma-delimited list of comment ID36s</param>
            <param name="limitChildren">boolean value</param>
            <param name="sort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="id">(optional) id of the associated MoreChildren object</param>
            <returns>The requested comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.MoreChildren(Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="linksAndCommentsMoreChildrenInput">A valid LinksAndCommentsMoreChildrenInput instance</param>
            <returns>The requested comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.Report(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Report this post to the subreddit moderators.  The post then becomes implicitly hidden, as well.
            </summary>
            <param name="additionalInfo">a string no longer than 2000 characters</param>
            <param name="banEvadingAccountsNames">a string no longer than 1000 characters</param>
            <param name="customText">a string no longer than 250 characters</param>
            <param name="fromHelpCenter">boolean value</param>
            <param name="otherReason">a string no longer than 100 characters</param>
            <param name="reason">a string no longer than 100 characters</param>
            <param name="ruleReason">a string no longer than 100 characters</param>
            <param name="siteReason">a string no longer than 100 characters</param>
            <param name="violatorUsername">A valid Reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Post.ReportAsync(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Report this post to the subreddit moderators asynchronously.  The post then becomes implicitly hidden, as well.
            </summary>
            <param name="additionalInfo">a string no longer than 2000 characters</param>
            <param name="banEvadingAccountsNames">a string no longer than 1000 characters</param>
            <param name="customText">a string no longer than 250 characters</param>
            <param name="fromHelpCenter">boolean value</param>
            <param name="otherReason">a string no longer than 100 characters</param>
            <param name="reason">a string no longer than 100 characters</param>
            <param name="ruleReason">a string no longer than 100 characters</param>
            <param name="siteReason">a string no longer than 100 characters</param>
            <param name="violatorUsername">A valid Reddit username</param>
        </member>
        <member name="M:Reddit.Controllers.Post.Report(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report this post to the subreddit moderators.  The post then becomes implicitly hidden, as well.
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Post.ReportAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report this post to the subreddit moderators asynchronously.  The post then becomes implicitly hidden, as well.
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Post.Save(System.String)">
            <summary>
            Save this post.
            Saved things are kept in the user's saved listing for later perusal.
            </summary>
            <param name="category">a category name</param>
        </member>
        <member name="M:Reddit.Controllers.Post.SaveAsync(System.String)">
            <summary>
            Save this post asynchronously.
            Saved things are kept in the user's saved listing for later perusal.
            </summary>
            <param name="category">a category name</param>
        </member>
        <member name="M:Reddit.Controllers.Post.EnableSendReplies">
            <summary>
            Enable inbox replies for this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.EnableSendRepliesAsync">
            <summary>
            Enable inbox replies for this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DisableSendReplies">
            <summary>
            Disable inbox replies for this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DisableSendRepliesAsync">
            <summary>
            Disable inbox replies for this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.EnableContestMode">
            <summary>
            Enable contest mode for this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.EnableContestModeAsync">
            <summary>
            Enable contest mode for this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DisableContestMode">
            <summary>
            Disable contest mode for this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DisableContestModeAsync">
            <summary>
            Disable contest mode for this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.SetSubredditSticky(System.Int32,System.Boolean)">
            <summary>
            Set this post as the sticky in its subreddit.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="num">an integer between 1 and 4</param>
            <param name="toProfile">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Post.SetSubredditStickyAsync(System.Int32,System.Boolean)">
            <summary>
            Set this post as the sticky in its subreddit asynchronously.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="num">an integer between 1 and 4</param>
            <param name="toProfile">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Post.UnsetSubredditSticky(System.Int32,System.Boolean)">
            <summary>
            Unset this post as the sticky in its subreddit.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="num">an integer between 1 and 4</param>
            <param name="toProfile">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Post.UnsetSubredditStickyAsync(System.Int32,System.Boolean)">
            <summary>
            Unset this post as the sticky in its subreddit asynchronously.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="num">an integer between 1 and 4</param>
            <param name="toProfile">boolean value</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Reddit.Controllers.Post.SetSuggestedSort(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Reddit.Controllers.Post.SetSuggestedSortAsync(System.String)" -->
        <member name="M:Reddit.Controllers.Post.Spoiler">
            <summary>
            Mark this post as containing spoilers.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.SpoilerAsync">
            <summary>
            Mark this post as containing spoilers asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Unhide">
            <summary>
            Unhide this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnhideAsync">
            <summary>
            Unhide this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Unlock">
            <summary>
            Unlock this post.
            Allows this post to receive new comments.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnlockAsync">
            <summary>
            Unlock this post asynchronously.
            Allows this post to receive new comments.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnmarkNSFW">
            <summary>
            Remove the NSFW marking from this post.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnmarkNSFWAsync">
            <summary>
            Remove the NSFW marking from this post asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Unsave">
            <summary>
            Unsave this post.
            This removes the thing from the user's saved listings as well.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnsaveAsync">
            <summary>
            Unsave this post asynchronously.
            This removes the thing from the user's saved listings as well.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Unspoiler">
            <summary>
            Remove spoiler.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnspoilerAsync">
            <summary>
            Remove spoiler asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Upvote">
            <summary>
            Upvote this post.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UpvoteAsync">
            <summary>
            Upvote this post asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Downvote">
            <summary>
            Downvote this post.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.DownvoteAsync">
            <summary>
            Downvote this post asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Unvote">
            <summary>
            Unvote this post.  This is equivalent to "un-voting" by clicking again on a highlighted arrow.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.UnvoteAsync">
            <summary>
            Unvote this post asynchronously.
            Please note that votes must be cast by humans.  Automated bot-voting violates Reddit's rules.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the Reddit rules for more details on what constitutes vote cheating.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.Approve">
            <summary>
            Approve this post.
            If the thing was removed, it will be re-inserted into appropriate listings.
            Any reports on the approved thing will be discarded.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Post.FlairSelector(System.String)">
            <summary>
            Return information about a users's flair options.
            </summary>
            <param name="username">A valid Reddit username</param>
            <returns>Flair results.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.OnPostDataUpdated(Reddit.Controllers.EventArgs.PostUpdateEventArgs)">
            <summary>
            Invoke monitoring event for post data.
            </summary>
            <param name="e">A valid PostUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Post.OnPostScoreUpdated(Reddit.Controllers.EventArgs.PostUpdateEventArgs)">
            <summary>
            Invoke monitoring event for post score.
            </summary>
            <param name="e">A valid PostUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.Post.MonitorPostData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Monitor this post for any configuration changes.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.MonitorPostScore(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Monitor this post for any score changes.
            In order for the event to fire, *both* minScoreMonitoringThreshold AND scoreMonitoringPercentThreshold must be met.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="minScoreMonitoringThreshold">The minimum change in score value between events (default: 4)</param>
            <param name="scoreMonitoringPercentThreshold">The minimum score percent change between events (default: 8)</param>
            <param name="cancellationThresholdMinutes">If not null, monitoring will automatically stop if more than this time elapses between score updates (default: null)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.PostDataIsMonitored">
            <summary>
            Whether post data is being monitored.
            </summary>
            <returns>Whether post data is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.PostScoreIsMonitored">
            <summary>
            Whether post score is being monitored.
            </summary>
            <returns>Whether post score is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Post.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.PrivateMessages">
            <summary>
            Controller class for private messages.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.PrivateMessages.InboxUpdated">
            <summary>
            Event handler for monitoring inbox.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.PrivateMessages.UnreadUpdated">
            <summary>
            Event handler for monitoring unread.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.PrivateMessages.SentUpdated">
            <summary>
            Event handler for monitoring sent.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.PrivateMessages.Inbox">
            <summary>
            List of inbox messages.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.PrivateMessages.Unread">
            <summary>
            List of unread messages.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.PrivateMessages.Sent">
            <summary>
            List of sent messages.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.#ctor(Reddit.Controllers.Dispatch,System.Collections.Generic.List{Reddit.Things.Message},System.Collections.Generic.List{Reddit.Things.Message},System.Collections.Generic.List{Reddit.Things.Message})">
            <summary>
            Create a new instance of the private messages controller.
            </summary>
            <param name="dispatch"></param>
            <param name="inbox"></param>
            <param name="unread"></param>
            <param name="sent"></param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.GetMessages(System.String,System.Boolean,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Retrieve private messages for the current user.
            </summary>
            <param name="where">One of (inbox, unread, sent)</param>
            <param name="mark">one of (true, false)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="mid"></param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.GetMessages(System.String,Reddit.Inputs.PrivateMessages.PrivateMessagesGetMessagesInput)">
            <summary>
            Retrieve private messages for the current user.
            </summary>
            <param name="where">One of (inbox, unread, sent)</param>
            <param name="privateMessagesGetMessagesInput">A valid PrivateMessagesGetMessagesInput instance</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.GetMessagesInbox(System.Boolean,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Retrieve private inbox messages for the current user.
            </summary>
            <param name="mark">one of (true, false)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="mid"></param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.GetMessagesUnread(System.Boolean,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Retrieve private unread messages for the current user.
            </summary>
            <param name="mark">one of (true, false)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="mid"></param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.GetMessagesSent(System.Boolean,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Retrieve private sent messages for the current user.
            </summary>
            <param name="mark">one of (true, false)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="mid"></param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.MarkAllRead(System.String)">
            <summary>
            Queue up marking all messages for a user as read.
            This may take some time, and returns 202 to acknowledge acceptance of the request.
            </summary>
            <param name="filterTypes">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.MarkAllReadAsync(System.String)">
            <summary>
            Asynchronously queue up marking all messages for a user as read.
            This may take some time, and returns 202 to acknowledge acceptance of the request.
            </summary>
            <param name="filterTypes">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.CollapseMessage(System.String)">
            <summary>
            Collapse a message.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.CollapseMessageAsync(System.String)">
            <summary>
            Collapse a message asynchronously.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.DeleteMessage(System.String)">
            <summary>
            Delete messages from the recipient's view of their inbox.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.DeleteMessageAsync(System.String)">
            <summary>
            Delete messages from the recipient's view of their inbox asynchronously.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.ReadMessage(System.String)">
            <summary>
            Mark a message as read.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.ReadMessageAsync(System.String)">
            <summary>
            Mark a message as read asynchronously.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.UncollapseMessage(System.String)">
            <summary>
            Uncollapse a message.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.UncollapseMessageAsync(System.String)">
            <summary>
            Uncollapse a message asynchronously.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.UnreadMessage(System.String)">
            <summary>
            Mark a message as unread.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.UnreadMessageAsync(System.String)">
            <summary>
            Mark a message as unread asynchronously.
            </summary>
            <param name="ids">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.Compose(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a private message.
            </summary>
            <param name="to">the name of an existing user</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="text">raw markdown text</param>
            <param name="fromSr">subreddit name</param>
            <param name="gRecaptchaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.ComposeAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a private message asynchronously.
            </summary>
            <param name="to">the name of an existing user</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="text">raw markdown text</param>
            <param name="fromSr">subreddit name</param>
            <param name="gRecaptchaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.Compose(Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput,System.String)">
            <summary>
            Send a private message.
            </summary>
            <param name="privateMessagesComposeInput">A valid PrivateMessagesComposeInput instance</param>
            <param name="gRecaptchaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.ComposeAsync(Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput,System.String)">
            <summary>
            Send a private message asynchronously.
            </summary>
            <param name="privateMessagesComposeInput">A valid PrivateMessagesComposeInput instance</param>
            <param name="gRecaptchaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.Reply(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Reply to a private message.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The created message reply.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.ReplyAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Reply to a private message asynchronously.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The created message reply.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.OnInboxUpdated(Reddit.Controllers.EventArgs.MessagesUpdateEventArgs)">
            <summary>
            Invoke monitoring event for inbox.
            </summary>
            <param name="e">A valid MessagesUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.OnUnreadUpdated(Reddit.Controllers.EventArgs.MessagesUpdateEventArgs)">
            <summary>
            Invoke monitoring event for unread.
            </summary>
            <param name="e">A valid MessagesUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.OnSentUpdated(Reddit.Controllers.EventArgs.MessagesUpdateEventArgs)">
            <summary>
            Invoke monitoring event for sent.
            </summary>
            <param name="e">A valid MessagesUpdateEventArgs instance</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.MonitorInbox(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor inbox messages.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.MonitorUnread(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor unread messages.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.MonitorSent(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor sent messages.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.TriggerUpdate(Reddit.Controllers.EventArgs.MessagesUpdateEventArgs,System.String)">
            <summary>
            Invoke the appropriate event for the given type.
            </summary>
            <param name="args">A valid MessagesUpdateEventArgs instance</param>
            <param name="type">One of: (inbox, unread, sent)</param>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.PrivateMessagesInboxIsMonitored">
            <summary>
            Whether inbox is being monitored.
            </summary>
            <returns>Whether inbox is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.PrivateMessagesUnreadIsMonitored">
            <summary>
            Whether unread is being monitored.
            </summary>
            <returns>Whether unread is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.PrivateMessagesSentIsMonitored">
            <summary>
            Whether sent is being monitored.
            </summary>
            <returns>Whether sent is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.PrivateMessages.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.SelfPost">
            <summary>
            Controller class for self posts.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SelfPost.SelfText">
            <summary>
            The body of the self post.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SelfPost.SelfTextHTML">
            <summary>
            The body of the self post rendered as HTML.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.Post)">
            <summary>
            Create new SelfPost instance from Reddit API listing.
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
            <param name="listing">Listing returned by Reddit API.</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new SelfPost instance and populate manually.
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
            <param name="subreddit">The subreddit the post belongs to.</param>
            <param name="title">Post title.</param>
            <param name="author">Reddit user who authored the post.</param>
            <param name="selfText">The post body.</param>
            <param name="selfTextHtml">The HTML-formateed post body.</param>
            <param name="id">Post ID.</param>
            <param name="fullname">Post fullname.</param>
            <param name="permalink">Permalink of post.</param>
            <param name="created">When the post was created.</param>
            <param name="edited">When the post was last edited.</param>
            <param name="score">Net vote score.</param>
            <param name="upVotes">Number of upvotes.</param>
            <param name="downVotes">Number of downvotes.</param>
            <param name="removed">Whether the post was removed.</param>
            <param name="spam">Whether the post was marked as spam.</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new SelfPost instance populated only with its Fullname.
            Useful for About() queries (e.g. new SelfPost("t3_whatever").About() will retrieve a new SelfPost by its fullname).
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
            <param name="fullname">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,System.String,System.String)">
            <summary>
            Create a new SelfPost instance populated with its Fullname and Subreddit.
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
            <param name="fullname">fullname of a thing</param>
            <param name="subreddit">The subreddit where the post exists</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.PostResultShortData,Reddit.Controllers.SelfPost)">
            <summary>
            Create a new SelfPost instance populated with its Subreddit, an ID/Fullname returned by the API, and other specified values.
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
            <param name="postResultShortData">Data returned by the Reddit API when creating a new post</param>
            <param name="selfPost">The SelfPost instance that executed the submission</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch,Reddit.Controllers.LinkPost)">
            <summary>
            Create a new self post controller instance, populated from LinkPost data.
            </summary>
            <param name="dispatch"></param>
            <param name="linkPost"></param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty SelfPost instance.
            </summary>
            <param name="dispatch">An instance of the Dispatch controller</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.SetSelfText(System.String)">
            <summary>
            Set the self text manually without any automatic decoding.
            </summary>
            <param name="value">The self text value you wish to set</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.SetSelfTextHTML(System.String)">
            <summary>
            Set the self text HTML manually without any automatic decoding.
            </summary>
            <param name="value">The self text HTML value you wish to set</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.Submit(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Submit this self post to Reddit.
            </summary>
            <param name="ad">boolean value</param>
            <param name="app"></param>
            <param name="extension">extension used for redirects</param>
            <param name="flairId">a string no longer than 36 characters</param>
            <param name="flairText">a string no longer than 64 characters</param>
            <param name="gRecapthaResponse"></param>
            <param name="sendReplies">boolean value</param>
            <param name="spoiler">boolean value</param>
            <param name="videoPosterUrl">a valid URL</param>
            <returns>A copy of this instance populated with the ID and Fullname returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.SubmitAsync(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Submit this self post to Reddit asynchronously.  This instance will automatically be updated with the resulting fullname/id.
            </summary>
            <param name="ad">boolean value</param>
            <param name="app"></param>
            <param name="extension">extension used for redirects</param>
            <param name="flairId">a string no longer than 36 characters</param>
            <param name="flairText">a string no longer than 64 characters</param>
            <param name="gRecapthaResponse"></param>
            <param name="sendReplies">boolean value</param>
            <param name="spoiler">boolean value</param>
            <param name="videoPosterUrl">a valid URL</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.Submit(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit this self post to Reddit.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecapthaResponse"></param>
            <returns>A copy of this instance populated with the ID and Fullname returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.SubmitAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit this self post to Reddit asynchronously.  This instance will automatically be updated with the resulting fullname/id.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecapthaResponse"></param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.XPostTo(System.String,System.Boolean)">
            <summary>
            Cross-post this to another subreddit.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <param name="creditOriginSub">Whether to include an attribution to the source subreddit in the title (default: true)</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.XPostToAsync(System.String,System.Boolean)">
            <summary>
            Cross-post this to another subreddit asynchronously.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <param name="creditOriginSub">Whether to include an attribution to the source subreddit in the title (default: true)</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.XPostToAsLink(System.String,System.Boolean,System.Boolean)">
            <summary>
            Link to this post from another subreddit.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <param name="creditOriginSub">Whether to include an attribution to the source subreddit in the title (default: true)</param>
            <param name="np">Whether to use np.reddit.com as the URL host (default: true)</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.XPostToAsLinkAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Link to this post from another subreddit asynchronously.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <param name="creditOriginSub">Whether to include an attribution to the source subreddit in the title (default: true)</param>
            <param name="np">Whether to use np.reddit.com as the URL host (default: true)</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.PrepareXLinkPost(System.String,System.Boolean,System.Boolean)">
            <summary>
            Prepare a LinkPost object for cross-posting.
            </summary>
            <param name="subreddit">The name of the subreddit being xposted to</param>
            <param name="creditOriginSub">Whether to include an attribution to the source subreddit in the title (default: true)</param>
            <param name="np">Whether to use np.reddit.com as the URL host (default: true)</param>
            <returns>The resulting post data.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.Edit(System.String)">
            <summary>
            Edit the body text of this self post.  This instance will be automatically updated with the return data.
            </summary>
            <param name="text">raw markdown text</param>
            <returns>This instance populated with the modified post data returned by the API.</returns>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.EditAsync(System.String)">
            <summary>
            Edit the body text of this self post asynchronously.  This instance will be automatically updated with the return data.
            </summary>
            <param name="text">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.SelfPost.About">
            <summary>
            Return information about the current SelfPost instance.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="P:Reddit.Controllers.Structures.Awards.Silver">
            <summary>
            The number of silver gildings (awards) received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.Awards.Gold">
            <summary>
            The number of gold gildings (awards) received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.Awards.Platinum">
            <summary>
            The number of platinum gildings (awards) received.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.Awards.Count">
            <summary>
            The total number of gildings (awards) received.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Structures.Awards.#ctor(Reddit.Things.Post)">
            <summary>
            Initialize the Awards controller from a post.
            </summary>
            <param name="post">A valid Things.Post instance</param>
        </member>
        <member name="M:Reddit.Controllers.Structures.Awards.#ctor(Reddit.Things.Comment)">
            <summary>
            Initialize the Awards controller from a comment.
            </summary>
            <param name="post">A valid Things.Comment instance</param>
        </member>
        <member name="M:Reddit.Controllers.Structures.Awards.#ctor">
            <summary>
            Create an empty Awards controller instance.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringSchedule.ScheduleDays">
            <summary>
            Which days of the week this schedule applies to; set to null to run 7 days/week
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringSchedule.StartHour">
            <summary>
            The hour to start monitoring in 24-hour format (0 = midnight, 23 = 11 PM)
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringSchedule.StartMinute">
            <summary>
            The minute to start monitoring
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringSchedule.EndHour">
            <summary>
            The hour to stop monitoring in 24-hour format (0 = midnight, 23 = 11 PM)
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringSchedule.EndMinute">
            <summary>
            The minute to stop monitoring
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Structures.MonitoringSchedule.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Reddit.Controllers.Structures.MonitoringScheduleDays)">
            <summary>
            Specifies a timeframe for when a thing should be monitored.
            If this instance is null, it means that the thing will be monitored 24/7.
            </summary>
            <param name="startHour">The hour to start monitoring in 24-hour format (0 = midnight, 23 = 11 PM)</param>
            <param name="startMinute">The minute to start monitoring</param>
            <param name="endHour">The hour to stop monitoring in 24-hour format (0 = midnight, 23 = 11 PM)</param>
            <param name="endMinute">The minute to stop monitoring</param>
            <param name="scheduleDays">Which days of the week this schedule applies to; leave null to run 7 days/week</param>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Sunday">
            <summary>
            Whether to monitor on Sundays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Monday">
            <summary>
            Whether to monitor on Mondays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Tuesday">
            <summary>
            Whether to monitor on Tuesdays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Wednesday">
            <summary>
            Whether to monitor on Wednesdays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Thursday">
            <summary>
            Whether to monitor on Thursdays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Friday">
            <summary>
            Whether to monitor on Fridays.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Structures.MonitoringScheduleDays.Saturday">
            <summary>
            Whether to monitor on Saturdays.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Structures.MonitoringScheduleDays.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new instance that specifies which days of the week a thing should be monitored.
            </summary>
            <param name="sunday">If true, monitor on Sundays</param>
            <param name="monday">If true, monitor on Mondays</param>
            <param name="tuesday">If true, monitor on Tuesdays</param>
            <param name="wednesday">If true, monitor on Wednesdays</param>
            <param name="thursday">If true, monitor on Thursdays</param>
            <param name="friday">If true, monitor on Fridays</param>
            <param name="saturday">If true, monitor on Saturdays</param>
        </member>
        <member name="M:Reddit.Controllers.Structures.MonitoringScheduleDays.IsScheduledToday">
            <summary>
            Check to see if today is part of the schedule.
            </summary>
            <returns>Returns true if we're scheduled to run today, false otherwise.</returns>
        </member>
        <member name="T:Reddit.Controllers.Subreddit">
            <summary>
            Controller class for subreddits.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.BannerImg">
            <summary>
            The banner image URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.BannerBackgroundColor">
            <summary>
            The banner background color.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.BannerBackgroundImage">
            <summary>
            The banner background image URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubredditType">
            <summary>
            The subreddit type (public, restricted, or private)
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.CommunityIcon">
            <summary>
            The community icon URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.HeaderTitle">
            <summary>
            The header title.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.WikiEnabled">
            <summary>
            Whether the wiki is enabled for this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Over18">
            <summary>
            Whether you have to be over 18 to view this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Sidebar">
            <summary>
            The sidebar text.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Name">
            <summary>
            The subreddit name.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.HeaderImg">
            <summary>
            The header image.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Title">
            <summary>
            The subreddit title.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.CollapseDeletedComments">
            <summary>
            Whether to collapse deleted comments.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Id">
            <summary>
            The ID36 of this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.EmojisEnabled">
            <summary>
            Whether emojis are enabled.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.ShowMedia">
            <summary>
            Whether to show media.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.AllowVideos">
            <summary>
            Whether to allow videos.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.CanAssignUserFlair">
            <summary>
            Whether user flair can be assigned.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SpoilersEnabled">
            <summary>
            Whether spoilers are enabled.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.PrimaryColor">
            <summary>
            The primary color.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SuggestedCommentSort">
            <summary>
            The suggested comment sort for this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.ActiveUserCount">
            <summary>
            The active user count.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.IconImg">
            <summary>
            The icon image.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.CanAssignLinkFlair">
            <summary>
            Whether link flair can be assigned.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.AllowVideoGifs">
            <summary>
            Whether to allow video GIFs.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Subscribers">
            <summary>
            The number of subscribers.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubmitTextLabel">
            <summary>
            The submit text label.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.KeyColor">
            <summary>
            The key color.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Lang">
            <summary>
            The language.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Fullname">
            <summary>
            The subreddit fullname.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Created">
            <summary>
            When the subreddit was created.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.URL">
            <summary>
            The URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubmitLinkLabel">
            <summary>
            The submit link label.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.AllowDiscovery">
            <summary>
            Whether to allow discovery.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Description">
            <summary>
            The subreddit description.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.LinkFlairEnabled">
            <summary>
            Whether link flair is enabled.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.AllowImages">
            <summary>
            Whether to allow images.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.CommentScoreHideMins">
            <summary>
            How many minutes to hide comment scores.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.ShowMediaPreview">
            <summary>
            Whether to show media previews.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubmissionType">
            <summary>
            The submission type.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubredditData">
            <summary>
            Full subreddit data retrieved from the API.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Posts">
            <summary>
            Posts belonging to this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Comments">
            <summary>
            Comments belonging to this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Flairs">
            <summary>
            Flairs belonging to this subreddit.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Wiki">
            <summary>
            The subreddit wiki controller.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.SubmitText">
            <summary>
            Get the submission text for the subreddit.
            This text is set by the subreddit moderators and intended to be displayed on the submission form.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Subreddit.Moderators">
            <summary>
            Get the moderators of this subreddit.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.Subreddit)">
            <summary>
            Create a new subreddit controller instance populated from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit"></param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.SubredditChild)">
            <summary>
            Create a new subreddit controller instance populated from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="subredditChild"></param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.#ctor(Reddit.Controllers.Dispatch,Reddit.Controllers.Subreddit)">
            <summary>
            Copy another subreddit controller instance onto this one.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">A valid subreddit controller instance</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32,System.Byte[],System.Byte[],System.String,System.String,System.String)">
            <summary>
            Create a new subreddit controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="name"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="sidebar"></param>
            <param name="submissionText"></param>
            <param name="lang"></param>
            <param name="subredditType"></param>
            <param name="submissionType"></param>
            <param name="submitLinkLabel"></param>
            <param name="submitTextLabel"></param>
            <param name="wikiEnabled"></param>
            <param name="over18"></param>
            <param name="allowDiscovery"></param>
            <param name="allowSpoilers"></param>
            <param name="showMedia"></param>
            <param name="showMediaPreview"></param>
            <param name="allowImages"></param>
            <param name="allowVideos"></param>
            <param name="collapseDeletedComments"></param>
            <param name="suggestedCommentSort"></param>
            <param name="commentScoreHideMins"></param>
            <param name="headerImage"></param>
            <param name="iconImage"></param>
            <param name="primaryColor"></param>
            <param name="keyColor"></param>
            <param name="fullname"></param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty subreddit controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Import(Reddit.Controllers.Subreddit,System.Boolean)">
            <summary>
            Copy all property values from another subreddit instance onto this one.
            </summary>
            <param name="subreddit">The subreddit instance being copied</param>
            <param name="overwrite">If true, any existing values are overwritten</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LinkPost(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Newtonsoft.Json.Linq.JObject,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new LinkPost object attached to this subreddit.
            </summary>
            <returns>A new LinkPost object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LinkPost(System.String)">
            <summary>
            Create a new LinkPost object with the specified fullname attached to this subreddit.
            </summary>
            <param name="fullname">The fullname of an existing LinkPost.</param>
            <returns>A new LinkPost object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SelfPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new SelfPost object attached to this subreddit.
            </summary>
            <returns>A new SelfPost object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SelfPost(System.String)">
            <summary>
            Create a new SelfPost object with the specified fullname attached to this subreddit.
            </summary>
            <param name="fullname">The fullname of an existing SelfPost.</param>
            <returns>A new SelfPost object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Post">
            <summary>
            Create a new generic Post object attached to this subreddit.
            </summary>
            <returns>A new generic Post object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Post(System.String)">
            <summary>
            Create a new generic Post object with the specified fullname attached to this subreddit.
            </summary>
            <param name="fullname">The fullname of an existing Post.</param>
            <returns>A new generic Post object attached to this subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.About">
            <summary>
            Return information about the current subreddit instance.
            </summary>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.AcceptModeratorInvite">
            <summary>
            Accept an invite to moderate the specified subreddit.
            The authenticated user must have been invited to moderate the subreddit by one of its current moderators.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.AcceptModeratorInviteAsync">
            <summary>
            Asynchronously accept an invite to moderate the specified subreddit.
            The authenticated user must have been invited to moderate the subreddit by one of its current moderators.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LeaveModerator">
            <summary>
            Abdicate moderator status in a subreddit.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LeaveModeratorAsync">
            <summary>
            Abdicate moderator status in a subreddit asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LeaveContributor">
            <summary>
            Abdicate approved submitter status in a subreddit.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.LeaveContributorAsync">
            <summary>
            Abdicate approved submitter status in a subreddit asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetModerators(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the moderators of this subreddit.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of subreddit moderators.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetModerators(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get the moderators of this subreddit.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of subreddit moderators.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetContributors(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the approved submitters of this subreddit.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of subreddit contributors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetContributors(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get the approved submitters of this subreddit.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of subreddit contributors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetMutedUsers(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the muted users of this subreddit.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of muted users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetMutedUsers(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get the muted users of this subreddit.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of muted users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetBannedUsers(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a list of users who were banned from this subreddit.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of banned users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetBannedUsers(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get a list of users who were banned from this subreddit.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of banned users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetSubmitText">
            <summary>
            Get the submission text for the subreddit.
            This text is set by the subreddit moderators and intended to be displayed on the submission form.
            </summary>
            <returns>An object containing submission text.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UpdateStylesheet(System.String,System.String)">
            <summary>
            Update a subreddit's stylesheet.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="stylesheetContents">the new stylesheet content</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UpdateStylesheetAsync(System.String,System.String)">
            <summary>
            Update a subreddit's stylesheet asynchronously.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="stylesheetContents">the new stylesheet content</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Subscribe(System.Boolean)">
            <summary>
            Subscribe to a subreddit.
            </summary>
            <param name="skipInitialDefaults">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SubscribeAsync(System.Boolean)">
            <summary>
            Subscribe to a subreddit asynchronously.
            </summary>
            <param name="skipInitialDefaults">boolean value</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Unsubscribe">
            <summary>
            Unsubscribe from a subreddit.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UnsubscribeAsync">
            <summary>
            Unsubscribe from a subreddit asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteBanner">
            <summary>
            Remove the subreddit's custom mobile banner.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteBannerAsync">
            <summary>
            Remove the subreddit's custom mobile banner asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteHeader">
            <summary>
            Remove the subreddit's custom header image.
            The sitewide-default header image will be shown again after this call.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteHeaderAsync">
            <summary>
            Remove the subreddit's custom header image asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteIcon">
            <summary>
            Remove the subreddit's custom mobile icon.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteIconAsync">
            <summary>
            Remove the subreddit's custom mobile icon asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteImg(System.String)">
            <summary>
            Remove an image from the subreddit's custom image set.
            The image will no longer count against the subreddit's image limit. However, the actual image data may still be accessible for an unspecified amount of time. 
            If the image is currently referenced by the subreddit's stylesheet, that stylesheet will no longer validate and won't be editable until the image reference is removed.
            </summary>
            <param name="imgName">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.DeleteImgAsync(System.String)">
            <summary>
            Remove an image from the subreddit's custom image set asynchronously.
            The image will no longer count against the subreddit's image limit. However, the actual image data may still be accessible for an unspecified amount of time. 
            If the image is currently referenced by the subreddit's stylesheet, that stylesheet will no longer validate and won't be editable until the image reference is removed.
            </summary>
            <param name="imgName">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadImg(System.Byte[],System.String,System.String)">
            <summary>
            Add or replace a subreddit stylesheet image.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgName">a valid subreddit image name</param>
            <param name="imgType">one of png or jpg (default: png)</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadImgAsync(System.Byte[],System.String,System.String)">
            <summary>
            Add or replace a subreddit stylesheet image asynchronously.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgName">a valid subreddit image name</param>
            <param name="imgType">one of png or jpg (default: png)</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadHeader(System.Byte[],System.String)">
            <summary>
            Add or replace the subreddit logo image.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadHeaderAsync(System.Byte[],System.String)">
            <summary>
            Add or replace the subreddit logo image asynchronously.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadIcon(System.Byte[],System.String)">
            <summary>
            Add or replace a subreddit mobile icon image.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadIconAsync(System.Byte[],System.String)">
            <summary>
            Add or replace a subreddit mobile icon image asynchronously.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadBanner(System.Byte[],System.String)">
            <summary>
            Add or replace a subreddit mobile banner image.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UploadBannerAsync(System.Byte[],System.String)">
            <summary>
            Add or replace a subreddit mobile banner image asynchronously.
            </summary>
            <param name="imgData">file upload with maximum size of 500 KiB</param>
            <param name="imgType">one of png or jpg (default: png)</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetSettings(System.Boolean,System.String)">
            <summary>
            Get the current settings of a subreddit.
            </summary>
            <param name="created">one of (true, false)</param>
            <param name="location"></param>
            <returns>Settings for the requested subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetRules">
            <summary>
            Get the rules for the current subreddit.
            </summary>
            <returns>Subreddit rules.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetTraffic">
            <summary>
            Get the traffic for the current subreddit.
            </summary>
            <returns>Subreddit traffic.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Search(Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search this subreddit for posts.
            To search across all subreddits, use RedditAPI.Search, instead.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Search(System.String,Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search this subreddit for posts.
            To search across all subreddits, use RedditAPI.Search, instead.
            </summary>
            <param name="q">A valid search query</param>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance (optional)</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Search(System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Search this subreddit for posts.
            </summary>
            <param name="q">a string no longer than 512 characters</param>
            <param name="restrictSr">boolean value</param>
            <param name="sort">one of (relevance, hot, top, new, comments)</param>
            <param name="category">a string no longer than 5 characters</param>
            <param name="includeFacets">boolean value</param>
            <param name="type">(optional) comma-delimited list of result types (sr, link, user)</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">boolean value</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SavedMediaText(System.String)">
            <summary>
            Retrieve the advisory text about saving media for relevant media links.
            This endpoint returns a notice for display during the post submission process that is pertinent to media links.
            </summary>
            <param name="url">a valid URL</param>
            <returns>A Reddit notice message.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetLog(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Get a list of recent moderation actions.
            Moderator actions taken within a subreddit are logged. This listing is a view of that log with various filters to aid in analyzing the information.
            The optional mod parameter can be a comma-delimited list of moderator names to restrict the results to, or the string a to restrict the results to admin actions taken within the subreddit.
            The type parameter is optional and if sent limits the log entries returned to only those of the type specified.
            </summary>
            <param name="type">one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, 
            acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, 
            removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, 
            muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 500)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="mod">(optional) a moderator filter</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A listing of recent moderation actions.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.GetLog(Reddit.Inputs.Moderation.ModerationGetLogInput)">
            <summary>
            Get a list of recent moderation actions.
            Moderator actions taken within a subreddit are logged. This listing is a view of that log with various filters to aid in analyzing the information.
            The optional mod parameter can be a comma-delimited list of moderator names to restrict the results to, or the string a to restrict the results to admin actions taken within the subreddit.
            The type parameter is optional and if sent limits the log entries returned to only those of the type specified.
            </summary>
            <param name="moderationGetLogInput">A valid ModerationGetLogInput instance</param>
            <returns>A listing of recent moderation actions.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Stylesheet">
            <summary>
            Redirect to the subreddit's stylesheet if one exists.
            </summary>
            <returns>The subreddit's CSS.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.ModeratorInvite(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Invite a user to become a moderator of this subreddit.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="duration">an integer between 1 and 999, or null to specify permanent duration</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.ModeratorInviteAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Asynchronously invite a user to become a moderator of this subreddit.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="duration">an integer between 1 and 999, or null to specify permanent duration</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.ModeratorInvite(Reddit.Inputs.Users.UsersFriendInput)">
            <summary>
            Invite a user to become a moderator of this subreddit.
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.ModeratorInviteAsync(Reddit.Inputs.Users.UsersFriendInput)">
            <summary>
            Asynchronously invite a user to become a moderator of this subreddit.
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SetUserPermissions(System.String,System.String,System.String)">
            <summary>
            Set permissions.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="type">A string representing the type (e.g. "moderator_invite")</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SetUserPermissionsAsync(System.String,System.String,System.String)">
            <summary>
            Set permissions asynchronously.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="type">A string representing the type (e.g. "moderator_invite")</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SetUserPermissions(Reddit.Inputs.Users.UsersSetPermissionsInput)">
            <summary>
            Set permissions.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.SetUserPermissionsAsync(Reddit.Inputs.Users.UsersSetPermissionsInput)">
            <summary>
            Set permissions asynchronously.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Create(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, an exception is thrown.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, an exception is thrown.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Create(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, an exception is thrown.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateAsync(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, an exception is thrown.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateIfNotExists(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, retrieve that existing subreddit and return the result.
            If the subreddit already exists, the parameters passed to this method will be ignored.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created or existing subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateIfNotExistsAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, retrieve that existing subreddit and return the result.
            If the subreddit already exists, the parameters passed to this method will be ignored.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created or existing subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateIfNotExists(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, retrieve that existing subreddit and return the result.
            If the subreddit already exists, the parameters passed to this method will be ignored.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created or existing subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateIfNotExistsAsync(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, retrieve that existing subreddit and return the result.
            If the subreddit already exists, the parameters passed to this method will be ignored.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created or existing subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateOrUpdate(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, update that existing subreddit and return the result.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateOrUpdateAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, update that existing subreddit and return the result.
            </summary>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateOrUpdate(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit and return the created result.
            If a subreddit by that name already exists, update that existing subreddit and return the result.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.CreateOrUpdateAsync(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create a new subreddit asynchronously and return the created result.
            If a subreddit by that name already exists, update that existing subreddit and return the result.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Update(System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Update an existing subreddit.
            </summary>
            <param name="manualUpdate">if true, only the values explicitly passed to this method will be updated (default: false)</param>
            <param name="allOriginalContent">boolean value</param>
            <param name="allowDiscovery">boolean value</param>
            <param name="allowImages">boolean value</param>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="allowVideos">boolean value</param>
            <param name="collapseDeletedComments">boolean value</param>
            <param name="description">raw markdown text</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle">a string no longer than 500 characters</param>
            <param name="hideAds">boolean value</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="lang">a valid IETF language tag (underscore separated)</param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="name">subreddit name</param>
            <param name="originalContentTagEnabled">boolean value</param>
            <param name="over18">boolean value</param>
            <param name="publicDescription">raw markdown text</param>
            <param name="showMedia">boolean value</param>
            <param name="showMediaPreview">boolean value</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="spoilersEnabled">boolean value</param>
            <param name="sr">fullname of a thing</param>
            <param name="submitLinkLabel">a string no longer than 60 characters</param>
            <param name="submitText">raw markdown text</param>
            <param name="submitTextLabel">a string no longer than 60 characters</param>
            <param name="suggestedCommentSort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="title">a string no longer than 100 characters</param>
            <param name="type">one of (gold_restricted, archived, restricted, employees_only, gold_only, private, user, public)</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="commentScoreHideMins">an integer between 0 and 1440 (default: 0)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UpdateAsync(System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Update an existing subreddit asynchronously.
            </summary>
            <param name="manualUpdate">if true, only the values explicitly passed to this method will be updated (default: false)</param>
            <param name="allOriginalContent">boolean value</param>
            <param name="allowDiscovery">boolean value</param>
            <param name="allowImages">boolean value</param>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="allowVideos">boolean value</param>
            <param name="collapseDeletedComments">boolean value</param>
            <param name="description">raw markdown text</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle">a string no longer than 500 characters</param>
            <param name="hideAds">boolean value</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="lang">a valid IETF language tag (underscore separated)</param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="name">subreddit name</param>
            <param name="originalContentTagEnabled">boolean value</param>
            <param name="over18">boolean value</param>
            <param name="publicDescription">raw markdown text</param>
            <param name="showMedia">boolean value</param>
            <param name="showMediaPreview">boolean value</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="spoilersEnabled">boolean value</param>
            <param name="sr">fullname of a thing</param>
            <param name="submitLinkLabel">a string no longer than 60 characters</param>
            <param name="submitText">raw markdown text</param>
            <param name="submitTextLabel">a string no longer than 60 characters</param>
            <param name="suggestedCommentSort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="title">a string no longer than 100 characters</param>
            <param name="type">one of (gold_restricted, archived, restricted, employees_only, gold_only, private, user, public)</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="commentScoreHideMins">an integer between 0 and 1440 (default: 0)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.Update(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Update an existing subreddit.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
            <returns>An instance of this class populated with the newly created or updated subreddit.</returns>
        </member>
        <member name="M:Reddit.Controllers.Subreddit.UpdateAsync(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Update an existing subreddit asynchronously.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle"></param>
        </member>
        <member name="T:Reddit.Controllers.SubredditPosts">
            <summary>
            Controller class for subreddit post listings.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.BestUpdated">
            <summary>
            Event handler for monitoring best.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.HotUpdated">
            <summary>
            Event handler for monitoring hot.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.NewUpdated">
            <summary>
            Event handler for monitoring new.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.RisingUpdated">
            <summary>
            Event handler for monitoring rising.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.TopUpdated">
            <summary>
            Event handler for monitoring top.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ControversialUpdated">
            <summary>
            Event handler for monitoring controversial.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ModQueueUpdated">
            <summary>
            Event handler for monitoring modqueu.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ModQueueReportsUpdated">
            <summary>
            Event handler for monitoring modqueue reports.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ModQueueSpamUpdated">
            <summary>
            Event handler for monitoring modqueue spam.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ModQueueUnmoderatedUpdated">
            <summary>
            Event handler for monitoring modqueue unmoderated.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.SubredditPosts.ModQueueEditedUpdated">
            <summary>
            Event handler for monitoring modqueue edited.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.Best">
            <summary>
            (deprecated) List of posts using "best" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IBest">
            <summary>
            (deprecated) IList of posts using "best" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.Hot">
            <summary>
            List of posts using "hot" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IHot">
            <summary>
            IList of posts using "hot" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.New">
            <summary>
            List of posts using "new" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.INew">
            <summary>
            IList of posts using "new" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.Rising">
            <summary>
            List of posts using "rising" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IRising">
            <summary>
            IList of posts using "rising" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.Top">
            <summary>
            List of posts using "top" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ITop">
            <summary>
            IList of posts using "top" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.Controversial">
            <summary>
            List of posts using "controversial" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IControversial">
            <summary>
            IList of posts using "controversial" sort.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ModQueue">
            <summary>
            List of posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IModQueue">
            <summary>
            IList of posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ModQueueReports">
            <summary>
            List of reported posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IModQueueReports">
            <summary>
            IList of reported posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ModQueueSpam">
            <summary>
            List of spammed posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IModQueueSpam">
            <summary>
            IList of spammed posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ModQueueUnmoderated">
            <summary>
            List of unmoderated posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IModQueueUnmoderated">
            <summary>
            IList of unmoderated posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.ModQueueEdited">
            <summary>
            List of edited posts in the mod queue.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.SubredditPosts.IModQueueEdited">
            <summary>
            IList of edited posts in the mod queue.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.#ctor(Reddit.Controllers.Dispatch,System.String,System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post},System.Collections.Generic.List{Reddit.Controllers.Post})">
            <summary>
            Create a new instance of the subreddit posts controller.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">The name of the subreddit</param>
            <param name="best"></param>
            <param name="hot"></param>
            <param name="newPosts"></param>
            <param name="rising"></param>
            <param name="top"></param>
            <param name="controversial"></param>
            <param name="modQueue"></param>
            <param name="modQueueReports"></param>
            <param name="modQueueSpam"></param>
            <param name="modQueueUnmoderated"></param>
            <param name="modQueueEdited"></param>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetBest(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "best" sort.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetBest(Reddit.Inputs.CategorizedSrListingInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "best" sort.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetHot(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "hot" sort.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetHot(Reddit.Inputs.Listings.ListingsHotInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "hot" sort.
            </summary>
            <param name="listingsHotInput">A valid ListingsHotInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetNew(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "new" sort.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetNew(Reddit.Inputs.CategorizedSrListingInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "new" sort.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetRising(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "rising" sort.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetRising(Reddit.Inputs.CategorizedSrListingInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "rising" sort.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetTop(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "top" sort.
            </summary>
            <param name="t">one of(hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetTop(Reddit.Inputs.TimedCatSrListingInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "top" sort.
            </summary>
            <param name="timedCatSrListingInput">A valid TimedCatSrListingInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetControversial(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts using "controversial" sort.
            </summary>
            <param name="t">one of(hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetControversial(Reddit.Inputs.TimedCatSrListingInput,System.Boolean)">
            <summary>
            Retrieve a list of posts using "controversial" sort.
            </summary>
            <param name="timedCatSrListingInput">A valid TimedCatSrListingInput instance</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetModQueue(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of posts in the mod queue.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetModQueueReports(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of reported posts in the mod queue.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetModQueueSpam(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of spammed posts in the mod queue.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetModQueueUnmoderated(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of unmoderated posts in the mod queue.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.GetModQueueEdited(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Retrieve a list of edited posts in the mod queue.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">The maximum number of results to be retrieved (default: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="isInterface">(optional) whether to store the result cache in the interface</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorBest(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor Reddit for new "Best" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorHot(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit for new "Hot" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorNew(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit for new posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorRising(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit for new "Rising" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorTop(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit for new "Top" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorControversial(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit for new "Controversial" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorModQueue(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit's modqueue for new "modqueue" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorModQueueReports(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit's modqueue for new "reports" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorModQueueSpam(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit's modqueue for new "spam" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorModQueueUnmoderated(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit's modqueue for new "unmoderated" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.MonitorModQueueEdited(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the subreddit's modqueue for new "edited" posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.BestPostsIsMonitored">
            <summary>
            Whether best is being monitored.
            </summary>
            <returns>Whether best is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.HotPostsIsMonitored">
            <summary>
            Whether hot is being monitored.
            </summary>
            <returns>Whether hot is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.NewPostsIsMonitored">
            <summary>
            Whether new is being monitored.
            </summary>
            <returns>Whether new is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.RisingPostsIsMonitored">
            <summary>
            Whether rising is being monitored.
            </summary>
            <returns>Whether rising is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.TopPostsIsMonitored">
            <summary>
            Whether top is being monitored.
            </summary>
            <returns>Whether top is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ControversialPostsIsMonitored">
            <summary>
            Whether controversial is being monitored.
            </summary>
            <returns>Whether controversial is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ModQueuePostsIsMonitored">
            <summary>
            Whether modqueue is being monitored.
            </summary>
            <returns>Whether modqueue is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ModQueueReportsPostsIsMonitored">
            <summary>
            Whether modqueue reports is being monitored.
            </summary>
            <returns>Whether modqueue reports is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ModQueueSpamPostsIsMonitored">
            <summary>
            Whether modqueue spam is being monitored.
            </summary>
            <returns>Whether modqueue spam is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ModQueueUnmoderatedPostsIsMonitored">
            <summary>
            Whether modqueue unmoderated is being monitored.
            </summary>
            <returns>Whether modqueue unmoderated is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.ModQueueEditedPostsIsMonitored">
            <summary>
            Whether modqueue edited is being monitored.
            </summary>
            <returns>Whether modqueue edited is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.SubredditPosts.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.User">
            <summary>
            Controller class for users.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.User.PostHistoryUpdated">
            <summary>
            Event handler for monitoring post history.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.User.CommentHistoryUpdated">
            <summary>
            Event handler for monitoring comment history.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IsFriend">
            <summary>
            Whether this user is friends with the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.ProfanityFilter">
            <summary>
            Whether this user's profanity filter is enabled.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IsSuspended">
            <summary>
            Whether this user account has been suspended.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasGoldSubscription">
            <summary>
            Whether this user has a Reddit Gold subscription.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.NumFriends">
            <summary>
            How many friends this user has.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IsVerified">
            <summary>
            Whether this user account has been verified.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasNewModmail">
            <summary>
            Whether this user has the new modmail.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Id">
            <summary>
            The ID36 of this user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Fullname">
            <summary>
            The fullname of this user.
            This value is generated from the Id property.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Over18">
            <summary>
            Whether this user is over 18 years of age.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IsGold">
            <summary>
            Whether this user is gold.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IsMod">
            <summary>
            Whether this user is a mod.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasVerifiedEmail">
            <summary>
            Whether this user has a verified email address.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.IconImg">
            <summary>
            This user's icon image URL.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasModmail">
            <summary>
            Whether this user has modmail.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.LinkKarma">
            <summary>
            This user's total post karma.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.InboxCount">
            <summary>
            The number of messages in this user's inbox.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasMail">
            <summary>
            Whether this user has mail.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Name">
            <summary>
            This user's username.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Created">
            <summary>
            When this user was created.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.CommentKarma">
            <summary>
            This user's total comment karma.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.HasSubscribed">
            <summary>
            Whether this user has subscribed.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.Overview">
            <summary>
            This user's Overview (posts and comments).
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.PostHistory">
            <summary>
            This user's post history.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.CommentHistory">
            <summary>
            This user's comment history.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.ModeratedSubreddits">
            <summary>
            A list of subreddits moderated by this user.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.User.UserData">
            <summary>
            Full user data from the API.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.User.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.User)">
            <summary>
            Create a new user controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="user"></param>
        </member>
        <member name="M:Reddit.Controllers.User.#ctor(Reddit.Controllers.Dispatch,Reddit.Controllers.User)">
            <summary>
            Copy another user controller instance onto this one.
            </summary>
            <param name="dispatch"></param>
            <param name="user"></param>
        </member>
        <member name="M:Reddit.Controllers.User.#ctor(Reddit.Controllers.Dispatch,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Create a new user controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="name">A valid Reddit username</param>
            <param name="id"></param>
            <param name="isFriend"></param>
            <param name="profanityFilter"></param>
            <param name="isSuspended"></param>
            <param name="hasGoldSubscription"></param>
            <param name="numFriends"></param>
            <param name="IsVerified"></param>
            <param name="hasNewModmail"></param>
            <param name="over18"></param>
            <param name="isGold"></param>
            <param name="isMod"></param>
            <param name="hasVerifiedEmail"></param>
            <param name="iconImg"></param>
            <param name="hasModmail"></param>
            <param name="linkKarma"></param>
            <param name="inboxCount"></param>
            <param name="hasMail"></param>
            <param name="created"></param>
            <param name="commentKarma"></param>
            <param name="hasSubscribed"></param>
        </member>
        <member name="M:Reddit.Controllers.User.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty user controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.User.CheckFullname">
            <summary>
            For use in methods whose endpoints require a fullname.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.User.AddRelationship(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="banContext">fullname of a thing</param>
            <param name="banMessage">raw markdown text</param>
            <param name="banReason">a string no longer than 100 characters</param>
            <param name="container"></param>
            <param name="duration">an integer between 1 and 999, or null to specify permanent duration</param>
            <param name="permissions"></param>
            <param name="type">one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.AddRelationshipAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Asynchronously create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="banContext">fullname of a thing</param>
            <param name="banMessage">raw markdown text</param>
            <param name="banReason">a string no longer than 100 characters</param>
            <param name="container"></param>
            <param name="duration">an integer between 1 and 999, or null to specify permanent duration</param>
            <param name="permissions"></param>
            <param name="type">one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.AddRelationship(Reddit.Inputs.Users.UsersFriendInput,System.String)">
            <summary>
            Create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.AddRelationshipAsync(Reddit.Inputs.Users.UsersFriendInput,System.String)">
            <summary>
            Asynchronously create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveRelationship(System.String,System.String,System.String)">
            <summary>
            Remove a relationship between a user and another user or subreddit.
            If type is friend or enemy, 'container' MUST be the current user's fullname; for other types, the subreddit must be set via URL (e.g., /r/funny/api/unfriend).
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="type">one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="container"></param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveRelationshipAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously remove a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="type">one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="container"></param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveRelationship(Reddit.Inputs.Users.UsersUnfriendInput,System.String)">
            <summary>
            Remove a relationship between a user and another user or subreddit.
            If type is friend or enemy, 'container' MUST be the current user's fullname; for other types, the subreddit must be set via URL (e.g., /r/funny/api/unfriend).
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="usersUnfriendInput">A valid UsersUnfriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveRelationshipAsync(Reddit.Inputs.Users.UsersUnfriendInput,System.String)">
            <summary>
            Asynchronously remove a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="usersUnfriendInput">A valid UsersUnfriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.Report(System.String,System.String)">
            <summary>
            Report a user. Reporting a user brings it to the attention of a Reddit admin.
            </summary>
            <param name="details">JSON data</param>
            <param name="reason">a string no longer than 100 characters</param>
        </member>
        <member name="M:Reddit.Controllers.User.ReportAsync(System.String,System.String)">
            <summary>
            Report a user asynchronously. Reporting a user brings it to the attention of a Reddit admin.
            </summary>
            <param name="details">JSON data</param>
            <param name="reason">a string no longer than 100 characters</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetPermissions(System.String,System.String,System.String)">
            <summary>
            Set permissions.
            </summary>
            <param name="subreddit">the name of an existing subreddit</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="type">A string representing the type (e.g. "moderator_invite")</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetPermissionsAsync(System.String,System.String,System.String)">
            <summary>
            Set permissions asynchronously.
            </summary>
            <param name="subreddit">the name of an existing subreddit</param>
            <param name="permissions">A string representing the permissions being set (e.g. "+wiki")</param>
            <param name="type">A string representing the type (e.g. "moderator_invite")</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetPermissions(Reddit.Inputs.Users.UsersSetPermissionsInput,System.String)">
            <summary>
            Set permissions.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
            <param name="subreddit">the name of an existing subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetPermissionsAsync(Reddit.Inputs.Users.UsersSetPermissionsInput,System.String)">
            <summary>
            Set permissions asynchronously.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
            <param name="subreddit">the name of an existing subreddit</param>
        </member>
        <member name="M:Reddit.Controllers.User.UsernameAvailable">
            <summary>
            Check whether this instance's username is available for registration.
            </summary>
            <returns>Boolean or null if error (i.e. invalid username).</returns>
        </member>
        <member name="M:Reddit.Controllers.User.Trophies">
            <summary>
            Return a list of trophies for the given user.
            </summary>
            <returns>A list of trophies.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.About">
            <summary>
            Return information about the user, including karma and gold status.
            </summary>
            <returns>A user listing.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetPostHistory(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve the user's post history.
            </summary>
            <param name="where">One of (overview, submitted, upvotes, downvoted, hidden, saved, gilded)</param>
            <param name="context">an integer between 2 and 10</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="sort">one of (hot, new, newForced, top, controversial)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetPostHistory(Reddit.Inputs.Users.UsersHistoryInput,System.String)">
            <summary>
            Retrieve the user's post history.
            </summary>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <param name="where">One of (overview, submitted, upvotes, downvoted, hidden, saved, gilded)</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetOverview(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve the user's overview.
            </summary>
            <param name="context">an integer between 2 and 10</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="sort">one of (hot, new, newForced, top, controversial)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetOverview(Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Retrieve the user's overview.
            </summary>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of comments and/or posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.SanitizePosts(System.Collections.Generic.List{Reddit.Controllers.Post})">
            <summary>
            Strip out any comments from a list of posts.
            </summary>
            <param name="posts">A list of posts.</param>
            <returns>A list of posts.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetCommentHistory(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve the user's comment history.
            </summary>
            <param name="context">an integer between 2 and 10</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="sort">one of (hot, new, top, controversial)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetCommentHistory(Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Retrieve the user's comment history.
            </summary>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of comments.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetModeratedSubreddits(System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve a list of subreddits that the user moderates.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of moderated subreddits.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.GetModeratedSubreddits(Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Retrieve a list of subreddits that the user moderates.
            </summary>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of moderated subreddits.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.DeleteFlair(System.String)">
            <summary>
            Delete flair.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
        </member>
        <member name="M:Reddit.Controllers.User.DeleteFlairAsync(System.String)">
            <summary>
            Delete flair asynchronously.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
        </member>
        <member name="M:Reddit.Controllers.User.CreateFlair(System.String,System.String,System.String)">
            <summary>
            Create a new user flair.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <param name="text">The flair text</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.User.CreateFlairAsync(System.String,System.String,System.String)">
            <summary>
            Create a new user flair asynchronously.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <param name="text">The flair text</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="M:Reddit.Controllers.User.CreateFlair(Reddit.Inputs.Flair.FlairCreateInput,System.String)">
            <summary>
            Create a new user flair.
            </summary>
            <param name="flairCreateInput">A valid FlairCreateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
        </member>
        <member name="M:Reddit.Controllers.User.CreateFlairAsync(Reddit.Inputs.Flair.FlairCreateInput,System.String)">
            <summary>
            Create a new user flair asynchronously.
            </summary>
            <param name="flairCreateInput">A valid FlairCreateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
        </member>
        <member name="M:Reddit.Controllers.User.FlairList(System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            List of flairs.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 1000)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>Flair list results.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.FlairList(Reddit.Inputs.Flair.FlairNameListingInput,System.String)">
            <summary>
            List of flairs.
            </summary>
            <param name="flairNameListingInput">A valid FlairNameListingInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Flair list results.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.FlairSelector(System.String)">
            <summary>
            Return information about a users's flair options.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Flair results.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.InviteToLiveThread(System.String,System.String,System.String)">
            <summary>
            Invite another user to contribute to a live thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="thread">id</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.User.InviteToLiveThreadAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously invite another user to contribute to a live thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="thread">id</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.User.InviteToLiveThread(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput,System.String)">
            <summary>
            Invite another user to contribute to a live thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.InviteToLiveThreadAsync(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput,System.String)">
            <summary>
            Asynchronously invite another user to contribute to a live thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveFromLiveThread(System.String)">
            <summary>
            Revoke another user's contributorship.
            Requires the manage permission for this thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.RemoveFromLiveThreadAsync(System.String)">
            <summary>
            Revoke another user's contributorship asynchronously.
            Requires the manage permission for this thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.RevokeLiveThreadInvitation(System.String)">
            <summary>
            Revoke an outstanding contributor invite.
            Requires the manage permission for this thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.RevokeLiveThreadInvitationAsync(System.String)">
            <summary>
            Revoke an outstanding contributor invite asynchronously.
            Requires the manage permission for this thread.
            </summary>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetLiveThreadPermissions(System.String,System.String,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="thread">id</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetLiveThreadPermissionsAsync(System.String,System.String,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions asynchronously.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="thread">id</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetLiveThreadPermissions(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.SetLiveThreadPermissionsAsync(Reddit.Inputs.LiveThreads.LiveThreadsContributorInput,System.String)">
            <summary>
            Change a contributor or contributor invite's permissions asynchronously.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            </summary>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <param name="thread">id</param>
        </member>
        <member name="M:Reddit.Controllers.User.UpdateLiveThread(System.String,System.String)">
            <summary>
            Post an update to a live thread.
            Requires the update permission for this thread.
            </summary>
            <param name="id">The ID of the live thread</param>
            <param name="body">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.User.UpdateLiveThreadAsync(System.String,System.String)">
            <summary>
            Post an update to a live thread asynchronously.
            Requires the update permission for this thread.
            </summary>
            <param name="id">The ID of the live thread</param>
            <param name="body">raw markdown text</param>
        </member>
        <member name="M:Reddit.Controllers.User.AcceptLiveThreadInvite(System.String)">
            <summary>
            Accept a pending invitation to contribute to the thread.
            </summary>
            <param name="id">The ID of the live thread</param>
        </member>
        <member name="M:Reddit.Controllers.User.AcceptLiveThreadInviteAsync(System.String)">
            <summary>
            Asynchronously accept a pending invitation to contribute to the thread.
            </summary>
            <param name="id">The ID of the live thread</param>
        </member>
        <member name="M:Reddit.Controllers.User.Multis(System.Boolean)">
            <summary>
            Fetch a list of public multis belonging to this user.
            </summary>
            <param name="expandSrs">boolean value</param>
            <returns>A list of multis.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.AllowWikiEdit(System.String,System.String)">
            <summary>
            Allow this user to edit the specified wiki page on the specified subreddit.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Controllers.User.AllowWikiEditAsync(System.String,System.String)">
            <summary>
            Asynchronously allow this user to edit the specified wiki page on the specified subreddit.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Controllers.User.DenyWikiEdit(System.String,System.String)">
            <summary>
            Deny this user from editing the specified wiki page on the specified subreddit.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Controllers.User.DenyWikiEditAsync(System.String,System.String)">
            <summary>
            Asynchronously deny this user from editing the specified wiki page on the specified subreddit.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Controllers.User.Block">
            <summary>
            Block this user.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.User.BlockAsync">
            <summary>
            Block this user asynchronously.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.User.MonitorPostHistory(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the user for new posts.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.MonitorCommentHistory(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor the user for new comments.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>True if this action turned monitoring on, false if this action turned it off.</returns>
        </member>
        <member name="M:Reddit.Controllers.User.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.Wiki">
            <summary>
            Controller class for a subreddit's wiki.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.Wiki.PagesUpdated">
            <summary>
            Event handler for monitoring the list of wiki pages.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.Wiki.Pages">
            <summary>
            List of pages on this wiki.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.Wiki.#ctor(Reddit.Controllers.Dispatch,System.String)">
            <summary>
            Create a new instance of the wiki controller.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit">The name of the subreddit to which this wiki belongs</param>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetPage(System.String,System.String,System.String)">
            <summary>
            Return the content of an existing wiki page.
            If v is given, show the wiki page as it was at that version. If both v and v2 are given, show a diff of the two.
            </summary>
            <param name="pageName">the name of an existing wiki page</param>
            <param name="v">a wiki revision ID</param>
            <param name="v2">a wiki revision ID</param>
            <returns>A new instance of the WikiPage controller populated with the return data.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.Page(System.String,System.Boolean,System.DateTime,System.String,Reddit.Controllers.User,System.String)">
            <summary>
            Return a new instance of the WikiPage controller.
            </summary>
            <param name="pageName">the name of an existing wiki page</param>
            <param name="mayRevise">boolean value</param>
            <param name="revisionDate">Date of current revision</param>
            <param name="contentHtml">Page content as HTML</param>
            <param name="revisionBy">Author of current revision</param>
            <param name="contentMd">Page content as Markdown</param>
            <returns>A new instance of the WikiPage controller.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.Page(System.String,Reddit.Things.WikiPage)">
            <summary>
            Return a new instance of the WikiPage controller.
            </summary>
            <param name="pageName">the name of an existing wiki page</param>
            <param name="wikiPage">A valid instance of Things.WikiPage</param>
            <returns>A new instance of the WikiPage controller.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.Page(System.String)">
            <summary>
            Return a new instance of the WikiPage controller.
            </summary>
            <param name="pageName">the name of an existing wiki page</param>
            <returns>A new instance of the WikiPage controller.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetContributors(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the approved submitters of this subreddit's wiki.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of subreddit contributors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetContributors(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get the approved submitters of this subreddit's wiki.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of subreddit contributors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetBannedUsers(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a list of users who were banned from this subreddit's wiki.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="user">A valid, existing reddit username</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <returns>A list of banned users.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetBannedUsers(Reddit.Inputs.Subreddits.SubredditsAboutInput)">
            <summary>
            Get the approved submitters of this subreddit's wiki.
            </summary>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <returns>A list of subreddit contributors.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetPages">
            <summary>
            Retrieve a list of wiki pages in this subreddit.
            </summary>
            <returns>>A list of wiki pages.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetRecentPageRevisions(System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve a list of recently changed wiki pages in this subreddit.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of wiki pages.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.GetRecentPageRevisions(Reddit.Inputs.SrListingInput)">
            <summary>
            Retrieve a list of recently changed wiki pages in this subreddit.
            </summary>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <returns>A list of wiki pages.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.MonitorPages(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Monitor this wiki for added/removed pages.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <param name="useCache">Whether to cache the IDs of the monitoring results to prevent duplicate fires (default: true)</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.WikiPagesIsMonitored">
            <summary>
            Whether the wiki pages list is being monitored.
            </summary>
            <returns>Whether the wiki pages list is being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.Wiki.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="T:Reddit.Controllers.WikiPage">
            <summary>
            Controller class for wiki pages.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.MayRevise">
            <summary>
            Whether the authenticated user can edit this page.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.RevisionDate">
            <summary>
            The current revision date.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.ContentHTML">
            <summary>
            The page content rendered as HTML.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.RevisionBy">
            <summary>
            The user who authored the current revision.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.ContentMd">
            <summary>
            The page content.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.Name">
            <summary>
            The page name.
            </summary>
        </member>
        <member name="P:Reddit.Controllers.WikiPage.Subreddit">
            <summary>
            The name of the subreddit this wiki belongs to.
            </summary>
        </member>
        <member name="E:Reddit.Controllers.WikiPage.PageUpdated">
            <summary>
            Event handler for monitoring update to this wiki page.
            </summary>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.#ctor(Reddit.Controllers.Dispatch,System.Boolean,System.DateTime,System.String,Reddit.Controllers.User,System.String,System.String,System.String)">
            <summary>
            Create a new wiki page controller instance, populated manually.
            </summary>
            <param name="dispatch"></param>
            <param name="mayRevise"></param>
            <param name="revisionDate"></param>
            <param name="contentHtml"></param>
            <param name="revisionBy"></param>
            <param name="contentMd"></param>
            <param name="subreddit"></param>
            <param name="name"></param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.#ctor(Reddit.Controllers.Dispatch,Reddit.Things.WikiPage,System.String,System.String)">
            <summary>
            Create a new wiki page controller instance from API return data.
            </summary>
            <param name="dispatch"></param>
            <param name="wikiPage"></param>
            <param name="subreddit"></param>
            <param name="name"></param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.#ctor(Reddit.Controllers.Dispatch,System.String,System.String)">
            <summary>
            Create a new wiki page controller instance, populated only with subreddit and name.
            </summary>
            <param name="dispatch"></param>
            <param name="subreddit"></param>
            <param name="name"></param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.#ctor(Reddit.Controllers.Dispatch)">
            <summary>
            Create an empty wiki page controller instance.
            </summary>
            <param name="dispatch"></param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.AllowEditor(System.String)">
            <summary>
            Allow username to edit this wiki page.
            </summary>
            <param name="username">the name of an existing user</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.AllowEditorAsync(System.String)">
            <summary>
            Asynchronously allow username to edit this wiki page.
            </summary>
            <param name="username">the name of an existing user</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.DenyEditor(System.String)">
            <summary>
            Deny username to edit this wiki page.
            </summary>
            <param name="username">the name of an existing user</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.DenyEditorAsync(System.String)">
            <summary>
            Asynchronously deny username to edit this wiki page.
            </summary>
            <param name="username">the name of an existing user</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.EditAndReturn(System.String,System.String,System.String)">
            <summary>
            Edit a wiki page and return an instance with the updated data.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
            <param name="previous">the starting point revision for this edit</param>
            <returns>The updated WikiPage.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.EditAndReturn(Reddit.Inputs.Wiki.WikiEditPageInput)">
            <summary>
            Edit a wiki page and return an instance with the updated data.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
            <returns>The updated WikiPage.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Edit(System.String,System.String,System.String)">
            <summary>
            Edit this wiki page.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
            <param name="previous">the starting point revision for this edit</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.EditAsync(System.String,System.String,System.String)">
            <summary>
            Edit this wiki page asynchronously.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
            <param name="previous">the starting point revision for this edit</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Edit(Reddit.Inputs.Wiki.WikiEditPageInput)">
            <summary>
            Edit this wiki page.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.EditAsync(Reddit.Inputs.Wiki.WikiEditPageInput)">
            <summary>
            Edit this wiki page asynchronously.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.SaveChanges(System.String,System.String)">
            <summary>
            Edit this wiki page with the current values of this instance.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="previous">the starting point revision for this edit</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.SaveChangesAsync(System.String,System.String)">
            <summary>
            Edit this wiki page with the current values of this instance asynchronously.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="previous">the starting point revision for this edit</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.CreateAndReturn(System.String,System.String)">
            <summary>
            Create a new wiki page and return an instance with the updated data.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Create(System.String,System.String)">
            <summary>
            Create a new wiki page.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.CreateAsync(System.String,System.String)">
            <summary>
            Create a new wiki page asynchronously.
            </summary>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="content">The page content</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Hide(System.String)">
            <summary>
            Toggle the public visibility of a wiki page revision.
            </summary>
            <param name="revision">a wiki revision ID</param>
            <returns>A boolean indicating true if page was hidden, false if page was unhidden.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.HideAsync(System.String)">
            <summary>
            Toggle the public visibility of a wiki page revision asynchronously.
            </summary>
            <param name="revision">a wiki revision ID</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Revert(System.String)">
            <summary>
            Revert a wiki page to revision.
            </summary>
            <param name="revision">a wiki revision ID</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.RevertAndReturn(System.String)">
            <summary>
            Revert a wiki page to revision and return an instance with the updated data.
            </summary>
            <param name="revision">a wiki revision ID</param>
            <returns>The updated WikiPage.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.RevertAsync(System.String)">
            <summary>
            Revert a wiki page to revision asynchronously.
            </summary>
            <param name="revision">a wiki revision ID</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Revisions(System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieve a list of revisions of this wiki page.
            </summary>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of revisions.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.Revisions(Reddit.Inputs.SrListingInput)">
            <summary>
            Retrieve a list of revisions of this wiki page.
            </summary>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <returns>A list of revisions.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.GetPermissions">
            <summary>
            Retrieve the current permission settings for page.
            </summary>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissions(System.Boolean,System.Int32)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="listed">boolean value (true = appear in /wiki/pages, false = don't appear in /wiki/pages)</param>
            <param name="permLevel">an integer (0 = use wiki perms, 1 = only approved users may edit, 2 = only mods may edit or view)</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissionsAsync(System.Boolean,System.Int32)">
            <summary>
            Update the permissions and visibility of wiki page asynchronously.
            </summary>
            <param name="listed">boolean value (true = appear in /wiki/pages, false = don't appear in /wiki/pages)</param>
            <param name="permLevel">an integer (0 = use wiki perms, 1 = only approved users may edit, 2 = only mods may edit or view)</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissions(Reddit.Inputs.Wiki.WikiUpdatePermissionsInput)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="wikiUpdatePermissionsInput">A valid WikiUpdatePermissionsInput instance</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissionsAsync(Reddit.Inputs.Wiki.WikiUpdatePermissionsInput)">
            <summary>
            Update the permissions and visibility of wiki page asynchronously.
            </summary>
            <param name="wikiUpdatePermissionsInput">A valid WikiUpdatePermissionsInput instance</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissions(Reddit.Things.WikiPageSettings)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="wikiPageSettings">A valid instance of WikiPageSettings</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.UpdatePermissionsAsync(Reddit.Things.WikiPageSettings)">
            <summary>
            Update the permissions and visibility of wiki page asynchronously.
            </summary>
            <param name="wikiPageSettings">A valid instance of WikiPageSettings</param>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.About(System.String,System.String)">
            <summary>
            Return the content of a wiki page.
            If v is given, show the wiki page as it was at that version If both v and v2 are given, show a diff of the two.
            </summary>
            <param name="v">a wiki revision ID</param>
            <param name="v2">a wiki revision ID</param>
            <returns>An instance of this class populated with the retrieved data.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.MonitorPage(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Reddit.Controllers.Structures.MonitoringSchedule},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Monitor this wiki page for any changes.
            </summary>
            <param name="monitoringDelayMs">The number of milliseconds between each monitoring query; leave null to auto-manage</param>
            <param name="monitoringBaseDelayMs">The number of milliseconds between each monitoring query PER THREAD (default: 1500)</param>
            <param name="schedule">A list of one or more timeframes during which monitoring of this object will occur (default: 24/7)</param>
            <param name="breakOnFailure">If true, an exception will be thrown when a monitoring query fails; leave null to keep current setting (default: false)</param>
            <param name="monitoringExpiration">If set, monitoring will automatically stop after the specified DateTime is reached</param>
            <returns>Whether monitoring was successfully initiated.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.WikiPagesIsMonitored">
            <summary>
            Whether updates to this wiki page are being monitored.
            </summary>
            <returns>Whether updates to this wiki page are being monitored.</returns>
        </member>
        <member name="M:Reddit.Controllers.WikiPage.CreateMonitoringThread(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new monitoring thread.
            </summary>
            <param name="key">Monitoring key</param>
            <param name="subKey">Monitoring subKey</param>
            <param name="startDelayMs">How long to wait before starting the thread in milliseconds (default: 0)</param>
            <param name="monitoringDelayMs">How long to wait between monitoring queries; pass null to leave it auto-managed (default: null)</param>
            <returns>The newly-created monitoring thread.</returns>
        </member>
        <member name="P:Reddit.Inputs.APITypeInput.api_type">
            <summary>
            Required by the API for certain endpoints.
            </summary>
        </member>
        <member name="M:Reddit.Inputs.APITypeInput.#ctor">
            <summary>
            Set the api_type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Reddit.Inputs.BaseInput.raw_json" -->
        <member name="M:Reddit.Inputs.BaseInput.#ctor">
            <summary>
            Set the raw_json.
            </summary>
        </member>
        <member name="F:Reddit.Inputs.CategorizedSrListingInput.include_categories">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.CategorizedSrListingInput.#ctor(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Input data for a categorized SR listing.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Reddit.Inputs.Emoji.EmojiAddInput.name" -->
        <member name="P:Reddit.Inputs.Emoji.EmojiAddInput.s3_key">
            <summary>
            S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Reddit.Inputs.Emoji.EmojiAddInput.#ctor(System.String,System.String)" -->
        <member name="P:Reddit.Inputs.Flair.FlairConfigInput.flair_position">
            <summary>
            one of (left, right)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairConfigInput.flair_self_assign_enabled">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairConfigInput.link_flair_position">
            <summary>
            one of (left, right)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairConfigInput.link_flair_self_assign_enabled">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairConfigInput.#ctor(System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Flair config inputs.
            </summary>
            <param name="flairEnabled">boolean value</param>
            <param name="flairSelfAssignEnabled">boolean value</param>
            <param name="flairPosition">one of (left, right)</param>
            <param name="linkFlairSelfAssignEnabled">boolean value</param>
            <param name="linkFlairPosition">one of (left, right)</param>
            <param name="subreddit">The subreddit with the flairs</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairCreateInput.css_class">
            <summary>
            a valid subreddit image name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairCreateInput.text">
            <summary>
            a string no longer than 64 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairCreateInput.api_type">
            <summary>
            Required by the API.
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairCreateInput.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new flair.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="link">a fullname of a link</param>
            <param name="name">a user by name</param>
            <param name="cssClass">a valid subreddit image name</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairEnabledInput.flair_enabled">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairEnabledInput.#ctor(System.Boolean)">
            <summary>
            Set flair enabled.
            </summary>
            <param name="flairEnabled">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairLinkInput.link">
            <summary>
            a fullname of a link
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairLinkInput.#ctor(System.String,System.String)">
            <summary>
            Specify a link and name.
            </summary>
            <param name="link">a fullname of a link</param>
            <param name="name">a user by name</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairNameInput.name">
            <summary>
            a user by name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairNameListingInput.name">
            <summary>
            a user by name
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairNameListingInput.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            List of flairs.
            </summary>
            <param name="name">a user by name</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 1000)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.background_color">
            <summary>
            a 6-digit rgb hex color, e.g. #AABBCC
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.flair_template_id">
            <summary>
            a valid flair template ID
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.link">
            <summary>
            a fullname of a link
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.name">
            <summary>
            a user by name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.return_rtson">
            <summary>
            [all|only|none]: "all" saves attributes and returns rtjson, "only" only returns rtjson, and "none" only saves attributes
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.text">
            <summary>
            a string no longer than 64 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairSelectFlairInput.text_color">
            <summary>
            one of (light, dark)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairSelectFlairInput.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets a link flair.
            </summary>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="flairTemplateId">a valid flair template ID</param>
            <param name="link">a fullname of a link</param>
            <param name="name">a user by name</param>
            <param name="returnRtson">[all|only|none]: "all" saves attributes and returns rtjson, "only" only returns rtjson, and "none" only saves attributes</param>
            <param name="text">a string no longer than 64 characters</param>
            <param name="textColor">one of (light, dark)</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateIdInput.flair_template_id">
            <summary>
            a valid flair template ID
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateInput.css_class">
            <summary>
            a valid subreddit image name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateInput.text">
            <summary>
            a string no longer than 64 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateInput.flair_template_id">
            <summary>
            the ID of the template to modify
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateInput.flair_type">
            <summary>
            one of (USER_FLAIR, LINK_FLAIR)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateInput.text_editable">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairTemplateInput.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Create or update a flair template.  Null values are ignored.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="flairType">one of (USER_FLAIR, LINK_FLAIR)</param>
            <param name="textEditable">boolean value</param>
            <param name="cssClass">a valid subreddit image name</param>
            <param name="flairTemplateId">the ID of the template to modify; leave blank to create new</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateV2Input.background_color">
            <summary>
            a 6-digit rgb hex color, e.g. #AABBCC
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateV2Input.flair_template_id">
            <summary>
            the ID of the template to modify
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateV2Input.flair_type">
            <summary>
            one of (USER_FLAIR, LINK_FLAIR)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateV2Input.mod_only">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTemplateV2Input.text_color">
            <summary>
            one of (light, dark)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Flair.FlairTemplateV2Input.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create or update a flair template.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="text">a string no longer than 64 characters</param>
            <param name="flairType">one of (USER_FLAIR, LINK_FLAIR)</param>
            <param name="textEditable">boolean value</param>
            <param name="textColor">one of (light, dark)</param>
            <param name="backgroundColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="flairTemplateId">the ID of the template to modify; leave blank to create new</param>
            <param name="modOnly">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTextEditableInput.text_editable">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Flair.FlairTextInput.text">
            <summary>
            a string no longer than 64 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.ImageUploadInput.filepath">
            <summary>
            name and extension of the image file e.g. image1.png
            </summary>
        </member>
        <member name="P:Reddit.Inputs.ImageUploadInput.mimetype">
            <summary>
            mime type of the image e.g. image/png
            </summary>
        </member>
        <member name="M:Reddit.Inputs.ImageUploadInput.#ctor(System.String,System.String)">
            <summary>
            Data for image to be uploaded.
            </summary>
            <param name="filePath">name and extension of the image file e.g. image1.png</param>
            <param name="mimeType">mime type of the image e.g. image/png</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsIdInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsIdInput.#ctor(System.String)">
            <summary>
            Set the id.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.children">
            <summary>
            a comma-delimited list of comment ID36s
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.limit_children">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.link_id">
            <summary>
            fullname of a link
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.sort">
            <summary>
            one of (confidence, top, new, controversial, old, random, qa, live)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.id">
            <summary>
            (optional) id of the associated MoreChildren object
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput.#ctor(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="children">a comma-delimited list of comment ID36s</param>
            <param name="limitChildren">boolean value</param>
            <param name="linkId">fullname of a link</param>
            <param name="sort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="id">(optional) id of the associated MoreChildren object</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.additional_info">
            <summary>
            a string no longer than 2000 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.ban_evading_accounts_names">
            <summary>
            a string no longer than 1000 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.custom_text">
            <summary>
            a string no longer than 250 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.from_help_center">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.other_reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.rule_reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.site_reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.sr_name">
            <summary>
            a string no longer than 1000 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.thing_id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.violator_username">
            <summary>
            A valid Reddit username
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Report a link, comment or message.
            Reporting a thing brings it to the attention of the subreddit's moderators.
            Reporting a message sends it to a system for admin review.
            For links and comments, the thing is implicitly hidden as well (see /api/hide for details).
            </summary>
            <param name="additionalInfo">a string no longer than 2000 characters</param>
            <param name="banEvadingAccountsNames">a string no longer than 1000 characters</param>
            <param name="customText">a string no longer than 250 characters</param>
            <param name="fromHelpCenter">boolean value</param>
            <param name="otherReason">a string no longer than 100 characters</param>
            <param name="reason">a string no longer than 100 characters</param>
            <param name="ruleReason">a string no longer than 100 characters</param>
            <param name="siteReason">a string no longer than 100 characters</param>
            <param name="srName">a string no longer than 1000 characters</param>
            <param name="thingId">fullname of a thing</param>
            <param name="violatorUsername">A valid Reddit username</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSaveInput.category">
            <summary>
            a category name
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsSaveInput.#ctor(System.String,System.String)">
            <summary>
            Save a link or comment.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="category">a category name</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput.state">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput.#ctor(System.String,System.Boolean)">
            <summary>
            Set the id and state.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="state">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput.id">
            <summary>
            fullname of a link
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput.num">
            <summary>
            an integer between 1 and 4
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput.state">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput.to_profile">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set or unset a Link as the sticky in its subreddit.
            state is a boolean that indicates whether to sticky or unsticky this post - true to sticky, false to unsticky.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="id">fullname of a link</param>
            <param name="num">an integer between 1 and 4</param>
            <param name="state">boolean value</param>
            <param name="toProfile">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.ad">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.app">
            <summary>
            string value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.extension">
            <summary>
            extension used for redirects
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.flair_id">
            <summary>
            a string no longer than 36 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.flair_text">
            <summary>
            a string no longer than 64 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.kind">
            <summary>
            one of (link, self, image, video, videogif)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.nsfw">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.resubmit">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.richtext_json">
            <summary>
            JSON data
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.sendreplies">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.spoiler">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.sr">
            <summary>
            name of a subreddit
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.text">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.title">
            <summary>
            title of the submission. Up to 300 characters long
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.url">
            <summary>
            a valid URL
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.video_poster_url">
            <summary>
            a valid URL
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Submit a link to a subreddit.
            Submit will create a link or self-post in the subreddit sr with the title title.
            If kind is "link", then url is expected to be a valid URL to link to.
            Otherwise, text, if present, will be the body of the self-post unless richtext_json is present, in which case it will be converted into the body of the self-post.
            An error is thrown if both text and richtext_json are present.
            If a link with the same URL has already been submitted to the specified subreddit an error will be returned unless resubmit is true.
            extension is used for determining which view-type (e.g.json, compact etc.) to use for the redirect that is generated if the resubmit error occurs.
            </summary>
            <param name="ad">boolean value</param>
            <param name="app"></param>
            <param name="extension">extension used for redirects</param>
            <param name="flairId">a string no longer than 36 characters</param>
            <param name="flairText">a string no longer than 64 characters</param>
            <param name="kind">one of (link, self, image, video, videogif)</param>
            <param name="nsfw">boolean value</param>
            <param name="resubmit">boolean value</param>
            <param name="richtextJson">JSON data</param>
            <param name="sendReplies">boolean value</param>
            <param name="spoiler">boolean value</param>
            <param name="sr">name of a subreddit</param>
            <param name="text">raw markdown text</param>
            <param name="title">title of the submission. up to 300 characters long</param>
            <param name="url">a valid URL</param>
            <param name="videoPosterUrl">a valid URL</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSuggestedSortInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsSuggestedSortInput.sort">
            <summary>
            one of (confidence, top, new, controversial, old, random, qa, live, blank)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsSuggestedSortInput.#ctor(System.String,System.String)">
            <summary>
            Set sort.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="sort">one of (confidence, top, new, controversial, old, random, qa, live, blank)</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput.return_rtjson">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput.richtext_json">
            <summary>
            JSON data
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput.text">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput.thing_id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Data for creating or modifying a post or comment.
            </summary>
            <param name="text">raw markdown text</param>
            <param name="thingId">fullname of a thing</param>
            <param name="returnRtjson">boolean value</param>
            <param name="richtextJson">JSON data</param>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsVoteInput.dir">
            <summary>
            vote direction. one of (1, 0, -1)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LinksAndComments.LinksAndCommentsVoteInput.rank">
            <summary>
            an integer greater than 1
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LinksAndComments.LinksAndCommentsVoteInput.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Cast a vote on a thing.
            id should be the fullname of the Link or Comment to vote on.
            dir indicates the direction of the vote. Voting 1 is an upvote, -1 is a downvote, and 0 is equivalent to "un-voting" by clicking again on a highlighted arrow.
            Note: votes must be cast by humans.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the reddit rules for more details on what constitutes vote cheating.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="dir">vote direction. one of (1, 0, -1)</param>
            <param name="rank">an integer greater than 1</param>
        </member>
        <member name="P:Reddit.Inputs.ListingInput.after">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.ListingInput.before">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.ListingInput.limit">
            <summary>
            the maximum number of items desired
            </summary>
        </member>
        <member name="P:Reddit.Inputs.ListingInput.count">
            <summary>
            a positive integer
            </summary>
        </member>
        <member name="M:Reddit.Inputs.ListingInput.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Populate a new listing input.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25)</param>
            <param name="count">a positive integer (default: 0)</param>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.context">
            <summary>
            an integer between 0 and 8
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.showedits">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.showmore">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.sort">
            <summary>
            one of (confidence, top, new, controversial, old, random, qa, live)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.threaded">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.truncate">
            <summary>
            an integer between 0 and 50
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.comment">
            <summary>
            (optional) ID36 of a comment
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.depth">
            <summary>
            (optional) an integer
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.limit">
            <summary>
            (optional) an integer
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetCommentsInput.sr_detail">
            <summary>
            (optional) expand subreddits
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetDuplicatesInput.crossposts_only">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetDuplicatesInput.sort">
            <summary>
            one of (num_comments, new)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsGetDuplicatesInput.sr">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Listings.ListingsGetDuplicatesInput.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Return a list of other submissions of the same URL
            </summary>
            <param name="sr">subreddit name</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="crosspostsOnly">boolean value</param>
            <param name="sort">one of (num_comments, new)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Listings.ListingsHotInput.g">
            <summary>
            one of (GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, GR, HU, IS, IN, IE, JP, MY, MX, NZ, PH, PL, PT, PR, RO, RS, SG, SE, TW, TH, TR, GB, US_WA, 
            US_DE, US_DC, US_WI, US_WV, US_HI, US_FL, US_WY, US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE, US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK, 
            US_AL, US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK, US_AZ, US_ID, US_CT, US_ME, US_MD, US_MA, US_OH, US_UT, US_MO, US_MN, US_MI, US_RI, US_KS, US_MT, US_MS, 
            US_SC, US_KY, US_OR, US_SD)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Listings.ListingsHotInput.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="g">one of (GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, GR, HU, IS, IN, IE, JP, MY, MX, NZ, PH, PL, PT, PR, RO, RS, SG, SE, TW, TH, TR, GB, US_WA, 
            US_DE, US_DC, US_WI, US_WV, US_HI, US_FL, US_WY, US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE, US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK, 
            US_AL, US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK, US_AZ, US_ID, US_CT, US_ME, US_MD, US_MA, US_OH, US_UT, US_MO, US_MN, US_MI, US_RI, US_KS, US_MT, US_MS, 
            US_SC, US_KY, US_OR, US_SD)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsBodyInput.body">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsBodyInput.#ctor(System.String)">
            <summary>
            Set body value.
            </summary>
            <param name="body">raw markdown text</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsConfigInput.description">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsConfigInput.nsfw">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsConfigInput.resources">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsConfigInput.title">
            <summary>
            a string no longer than 120 characters
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsConfigInput.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Configuration values for a live thread.
            </summary>
            <param name="title">a string no longer than 120 characters</param>
            <param name="description">raw markdown text</param>
            <param name="nsfw">boolean value</param>
            <param name="resources">raw markdown text</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsContributorInput.name">
            <summary>
            the name of an existing user
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsContributorInput.permissions">
            <summary>
            permission description e.g. +update,+edit,-manage
            </summary>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsContributorInput.type">
            <summary>
            one of (liveupdate_contributor_invite, liveupdate_contributor)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsContributorInput.#ctor(System.String,System.String,System.String)">
            <summary>
            Set data pertaining to a live thread contributor.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">permission description e.g. +update,+edit,-manage</param>
            <param name="type">one of (liveupdate_contributor_invite, liveupdate_contributor)</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsGetUpdatesInput.stylesr">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsGetUpdatesInput.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get a list of updates posted in this thread.
            </summary>
            <param name="styleSr">subreddit name</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25)</param>
            <param name="count">a positive integer (default: 0)</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsIdInput.id">
            <summary>
            the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsIdInput.#ctor(System.String)">
            <summary>
            Set a live thread ID.
            </summary>
            <param name="id">the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
        </member>
        <member name="P:Reddit.Inputs.LiveThreads.LiveThreadsReportTypeInput.type">
            <summary>
            one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.LiveThreads.LiveThreadsReportTypeInput.#ctor(System.String)">
            <summary>
            Set a live thread report type.
            </summary>
            <param name="type">one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)</param>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationDistinguishInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationDistinguishInput.how">
            <summary>
            one of (yes, no, admin, special)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationDistinguishInput.sticky">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Moderation.ModerationDistinguishInput.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Distinguish a thing's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link or comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="sticky">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationGetLogInput.mod">
            <summary>
            (optional) a moderator filter
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationGetLogInput.type">
            <summary>
            one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, 
            acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, 
            removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, 
            muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Moderation.ModerationGetLogInput.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Get a list of recent moderation actions.
            Moderator actions taken within a subreddit are logged. This listing is a view of that log with various filters to aid in analyzing the information.
            The optional mod parameter can be a comma-delimited list of moderator names to restrict the results to, or the string a to restrict the results to admin actions taken within the subreddit.
            The type parameter is optional and if sent limits the log entries returned to only those of the type specified.
            </summary>
            <param name="type">one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, 
            acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, 
            removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, 
            muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent)</param>
            <param name="mod">(optional) a moderator filter</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 500)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="show">(optional) the string all</param>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationModQueueInput.only">
            <summary>
            one of (links, comments)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Moderation.ModerationModQueueInput.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Return a listing of posts relevant to moderators.
            reports: Things that have been reported.
            spam: Things that have been marked as spam or otherwise removed.
            modqueue: Things requiring moderator review, such as reported things and items caught by the spam filter.
            unmoderated: Things that have yet to be approved/removed by a mod.
            edited: Things that have been edited recently.
            Requires the "posts" moderator permission for the subreddit.
            </summary>
            <param name="only">one of (links, comments)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 500)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="show">(optional) the string all</param>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationRemoveInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Moderation.ModerationRemoveInput.spam">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Moderation.ModerationRemoveInput.#ctor(System.String,System.Boolean)">
            <summary>
            Remove a link, comment, or modmail message.
            If the thing is a link, it will be removed from all subreddit listings. If the thing is a comment, it will be redacted and removed from all subreddit comment listings.
            </summary>
            <param name="id">fullname of a thing</param>
            <param name="spam">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailBulkReadInput.entity">
            <summary>
            comma-delimited list of subreddit names
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailBulkReadInput.state">
            <summary>
            one of (new, inprogress, mod, notifications, archived, highlighted, all)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Modmail.ModmailBulkReadInput.#ctor(System.String,System.String)">
            <summary>
            Set values for entity and state in bulk message retrieval.
            </summary>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailGetConversationsInput.after">
            <summary>
            base36 modmail conversation id
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailGetConversationsInput.sort">
            <summary>
            one of (recent, mod, user, unread)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailGetConversationsInput.limit">
            <summary>
            an integer (default: 25)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Modmail.ModmailGetConversationsInput.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get conversations for a logged in user or subreddits.
            </summary>
            <param name="after">base36 modmail conversation id</param>
            <param name="entity">comma-delimited list of subreddit names</param>
            <param name="sort">one of (recent, mod, user, unread)</param>
            <param name="state">one of (new, inprogress, mod, notifications, archived, highlighted, all)</param>
            <param name="limit">an integer (default: 25)</param>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailMessageBodyInput.body">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailMessageBodyInput.isAuthorHidden">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Modmail.ModmailMessageBodyInput.#ctor(System.String,System.Boolean)">
            <summary>
            Set values for a modmail conversation body.
            </summary>
            <param name="body">raw markdown text</param>
            <param name="isAuthorHidden">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailNewConversationInput.srName">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailNewConversationInput.subject">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailNewConversationInput.to">
            <summary>
            Modmail conversation recipient username
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Modmail.ModmailNewConversationInput.#ctor(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a new conversation for a particular SR.
            </summary>
            <param name="body">raw markdown text</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="srName">subreddit name</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="to">Modmail conversation recipient username</param>
        </member>
        <member name="P:Reddit.Inputs.Modmail.ModmailNewMessageInput.isInternal">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Modmail.ModmailNewMessageInput.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new message for a particular conversation.
            </summary>
            <param name="body">raw markdown text</param>
            <param name="isAuthorHidden">boolean value</param>
            <param name="isInternal">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Multis.MultiURLInput.display_name">
            <summary>
            a string no longer than 50 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Multis.MultiURLInput.from">
            <summary>
            multireddit url path
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Multis.MultiURLInput.to">
            <summary>
            destination multireddit url path
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Multis.MultiURLInput.#ctor(System.String,System.String,System.String)">
            <summary>
            Specify an old and new multireddit URL path for copy or rename.
            </summary>
            <param name="displayName">a string no longer than 50 characters</param>
            <param name="from">multireddit url path</param>
            <param name="to">destination multireddit url path</param>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput.from_sr">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput.subject">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput.text">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput.to">
            <summary>
            the name of an existing user (or subreddit for modmail)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Handles message composition under /message/compose.
            </summary>
            <param name="fromSr">subreddit name</param>
            <param name="subject">a string no longer than 100 characters</param>
            <param name="text">raw markdown text</param>
            <param name="to">the name of an existing user</param>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesGetMessagesInput.mark">
            <summary>
            one of (true, false)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.PrivateMessages.PrivateMessagesGetMessagesInput.mid">
            <summary>
            TODO - Purpose unknown.
            </summary>
        </member>
        <member name="M:Reddit.Inputs.PrivateMessages.PrivateMessagesGetMessagesInput.#ctor(System.Boolean,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieve private messages.
            </summary>
            <param name="mark">one of (true, false)</param>
            <param name="mid"></param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.category">
            <summary>
            a string no longer than 5 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.include_facets">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.restrict_sr">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.sort">
            <summary>
            one of (relevance, hot, top, new, comments)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.q">
            <summary>
            a string no longer than 512 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Search.SearchGetSearchInput.type">
            <summary>
            (optional) comma-delimited list of result types (sr, link, user)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Search.SearchGetSearchInput.#ctor(System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Search links page.
            </summary>
            <param name="q">a string no longer than 512 characters</param>
            <param name="restrictSr">boolean value</param>
            <param name="sort">one of (relevance, hot, top, new, comments)</param>
            <param name="category">a string no longer than 5 characters</param>
            <param name="includeFacets">boolean value</param>
            <param name="type">(optional) comma-delimited list of result types (sr, link, user)</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.SrListingInput.show">
            <summary>
            (optional) the string all
            </summary>
        </member>
        <member name="P:Reddit.Inputs.SrListingInput.sr_detail">
            <summary>
            (optional) expand subreddits
            </summary>
        </member>
        <member name="M:Reddit.Inputs.SrListingInput.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Populate a new subreddit listing input.
            </summary>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="limit">the maximum number of items desired (default: 25)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="show">(optional) the string all</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsAboutInput.user">
            <summary>
            A valid, existing reddit username
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsAboutInput.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get about data.
            </summary>
            <param name="user">A valid, existing reddit username</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsAutocompleteInput.include_profiles">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsAutocompleteInput.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Return a list of subreddits and data for subreddits whose names start with 'query'.
            Uses typeahead endpoint to recieve the list of subreddits names. 
            Typeahead provides exact matches, typo correction, fuzzy matching and boosts subreddits to the top that the user is subscribed to.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="includeProfiles">boolean value</param>
            <param name="includeOver18">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsAutocompleteV2Input.include_categories">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsAutocompleteV2Input.limit">
            <summary>
            an integer between 1 and 10 (default: 5)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsAutocompleteV2Input.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Version 2 of SubredditAutocomplete.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="includeCategories">boolean value</param>
            <param name="includeOver18">boolean value</param>
            <param name="includeProfiles">boolean value</param>
            <param name="limit">an integer between 1 and 10 (default: 5)</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsDeleteSrImgInput.img_name">
            <summary>
            a valid subreddit image name
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsDeleteSrImgInput.#ctor(System.String)">
            <summary>
            Remove an image from the subreddit's custom image set.
            The image will no longer count against the subreddit's image limit. However, the actual image data may still be accessible for an unspecified amount of time. 
            If the image is currently referenced by the subreddit's stylesheet, that stylesheet will no longer validate and won't be editable until the image reference is removed.
            </summary>
            <param name="imgName">a valid subreddit image name</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsEditInput.created">
            <summary>
            one of (true, false)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsEditInput.location">
            <summary>
            TODO - Purpose unknown.
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsEditInput.#ctor(System.Boolean,System.String)">
            <summary>
            Get the current settings of a subreddit.
            This returns the current settings of the subreddit as used by /api/site_admin.
            </summary>
            <param name="created">one of (true, false)</param>
            <param name="location"></param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsQueryInput.query">
            <summary>
            a string up to 50 characters long, consisting of printable characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsQueryInput.include_over_18">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsQueryInput.#ctor(System.String,System.Boolean)">
            <summary>
            Set data pertaining to a subreddit search query.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="includeOver18">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsRecommendInput.omit">
            <summary>
            comma-delimited list of subreddit names
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsRecommendInput.over_18">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsRecommendInput.#ctor(System.String,System.Boolean)">
            <summary>
            Return subreddits recommended for the given subreddit(s).
            Gets a list of subreddits recommended for srnames, filtering out any that appear in the optional omit param.
            </summary>
            <param name="omit">comma-delimited list of subreddit names</param>
            <param name="over18">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSearchInput.show_users">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSearchInput.#ctor(System.String,System.Boolean,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Search subreddits by title and description.
            </summary>
            <param name="q">a search query</param>
            <param name="showUsers">boolean value</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="sort">one of (relevance, activity)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSearchNamesInput.exact">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSearchNamesInput.include_unadvertisable">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSearchNamesInput.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            List subreddit names that begin with a query string.
            Subreddits whose names begin with query will be returned.
            If include_over_18 is false, subreddits with over-18 content restrictions will be filtered from the results.
            If include_unadvertisable is False, subreddits that have hide_ads set to True or are on the anti_ads_subreddits list will be filtered.
            If exact is true, only an exact match will be returned. Exact matches are inclusive of over_18 subreddits, but not hide_ad subreddits when include_unadvertisable is False.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="exact">boolean value</param>
            <param name="includeOver18">boolean value</param>
            <param name="includeUnadvertisable">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSearchProfilesInput.q">
            <summary>
            a search query
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSearchProfilesInput.sort">
            <summary>
            one of (relevance, activity)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSearchProfilesInput.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Search user profiles by title and description.
            </summary>
            <param name="q">a search query</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="sort">one of (relevance, activity)</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.all_original_content">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.allow_discovery">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.allow_images">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.allow_post_crossposts">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.allow_top">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.allow_videos">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.collapse_deleted_comments">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.comment_score_hide_mins">
            <summary>
            an integer between 0 and 1440 (default: 0)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.description">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.exclude_banned_modqueue">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.free_form_reports">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.hide_ads">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.key_color">
            <summary>
            a 6-digit rgb hex color, e.g. #AABBCC
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.lang">
            <summary>
            a valid IETF language tag (underscore separated)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.link_type">
            <summary>
            >one of (any, link, self)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.name">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.original_content_tag_enabled">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.over_18">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.public_description">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.show_media">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.show_media_preview">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.spam_comments">
            <summary>
            one of (low, high, all)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.spam_links">
            <summary>
            one of (low, high, all)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.spam_selfposts">
            <summary>
            one of (low, high, all)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.spoilers_enabled">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.sr">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.submit_link_label">
            <summary>
            a string no longer than 60 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.submit_text">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.submit_text_label">
            <summary>
            a string no longer than 60 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.suggested_comment_sort">
            <summary>
            one of (confidence, top, new, controversial, old, random, qa, live)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.theme_sr">
            <summary>
            subreddit name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.theme_sr_update">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.title">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.type">
            <summary>
            one of (gold_restricted, archived, restricted, employees_only, gold_only, private, user, public)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.wiki_edit_age">
            <summary>
            an integer between 0 and 36600 (default: 0)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.wiki_edit_karma">
            <summary>
            an integer between 0 and 1000000000 (default: 0)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.wikimode">
            <summary>
            one of (disabled, modonly, anyone)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSiteAdminInput.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create or configure a subreddit.  Null values are ignored.
            If sr is specified, the request will attempt to modify the specified subreddit. If not, a subreddit with name name will be created.
            This endpoint expects all values to be supplied on every request. If modifying a subset of options, it may be useful to get the current settings from /about/edit.json first.
            For backwards compatibility, description is the sidebar text and public_description is the publicly visible subreddit description.
            Most of the parameters for this endpoint are identical to options visible in the user interface and their meanings are best explained there.
            </summary>
            <param name="allOriginalContent">boolean value</param>
            <param name="allowDiscovery">boolean value</param>
            <param name="allowImages">boolean value</param>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="allowVideos">boolean value</param>
            <param name="collapseDeletedComments">boolean value</param>
            <param name="description">raw markdown text</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="hideAds">boolean value</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="lang">a valid IETF language tag (underscore separated)</param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="name">subreddit name</param>
            <param name="originalContentTagEnabled">boolean value</param>
            <param name="over18">boolean value</param>
            <param name="publicDescription">raw markdown text</param>
            <param name="showMedia">boolean value</param>
            <param name="showMediaPreview">boolean value</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="spoilersEnabled">boolean value</param>
            <param name="sr">fullname of a thing</param>
            <param name="submitLinkLabel">a string no longer than 60 characters</param>
            <param name="submitText">raw markdown text</param>
            <param name="submitTextLabel">a string no longer than 60 characters</param>
            <param name="suggestedCommentSort">one of (confidence, top, new, controversial, old, random, qa, live)</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="title">a string no longer than 100 characters</param>
            <param name="type">one of (gold_restricted, archived, restricted, employees_only, gold_only, private, user, public)</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="commentScoreHideMins">an integer between 0 and 1440 (default: 0)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubByFullnameInput.sr">
            <summary>
            A comma-separated list of subreddit fullnames
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSubByFullnameInput.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Subscribe to or unsubscribe from a subreddit.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            </summary>
            <param name="sr">A comma-separated list of subreddit fullnames</param>
            <param name="action">one of (sub, unsub)</param>
            <param name="skipInitialDefaults">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubByNameInput.sr_name">
            <summary>
            A comma-separated list of subreddit names
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSubByNameInput.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Subscribe to or unsubscribe from a subreddit.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            </summary>
            <param name="srName">A comma-separated list of subreddit names</param>
            <param name="action">one of (sub, unsub)</param>
            <param name="skipInitialDefaults">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput.op">
            <summary>
            one of (save, preview)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput.reason">
            <summary>
            a string up to 256 characters long, consisting of printable characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput.stylesheet_contents">
            <summary>
            the new stylesheet content
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput.#ctor(System.String,System.String,System.String)">
            <summary>
            Update a subreddit's stylesheet.
            op should be save to update the contents of the stylesheet.
            </summary>
            <param name="stylesheetContents">the new stylesheet content</param>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
            <param name="op">one of (save, preview)</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubscribeInput.action">
            <summary>
            one of (sub, unsub)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsSubscribeInput.skip_initial_defaults">
            <summary>
            boolean value
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsSubscribeInput.#ctor(System.String,System.Boolean)">
            <summary>
            Subscribe to or unsubscribe from a subreddit.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            </summary>
            <param name="action">one of (sub, unsub)</param>
            <param name="skipInitialDefaults">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.file">
            <summary>
            file upload with maximum size of 500 KiB
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.header">
            <summary>
            an integer between 0 and 1
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.name">
            <summary>
            a valid subreddit image name
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.upload_type">
            <summary>
            one of (img, header, icon, banner)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.img_type">
            <summary>
            one of png or jpg (default: png)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.formid">
            <summary>
            (optional) can be ignored
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput.#ctor(System.Byte[],System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Add or replace a subreddit image, custom header logo, custom mobile icon, or custom mobile banner.
            If the upload_type value is img, an image for use in the subreddit stylesheet is uploaded with the name specified in name.
            If the upload_type value is header then the image uploaded will be the subreddit's new logo and name will be ignored.
            If the upload_type value is icon then the image uploaded will be the subreddit's new mobile icon and name will be ignored.
            If the upload_type value is banner then the image uploaded will be the subreddit's new mobile banner and name will be ignored.
            For backwards compatibility, if upload_type is not specified, the header field will be used instead:
            If the header field has value 0, then upload_type is img.
            If the header field has value 1, then upload_type is header.
            The img_type field specifies whether to store the uploaded image as a PNG or JPEG.
            Subreddits have a limited number of images that can be in use at any given time. If no image with the specified name already exists, one of the slots will be consumed
            If an image with the specified name already exists, it will be replaced. This does not affect the stylesheet immediately, but will take effect the next time the stylesheet is saved.
            </summary>
            <param name="file">file upload with maximum size of 500 KiB</param>
            <param name="header">an integer between 0 and 1</param>
            <param name="name">a valid subreddit image name</param>
            <param name="uploadType">one of (img, header, icon, banner)></param>
            <param name="imgType">one of png or jpg (default: png)</param>
            <param name="formId">(optional) can be ignored</param>
        </member>
        <member name="P:Reddit.Inputs.TimedCatSrListingInput.t">
            <summary>
            one of (hour, day, week, month, year, all)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.TimedCatSrListingInput.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersBlockUserInput.account_id">
            <summary>
            fullname of an account
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersBlockUserInput.name">
            <summary>
            A valid, existing reddit username
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Users.UsersBlockUserInput.#ctor(System.String,System.String)">
            <summary>
            For blocking a user.
            </summary>
            <param name="accountId">fullname of an account</param>
            <param name="name">A valid, existing reddit username</param>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.ban_context">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.ban_message">
            <summary>
            raw markdown text
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.ban_reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.duration">
            <summary>
            an integer between 1 and 999, or null to specify permanent duration
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.permissions">
            <summary>
            A valid permissions string (e.g. "+mail")
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.container">
            <summary>
            TODO - Purpose unknown.
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.name">
            <summary>
            the name of an existing user
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersFriendInput.type">
            <summary>
            one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Users.UsersFriendInput.#ctor(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="type">one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="duration">an integer between 1 and 999, or null to specify permanent duration</param>
            <param name="permissions">A valid permissions string (e.g. "+mail")</param>
            <param name="banContext">fullname of a thing</param>
            <param name="banMessage">raw markdown text</param>
            <param name="banReason">a string no longer than 100 characters</param>
            <param name="container"></param>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersHistoryInput.t">
            <summary>
            one of (hour, day, week, month, year, all)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersHistoryInput.sort">
            <summary>
            one of (hot, new, top, controversial)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersHistoryInput.context">
            <summary>
            an integer between 2 and 10
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersHistoryInput.type">
            <summary>
            One of (links, comments)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Users.UsersHistoryInput.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Input data for retrieving a user's post or comment history.
            </summary>
            <param name="type">One of (links, comments)</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="sort">one of (hot, new, top, controversial)</param>
            <param name="context">an integer between 2 and 10</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="includeCategories">boolean value</param>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersReportUserInput.details">
            <summary>
            JSON data
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersReportUserInput.reason">
            <summary>
            a string no longer than 100 characters
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersReportUserInput.user">
            <summary>
            A valid, existing reddit username
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Reddit.Inputs.Users.UsersReportUserInput.#ctor(System.String,System.String,System.String)" -->
        <member name="P:Reddit.Inputs.Users.UsersSetPermissionsInput.name">
            <summary>
            the name of an existing user
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersSetPermissionsInput.permissions">
            <summary>
            A valid permissions string (e.g. "+mail")
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersSetPermissionsInput.type">
            <summary>
            one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Users.UsersSetPermissionsInput.#ctor(System.String,System.String,System.String)">
            <summary>
            Set permissions.
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="permissions">A valid permissions string (e.g. "+mail")</param>
            <param name="type">one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersUnfriendInput.name">
            <summary>
            the name of an existing user
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersUnfriendInput.id">
            <summary>
            fullname of a thing
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersUnfriendInput.type">
            <summary>
            one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Users.UsersUnfriendInput.container">
            <summary>
            TODO - Purpose unknown.
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Users.UsersUnfriendInput.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Remove a relationship between a user and another user or subreddit.
            The user can either be passed in by name (nuser) or by fullname (iuser).
            If type is friend or enemy, 'container' MUST be the current user's fullname; for other types, the subreddit must be set via URL (e.g., /r/funny/api/unfriend).
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            </summary>
            <param name="name">the name of an existing user</param>
            <param name="id">fullname of a thing</param>
            <param name="type">one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)</param>
            <param name="container"></param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiCreatePageInput.content">
            <summary>
            The page content
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiCreatePageInput.page">
            <summary>
            the name of an existing page or a new page to create
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiCreatePageInput.reason">
            <summary>
            a string up to 256 characters long, consisting of printable characters
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiCreatePageInput.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a wiki page.
            </summary>
            <param name="content">The page content</param>
            <param name="page">the name of the new page being created</param>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiCreatePageInput.#ctor(Reddit.Inputs.Wiki.WikiEditPageInput)">
            <summary>
            Create a wiki page.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiEditPageInput.previous">
            <summary>
            the starting point revision for this edit
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiEditPageInput.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Edit a wiki page.
            </summary>
            <param name="content">The page content</param>
            <param name="page">the name of an existing page or a new page to create</param>
            <param name="previous">the starting point revision for this edit</param>
            <param name="reason">a string up to 256 characters long, consisting of printable characters</param>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiEditPageInput.#ctor(Reddit.Inputs.Wiki.WikiCreatePageInput)">
            <summary>
            Edit a wiki page.
            </summary>
            <param name="wikiCreatePageInput">A valid WikiCreatePageInput instance</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageContentInput.v">
            <summary>
            a wiki revision ID
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageContentInput.v2">
            <summary>
            a wiki revision ID
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiPageContentInput.#ctor(System.String,System.String)">
            <summary>
            Return the content of a wiki page.
            If v is given, show the wiki page as it was at that version. If both v and v2 are given, show a diff of the two.
            </summary>
            <param name="v">a wiki revision ID</param>
            <param name="v2">a wiki revision ID</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageEditorInput.page">
            <summary>
            the name of an existing wiki page
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageEditorInput.username">
            <summary>
            the name of an existing user
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiPageEditorInput.#ctor(System.String,System.String)">
            <summary>
            Input data pertaining to a wiki page editor.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="username">the name of an existing user</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageInput.page">
            <summary>
            the name of an existing wiki page
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiPageInput.#ctor(System.String)">
            <summary>
            Set input data pertaining to a wiki page.
            </summary>
            <param name="page">the name of an existing wiki page</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiPageRevisionInput.revision">
            <summary>
            a wiki revision ID
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiPageRevisionInput.#ctor(System.String,System.String)">
            <summary>
            Set input data pertaining to a wiki page/revision.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="revision">a wiki revision ID</param>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiUpdatePermissionsInput.listed">
            <summary>
            boolean value (true = appear in /wiki/pages, false = don't appear in /wiki/pages)
            </summary>
        </member>
        <member name="P:Reddit.Inputs.Wiki.WikiUpdatePermissionsInput.permlevel">
            <summary>
            an integer (0 = use wiki perms, 1 = only approved users may edit, 2 = only mods may edit or view)
            </summary>
        </member>
        <member name="M:Reddit.Inputs.Wiki.WikiUpdatePermissionsInput.#ctor(System.Boolean,System.Int32)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="listed">boolean value (true = appear in /wiki/pages, false = don't appear in /wiki/pages)</param>
            <param name="permLevel">an integer (0 = use wiki perms, 1 = only approved users may edit, 2 = only mods may edit or view)</param>
        </member>
        <member name="M:Reddit.Models.Account.Me">
            <summary>
            Returns the identity of the user.
            </summary>
            <returns>The identity of the user.</returns>
        </member>
        <member name="M:Reddit.Models.Account.Karma">
            <summary>
            Return a breakdown of subreddit karma.
            </summary>
            <returns>A breakdown of subreddit karma.</returns>
        </member>
        <member name="M:Reddit.Models.Account.Prefs">
            <summary>
            Return the preference settings of the logged in user.
            </summary>
            <returns>The preference settings of the logged in user.</returns>
        </member>
        <member name="M:Reddit.Models.Account.UpdatePrefs(Reddit.Things.AccountPrefsSubmit)">
            <summary>
            Update preferences.
            </summary>
            <param name="accountPrefs">A valid AccountPrefs instance.</param>
            <returns>The updated preference settings of the logged in user.</returns>
        </member>
        <member name="M:Reddit.Models.Account.UpdatePrefsAsync(Reddit.Things.AccountPrefsSubmit)">
            <summary>
            Update preferences asynchronously.
            </summary>
            <param name="accountPrefs">A valid AccountPrefs instance.</param>
            <returns>The updated preference settings of the logged in user.</returns>
        </member>
        <member name="M:Reddit.Models.Account.Trophies">
            <summary>
            Return a list of trophies for the current user.
            </summary>
            <returns>A list of trophies for the current user.</returns>
        </member>
        <member name="M:Reddit.Models.Account.PrefsList(System.String,Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            Get users with whom the current user has friended, blocked, or trusted.
            </summary>
            <param name="where">One of (friends, messaging)</param>
            <param name="accountPrefsInput">A valid AccountPrefsInput instance</param>
            <returns>A listing of users.</returns>
        </member>
        <member name="M:Reddit.Models.Account.PrefsSingle(System.String,Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            Get users with whom the current user has friended, blocked, or trusted.
            </summary>
            <param name="where">One of (friends, messaging)</param>
            <param name="accountPrefsInput">A valid AccountPrefsInput instance</param>
            <returns>A listing of users.</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.Add(System.String,Reddit.Inputs.Emoji.EmojiAddInput)">
            <summary>
            Add an emoji to the DB by posting a message on emoji_upload_q.
            A job processor that listens on a queue uses the s3_key provided in the request to locate the image in S3 Temp Bucket and moves it to the PERM bucket.
            It also adds it to the DB using name as the column and sr_fullname as the key and sends the status on the websocket URL that is provided as part of this response.
            </summary>
            <param name="subreddit">The subreddit with the emojis</param>
            <param name="emojiAddInput">A valid EmojiAddInput instance</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.Delete(System.String,System.String)">
            <summary>
            Delete a Subreddit emoji. Remove the emoji from Cassandra and purge the assets from S3 and the image resizing provider.
            </summary>
            <param name="subreddit">The subreddit with the emojis</param>
            <param name="emojiName">The name of the emoji to be deleted</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.AcquireLease(System.String,Reddit.Inputs.ImageUploadInput)">
            <summary>
            Acquire and return an upload lease to s3 temp bucket.
            The return value of this function is a json object containing credentials for uploading assets to S3 bucket, S3 url for upload request and the key to use for uploading.
            Using this lease the client will upload the emoji image to S3 temp bucket (included as part of the S3 URL). This lease is used by S3 to verify that the upload is authorized.
            </summary>
            <param name="subreddit">The subreddit with the emojis</param>
            <param name="imageUploadInput">A valid ImageUploadInput instance</param>
            <returns>An S3 lease.</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.UploadLeaseImage(System.Byte[],Reddit.Things.S3UploadLeaseContainer)">
            <summary>
            Upload an Emoji.
            </summary>
            <param name="imageData">Raw image data.</param>
            <param name="s3">The data retrieved by AcquireLease.</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.CustomSize(System.String,System.Int32,System.Int32)">
            <summary>
            Set custom emoji size. Omitting width or height will disable custom emoji sizing.
            </summary>
            <param name="subreddit">The subreddit with the emojis</param>
            <param name="height">an integer between 1 and 40 (default: 0)</param>
            <param name="width">an integer between 1 and 40 (default: 0)</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Emoji.All(System.String)">
            <summary>
            Get all emojis for a SR. The response includes reddit emojis as well as emojis for the SR specified in the request.
            </summary>
            <param name="subreddit">The subreddit with the emojis</param>
            <returns>Emojis.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.ClearFlairTemplates(System.String,System.String)">
            <summary>
            Clear flair templates.
            </summary>
            <param name="flairType">one of (USER_FLAIR, LINK_FLAIR)</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.ClearFlairTemplatesAsync(System.String,System.String)">
            <summary>
            Clear flair templates asynchronously.
            </summary>
            <param name="flairType">one of (USER_FLAIR, LINK_FLAIR)</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.DeleteFlair(System.String,System.String)">
            <summary>
            Delete flair.
            </summary>
            <param name="name">a user by name</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.DeleteFlairAsync(System.String,System.String)">
            <summary>
            Delete flair asynchronously.
            </summary>
            <param name="name">a user by name</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.DeleteFlairTemplate(System.String,System.String)">
            <summary>
            Delete flair template.
            </summary>
            <param name="flairTemplateId"></param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.DeleteFlairTemplateAsync(System.String,System.String)">
            <summary>
            Delete flair template asynchronously.
            </summary>
            <param name="flairTemplateId"></param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.Create(Reddit.Inputs.Flair.FlairCreateInput,System.String)">
            <summary>
            Create a new flair.
            </summary>
            <param name="flairCreateInput">a valid FlairCreateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.CreateAsync(Reddit.Inputs.Flair.FlairCreateInput,System.String)">
            <summary>
            Create a new flair asynchronously.
            </summary>
            <param name="flairCreateInput">a valid FlairCreateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairTemplateOrder(System.String,System.Collections.Generic.List{Reddit.Things.Flair},System.String)">
            <summary>
            Update the order of flair templates in the specified subreddit.
            Order should contain every single flair id for that flair type; omitting any id will result in a loss of data.
            </summary>
            <param name="flairType">one of (USER_FLAIR, LINK_FLAIR)</param>
            <param name="subreddit">subreddit name</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairConfig(Reddit.Inputs.Flair.FlairConfigInput,System.String)">
            <summary>
            Flair config.
            </summary>
            <param name="flairConfigInput">A valid FlairConfigInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairConfigAsync(Reddit.Inputs.Flair.FlairConfigInput,System.String)">
            <summary>
            Asynchronous flair config.
            </summary>
            <param name="flairConfigInput">A valid FlairConfigInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairCSV(System.String,System.String)">
            <summary>
            Change the flair of multiple users in the same subreddit with a single API call.
            Requires a string 'flair_csv' which has up to 100 lines of the form 'user,flairtext,cssclass' (Lines beyond the 100th are ignored).
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">comma-seperated flair information</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Action results.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairCSVAsync(System.String,System.String)">
            <summary>
            Asynchronously change the flair of multiple users in the same subreddit with a single API call.
            Requires a string 'flair_csv' which has up to 100 lines of the form 'user,flairtext,cssclass' (Lines beyond the 100th are ignored).
            If both cssclass and flairtext are the empty string for a given user, instead clears that user's flair.
            Returns an array of objects indicating if each flair setting was applied, or a reason for the failure.
            </summary>
            <param name="flairCsv">comma-seperated flair information</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Action results.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairList(Reddit.Inputs.Flair.FlairNameListingInput,System.String)">
            <summary>
            List of flairs.
            </summary>
            <param name="flairNameListingInput">A valid FlairNameListingInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Flair list results.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairSelector(Reddit.Inputs.Flair.FlairLinkInput,System.String)">
            <summary>
            Return information about a users's flair options.
            If link is given, return link flair options. Otherwise, return user flair options for this subreddit.
            The logged in user's flair is also returned. Subreddit moderators may give a user by name to instead retrieve that user's flair.
            </summary>
            <param name="flairLinkInput">A valid FlairLinkInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>Flair results.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairTemplate(Reddit.Inputs.Flair.FlairTemplateInput,System.String)">
            <summary>
            Create or update a flair template.
            </summary>
            <param name="flairTemplateInput">a valid FlairTemplateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairTemplateAsync(Reddit.Inputs.Flair.FlairTemplateInput,System.String)">
            <summary>
            Create or update a flair template asynchronously.
            </summary>
            <param name="flairTemplateInput">a valid FlairTemplateInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairTemplateV2(Reddit.Inputs.Flair.FlairTemplateV2Input,System.String)">
            <summary>
            Create or update a flair template asynchronously.  Null values are ignored.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">a valid FlairTemplateV2Input instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.FlairTemplateV2Async(Reddit.Inputs.Flair.FlairTemplateV2Input,System.String)">
            <summary>
            Create or update a flair template.  Null values are ignored.
            This new endpoint is primarily used for the redesign.
            </summary>
            <param name="flairTemplateV2Input">a valid FlairTemplateV2Input instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>The created flair object.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.LinkFlair(System.String)">
            <summary>
            Return list of available link flair for the current subreddit.
            Will not return flair if the user cannot set their own link flair and they are not a moderator that can set flair.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A list of flairs.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.LinkFlairV2(System.String)">
            <summary>
            Return list of available link flair for the current subreddit.
            Will not return flair if the user cannot set their own link flair and they are not a moderator that can set flair.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A list of flairs.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.SelectFlair(Reddit.Inputs.Flair.FlairSelectFlairInput,System.String)">
            <summary>
            Sets a link flair.
            </summary>
            <param name="flairSelectFlairInput">a valid FlairSelectFlairInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.SelectFlairAsync(Reddit.Inputs.Flair.FlairSelectFlairInput,System.String)">
            <summary>
            Sets a link flair asynchronously.
            </summary>
            <param name="flairSelectFlairInput">a valid FlairSelectFlairInput instance</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.SetFlairEnabled(System.Boolean,System.String)">
            <summary>
            Set flair enabled.
            </summary>
            <param name="flairEnabled">boolean value</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.SetFlairEnabledAsync(System.Boolean,System.String)">
            <summary>
            Set flair enabled asynchronously.
            </summary>
            <param name="flairEnabled">boolean value</param>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.UserFlair(System.String)">
            <summary>
            Return list of available user flair for the current subreddit.
            Will not return flair if flair is disabled on the subreddit, the user cannot set their own flair, or they are not a moderator that can set flair.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>List of available user flairs.</returns>
        </member>
        <member name="M:Reddit.Models.Flair.UserFlairV2(System.String)">
            <summary>
            Return list of available user flair for the current subreddit.
            If user is not a mod of the subreddit, this endpoint filters out mod_only templates.
            </summary>
            <param name="subreddit">The subreddit with the flairs</param>
            <returns>List of available user flairs.</returns>
        </member>
        <member name="M:Reddit.Models.Internal.Common.GetComments(System.String,Reddit.Inputs.Listings.ListingsGetCommentsInput,System.String)">
            <summary>
            Get the comment tree for a given Link article.
            If supplied, comment is the ID36 of a comment in the comment tree for article. 
            This comment will be the (highlighted) focal point of the returned view and context will be the number of parents shown.
            depth is the maximum depth of subtrees in the thread.
            limit is the maximum number of comments to return.
            See also: /api/morechildren and /api/comment.
            </summary>
            <param name="article">ID36 of a link</param>
            <param name="listingsGetCommentsInput">A valid ListingsGetCommentsInput instance</param>
            <param name="subreddit">The subreddit with the article</param>
            <returns>A post and comments tree.</returns>
        </member>
        <member name="M:Reddit.Models.Internal.Common.GetPost(System.String,Reddit.Inputs.Listings.ListingsGetCommentsInput,System.String)">
            <summary>
            Get information on a given link via the comments endpoint.
            </summary>
            <param name="article">ID36 of a link</param>
            <param name="listingsGetCommentsInput">A valid ListingsGetCommentsInput instance</param>
            <param name="subreddit">The subreddit with the article</param>
            <returns>A post and comments tree.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Comment``1(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Submit a new comment or reply to a message.
            parent is the fullname of the thing being replied to. Its value changes the kind of object created by this request:
            the fullname of a Link: a top-level comment in that Link's thread. (requires submit scope)
            the fullname of a Comment: a comment reply to that comment. (requires submit scope)
            the fullname of a Message: a message reply to that message. (requires privatemessages scope)
            text should be the raw markdown body of the comment or message.
            To start a new message thread, use /api/compose.
            the thing_id is the fullname of the parent thing.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>A Reddit comment.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.CommentAsync``1(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Asynchronously submit a new comment or reply to a message.
            parent is the fullname of the thing being replied to. Its value changes the kind of object created by this request:
            the fullname of a Link: a top-level comment in that Link's thread. (requires submit scope)
            the fullname of a Comment: a comment reply to that comment. (requires submit scope)
            the fullname of a Message: a message reply to that message. (requires privatemessages scope)
            text should be the raw markdown body of the comment or message.
            To start a new message thread, use /api/compose.
            the thing_id is the fullname of the parent thing.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>A Reddit comment.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Delete(System.String)">
            <summary>
            Delete a Link or Comment.
            </summary>
            <param name="id">fullname of a thing created by the user</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.DeleteAsync(System.String)">
            <summary>
            Delete a Link or Comment asynchronously.
            </summary>
            <param name="id">fullname of a thing created by the user</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.EditUserText(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Edit the body text of a self-post.
            the thing_id is the fullname of a self post.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The modified post data.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.EditUserTextAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Edit the body text of a self-post asynchronously.
            the thing_id is the fullname of a self post.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The modified post data.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.EditUserTextComment(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Edit the body text of a comment.
            the thing_id is the fullname of a comment.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The modified comment data.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.EditUserTextCommentAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsThingInput)">
            <summary>
            Edit the body text of a comment asynchronously.
            the thing_id is the fullname of a comment.
            </summary>
            <param name="linksAndCommentsThingInput">A valid LinksAndCommentsThingInput instance</param>
            <returns>The modified comment data.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Hide(System.String)">
            <summary>
            Hide a link.
            This removes it from the user's default view of subreddit listings.
            See also: /api/unhide.
            </summary>
            <param name="id">A comma-separated list of link fullnames</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.HideAsync(System.String)">
            <summary>
            Hide a link asynchronously.
            This removes it from the user's default view of subreddit listings.
            See also: /api/unhide.
            </summary>
            <param name="id">A comma-separated list of link fullnames</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Info(System.String,System.String,System.Boolean)">
            <summary>
            Return a listing of things specified by their fullnames.
            Only Links, Comments, and Subreddits are allowed.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
            <param name="subreddit">The subreddit with the listing</param>
            <param name="loadReplies">The Info endpoint doesn't include replies; if loadReplies is true, an additional API call will be triggered to retrieve the replies (default: true)</param>
            <returns>The requested listings.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Lock(System.String)">
            <summary>
            Lock a link.
            Prevents a post from receiving new comments.
            See also: /api/unlock.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.LockAsync(System.String)">
            <summary>
            Lock a link asynchronously.
            Prevents a post from receiving new comments.
            See also: /api/unlock.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.MarkNSFW(System.String)">
            <summary>
            Mark a link NSFW.
            See also: /api/unmarknsfw.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.MarkNSFWAsync(System.String)">
            <summary>
            Mark a link NSFW asynchronously.
            See also: /api/unmarknsfw.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.MoreChildren(Reddit.Inputs.LinksAndComments.LinksAndCommentsMoreChildrenInput)">
            <summary>
            Retrieve additional comments omitted from a base comment tree.
            When a comment tree is rendered, the most relevant comments are selected for display first.
            Remaining comments are stubbed out with "MoreComments" links. 
            This API call is used to retrieve the additional comments represented by those stubs, up to 100 at a time.
            The two core parameters required are link and children. link is the fullname of the link whose comments are being fetched. 
            children is a comma-delimited list of comment ID36s that need to be fetched.
            If id is passed, it should be the ID of the MoreComments object this call is replacing. This is needed only for the HTML UI's purposes and is optional otherwise.
            NOTE: you may only make one request at a time to this API endpoint. Higher concurrency will result in an error being returned.
            If limit_children is True, only return the children requested.
            </summary>
            <param name="linksAndCommentsMoreChildrenInput">A valid LinksAndCommentsMoreChildrenInput instance</param>
            <returns>The requested comments.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Report(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report a link, comment or message.
            Reporting a thing brings it to the attention of the subreddit's moderators.
            Reporting a message sends it to a system for admin review.
            For links and comments, the thing is implicitly hidden as well (see /api/hide for details).
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
            <returns>A return object indicating success.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.ReportAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsReportInput)">
            <summary>
            Report a link, comment or message asynchronously.
            Reporting a thing brings it to the attention of the subreddit's moderators.
            Reporting a message sends it to a system for admin review.
            For links and comments, the thing is implicitly hidden as well (see /api/hide for details).
            </summary>
            <param name="linksAndCommentsReportInput">A valid LinksAndCommentsReportInput instance</param>
            <returns>A return object indicating success.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Save(Reddit.Inputs.LinksAndComments.LinksAndCommentsSaveInput)">
            <summary>
            Save a link or comment.
            Saved things are kept in the user's saved listing for later perusal.
            See also: /api/unsave.
            </summary>
            <param name="linksAndCommentsSaveInput">A valid LinksAndCommentsSaveInput instance</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SaveAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsSaveInput)">
            <summary>
            Save a link or comment asynchronously.
            Saved things are kept in the user's saved listing for later perusal.
            See also: /api/unsave.
            </summary>
            <param name="linksAndCommentsSaveInput">A valid LinksAndCommentsSaveInput instance</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SavedCategories">
            <summary>
            Get a list of categories in which things are currently saved.
            See also: /api/save.
            </summary>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SendReplies(Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput)">
            <summary>
            Enable or disable inbox replies for a link or comment.
            state is a boolean that indicates whether you are enabling or disabling inbox replies - true to enable, false to disable.
            id is the fullname of a thing created by the user.
            </summary>
            <param name="linksAndCommentsStateInput">a valid LinksAndCommentsStateInput instance</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SendRepliesAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput)">
            <summary>
            Enable or disable inbox replies for a link or comment asynchronously.
            state is a boolean that indicates whether you are enabling or disabling inbox replies - true to enable, false to disable.
            id is the fullname of a thing created by the user.
            </summary>
            <param name="linksAndCommentsStateInput">a valid LinksAndCommentsStateInput instance</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SetContestMode(Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput)">
            <summary>
            Set or unset "contest mode" for a link's comments.
            state is a boolean that indicates whether you are enabling or disabling contest mode - true to enable, false to disable.
            </summary>
            <param name="linksAndCommentsStateInput">a valid LinksAndCommentsStateInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SetContestModeAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsStateInput)">
            <summary>
            Set or unset "contest mode" for a link's comments asynchronously.
            state is a boolean that indicates whether you are enabling or disabling contest mode - true to enable, false to disable.
            </summary>
            <param name="linksAndCommentsStateInput">a valid LinksAndCommentsStateInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SetSubredditSticky(Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput)">
            <summary>
            Set or unset a Link as the sticky in its subreddit.
            state is a boolean that indicates whether to sticky or unsticky this post - true to sticky, false to unsticky.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="linksAndCommentsStickyInput">A valid LinksAndCommentsStickyInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SetSubredditStickyAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsStickyInput)">
            <summary>
            Set or unset a Link as the sticky in its subreddit asynchronously.
            state is a boolean that indicates whether to sticky or unsticky this post - true to sticky, false to unsticky.
            The num argument is optional, and only used when stickying a post.
            It allows specifying a particular "slot" to sticky the post into, and if there is already a post stickied in that slot it will be replaced.
            If there is no post in the specified slot to replace, or num is None, the bottom-most slot will be used.
            </summary>
            <param name="linksAndCommentsStickyInput">A valid LinksAndCommentsStickyInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Reddit.Models.LinksAndComments.SetSuggestedSort(Reddit.Inputs.LinksAndComments.LinksAndCommentsSuggestedSortInput)" -->
        <!-- Badly formed XML comment ignored for member "M:Reddit.Models.LinksAndComments.SetSuggestedSortAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsSuggestedSortInput)" -->
        <member name="M:Reddit.Models.LinksAndComments.Spoiler(System.String)">
            <summary>
            Spoiler.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SpoilerAsync(System.String)">
            <summary>
            Asynchronous spoiler.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.StoreVisits(System.String)">
            <summary>
            *Requires a subscription to [reddit premium]
            </summary>
            <param name="links">A comma-separated list of link fullnames</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Submit(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit a link to a subreddit.
            Submit will create a link or self-post in the subreddit sr with the title title.
            If kind is "link", then url is expected to be a valid URL to link to.
            Otherwise, text, if present, will be the body of the self-post unless richtext_json is present, in which case it will be converted into the body of the self-post.
            An error is thrown if both text and richtext_json are present.
            If a link with the same URL has already been submitted to the specified subreddit an error will be returned unless resubmit is true.
            extension is used for determining which view-type (e.g.json, compact etc.) to use for the redirect that is generated if the resubmit error occurs.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <returns>An object containing the id, name, and URL of the newly created post.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.SubmitAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsSubmitInput,System.String)">
            <summary>
            Submit a link to a subreddit asynchronously.
            Submit will create a link or self-post in the subreddit sr with the title title.
            If kind is "link", then url is expected to be a valid URL to link to.
            Otherwise, text, if present, will be the body of the self-post unless richtext_json is present, in which case it will be converted into the body of the self-post.
            An error is thrown if both text and richtext_json are present.
            If a link with the same URL has already been submitted to the specified subreddit an error will be returned unless resubmit is true.
            extension is used for determining which view-type (e.g.json, compact etc.) to use for the redirect that is generated if the resubmit error occurs.
            </summary>
            <param name="linksAndCommentsSubmitInput">A valid LinksAndCommentsSubmitInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <returns>An object containing the id, name, and URL of the newly created post.</returns>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Unhide(System.String)">
            <summary>
            Unhide a link.
            </summary>
            <param name="id">A comma-separated list of link fullnames</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnhideAsync(System.String)">
            <summary>
            Unhide a link asynchronously.
            </summary>
            <param name="id">A comma-separated list of link fullnames</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Unlock(System.String)">
            <summary>
            Unlock a link.
            Allows a post to receive new comments.
            See also: /api/lock.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnlockAsync(System.String)">
            <summary>
            Unlock a link asynchronously.
            Allows a post to receive new comments.
            See also: /api/lock.
            </summary>
            <param name="id">A comma-separated list of link fullnames</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnmarkNSFW(System.String)">
            <summary>
            Remove the NSFW marking from a link.
            See also: /api/marknsfw.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnmarkNSFWAsync(System.String)">
            <summary>
            Remove the NSFW marking from a link asynchronously.
            See also: /api/marknsfw.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Unsave(System.String)">
            <summary>
            Unsave a link or comment.
            This removes the thing from the user's saved listings as well.
            See also: /api/save.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnsaveAsync(System.String)">
            <summary>
            Unsave a link or comment asynchronously.
            This removes the thing from the user's saved listings as well.
            See also: /api/save.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Unspoiler(System.String)">
            <summary>
            Remove spoiler.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.UnspoilerAsync(System.String)">
            <summary>
            Remove spoiler asynchronously.
            </summary>
            <param name="id">fullname of a link</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.Vote(Reddit.Inputs.LinksAndComments.LinksAndCommentsVoteInput)">
            <summary>
            Cast a vote on a thing.
            id should be the fullname of the Link or Comment to vote on.
            dir indicates the direction of the vote. Voting 1 is an upvote, -1 is a downvote, and 0 is equivalent to "un-voting" by clicking again on a highlighted arrow.
            Note: votes must be cast by humans.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the reddit rules for more details on what constitutes vote cheating.
            </summary>
            <param name="linksAndCommentsVoteInput">A valid LinksAndCommentsVoteInput instance</param>
        </member>
        <member name="M:Reddit.Models.LinksAndComments.VoteAsync(Reddit.Inputs.LinksAndComments.LinksAndCommentsVoteInput)">
            <summary>
            Cast a vote on a thing asynchronously.
            id should be the fullname of the Link or Comment to vote on.
            dir indicates the direction of the vote. Voting 1 is an upvote, -1 is a downvote, and 0 is equivalent to "un-voting" by clicking again on a highlighted arrow.
            Note: votes must be cast by humans.
            That is, API clients proxying a human's action one-for-one are OK, but bots deciding how to vote on content or amplifying a human's vote are not.
            See the reddit rules for more details on what constitutes vote cheating.
            </summary>
            <param name="linksAndCommentsVoteInput">A valid LinksAndCommentsVoteInput instance</param>
        </member>
        <member name="M:Reddit.Models.Listings.TrendingSubreddits">
            <summary>
            Return a list of trending subreddits, link to the comment in r/trendingsubreddits, and the comment count of that link.
            </summary>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Best(Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.GetByNames(System.String)">
            <summary>
            Get a listing of links by fullname.
            names is a list of fullnames for links separated by commas or spaces.
            </summary>
            <param name="names">A comma-separated list of link fullnames</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.GetComments(System.String,Reddit.Inputs.Listings.ListingsGetCommentsInput,System.String)">
            <summary>
            Get the comment tree for a given Link article.
            If supplied, comment is the ID36 of a comment in the comment tree for article. 
            This comment will be the (highlighted) focal point of the returned view and context will be the number of parents shown.
            depth is the maximum depth of subtrees in the thread.
            limit is the maximum number of comments to return.
            See also: /api/morechildren and /api/comment.
            </summary>
            <param name="article">ID36 of a link</param>
            <param name="listingsGetCommentsInput">A valid ListingsGetCommentsInput instance</param>
            <param name="subreddit">The subreddit with the article</param>
            <returns>A post and comments tree.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.GetPost(System.String,Reddit.Inputs.Listings.ListingsGetCommentsInput,System.String)">
            <summary>
            Get information on a given link via the comments endpoint.
            </summary>
            <param name="article">ID36 of a link</param>
            <param name="listingsGetCommentsInput">A valid ListingsGetCommentsInput instance</param>
            <param name="subreddit">The subreddit with the article</param>
            <returns>A post and comments tree.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.GetDuplicates(System.String,Reddit.Inputs.Listings.ListingsGetDuplicatesInput)">
            <summary>
            Return a list of other submissions of the same URL
            This endpoint is a listing.
            </summary>
            <param name="article">The base 36 ID of a Link</param>
            <param name="listingsGetDuplicatesInput">A valid ListingsGetDuplicatesInput instance</param>
            <returns>A list of matching posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Hot(Reddit.Inputs.Listings.ListingsHotInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="listingsHotInput">A valid ListingsHotInput instance</param>
            <param name="subreddit">The subreddit with the listing</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.New(Reddit.Inputs.CategorizedSrListingInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <param name="subreddit">The subreddit with the listing</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Random(System.String)">
            <summary>
            The Serendipity button
            </summary>
            <param name="subreddit">The subreddit from which to retrieve the random listing</param>
            <returns>A random listing.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Rising(Reddit.Inputs.CategorizedSrListingInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <param name="subreddit">The subreddit with the listing</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Top(Reddit.Inputs.TimedCatSrListingInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="timedCatSrListingInput">A valid TimedCatSrListingInput instance</param>
            <param name="subreddit">The subreddit with the listing</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="M:Reddit.Models.Listings.Controversial(Reddit.Inputs.TimedCatSrListingInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="timedCatSrListingInput">A valid TimedCatSrListingInput instance</param>
            <param name="subreddit">The subreddit with the listing</param>
            <returns>A list of Reddit posts.</returns>
        </member>
        <member name="T:Reddit.Models.LiveThreads">
            <summary>
            Real-time updates on reddit.
            In addition to the standard reddit API, WebSockets play a huge role in reddit live. Receiving push notification of changes to the thread via websockets is much better than polling the thread repeatedly.
            To connect to the websocket server, fetch /live/thread/about.json and get the websocket_url field. The websocket URL expires after a period of time; if it does, fetch a new one from that endpoint.
            Once connected to the socket, a variety of messages can come in. All messages will be in text frames containing a JSON object with two keys: type and payload. Live threads can send messages with many types:
            update - a new update has been posted in the thread. the payload contains the JSON representation of the update.
            activity - periodic update of the viewer counts for the thread.
            settings - the thread's settings have changed. the payload is an object with each key being a property of the thread (as in about.json) and its new value.
            delete - an update has been deleted (removed from the thread). the payload is the ID of the deleted update.
            strike - an update has been stricken (marked incorrect and crossed out). the payload is the ID of the stricken update.embeds_ready - a previously posted update has been parsed and embedded media 
            is available for it now. the payload contains a liveupdate_id and list of embeds to add to it.
            complete - the thread has been marked complete. no further updates will be sent.
            See /r/live for more information.
            </summary>
        </member>
        <member name="M:Reddit.Models.LiveThreads.GetById(System.String)">
            <summary>
            Get a listing of live events by id.
            </summary>
            <param name="names">a comma-delimited list of live thread fullnames or IDs</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Create(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Create a new live thread.
            Once created, the initial settings can be modified with /api/live/thread/edit and new updates can be posted with /api/live/thread/update.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
            <returns>A response object containing the ID of the newly-created live thread.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.CreateAsync(Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Create a new live thread asynchronously.
            Once created, the initial settings can be modified with /api/live/thread/edit and new updates can be posted with /api/live/thread/update.
            </summary>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
            <returns>A response object containing the ID of the newly-created live thread.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.HappeningNow">
            <summary>
            Get some basic information about the currently featured live thread.
            Returns an empty 204 response for api requests if no thread is currently featured.
            See also: /api/live/thread/about.
            </summary>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.AcceptContributorInvite(System.String)">
            <summary>
            Accept a pending invitation to contribute to the thread.
            See also: /api/live/thread/leave_contributor.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.AcceptContributorInviteAsync(System.String)">
            <summary>
            Accept a pending invitation to contribute to the thread asynchronously.
            See also: /api/live/thread/leave_contributor.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.CloseThread(System.String)">
            <summary>
            Permanently close the thread, disallowing future updates.
            Requires the close permission for this thread.
            Returns forbidden response if the thread has already been closed.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.CloseThreadAsync(System.String)">
            <summary>
            Permanently close the thread asynchronously, disallowing future updates.
            Requires the close permission for this thread.
            Returns forbidden response if the thread has already been closed.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.DeleteUpdate(System.String,System.String)">
            <summary>
            Delete an update from the thread.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="id">the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.DeleteUpdateAsync(System.String,System.String)">
            <summary>
            Delete an update from the thread asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="id">the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.DeleteUpdate(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Delete an update from the thread.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.DeleteUpdateAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Delete an update from the thread asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Edit(System.String,Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Configure the thread.
            Requires the settings permission for this thread.
            See also: /live/thread/about.json.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.EditAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsConfigInput)">
            <summary>
            Configure the thread asynchronously.
            Requires the settings permission for this thread.
            See also: /live/thread/about.json.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsConfigInput">A valid LiveThreadsConfigInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.HideDiscussion(System.String,System.String)">
            <summary>
            Hide a linked comment thread from the discussions sidebar and listing.
            Requires the discussions permission for this thread.
            See also: /api/live/thread/unhide_discussion.
            </summary>
            <param name="thread">id</param>
            <param name="link">The base 36 ID of a Link</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.InviteContributor(System.String,Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            See also: /api/live/thread/accept_contributor_invite, and /api/live/thread/rm_contributor_invite.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.InviteContributorAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Asynchronously invite another user to contribute to the thread.
            Requires the manage permission for this thread. If the recipient accepts the invite, they will be granted the permissions specified.
            See also: /api/live/thread/accept_contributor_invite, and /api/live/thread/rm_contributor_invite.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.LeaveContributor(System.String)">
            <summary>
            Abdicate contributorship of the thread.
            See also: /api/live/thread/accept_contributor_invite, and /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.LeaveContributorAsync(System.String)">
            <summary>
            Abdicate contributorship of the thread asynchronously.
            See also: /api/live/thread/accept_contributor_invite, and /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Report(System.String,System.String)">
            <summary>
            Report the thread for violating the rules of reddit.
            </summary>
            <param name="thread">id</param>
            <param name="type">one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.ReportAsync(System.String,System.String)">
            <summary>
            Asynchronously report the thread for violating the rules of reddit.
            </summary>
            <param name="thread">id</param>
            <param name="type">one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Report(System.String,Reddit.Inputs.LiveThreads.LiveThreadsReportTypeInput)">
            <summary>
            Report the thread for violating the rules of reddit.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsReportTypeInput">A valid LiveThreadsReportTypeInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.ReportAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsReportTypeInput)">
            <summary>
            Asynchronously report the thread for violating the rules of reddit.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsReportTypeInput">A valid LiveThreadsReportTypeInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributor(System.String,System.String)">
            <summary>
            Revoke another user's contributorship.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="id">fullname of an account</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorAsync(System.String,System.String)">
            <summary>
            Revoke another user's contributorship asynchronously.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="id">fullname of an account</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributor(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Revoke another user's contributorship.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Revoke another user's contributorship asynchronously.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorInvite(System.String,System.String)">
            <summary>
            Revoke an outstanding contributor invite.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="id">fullname of an account</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorInviteAsync(System.String,System.String)">
            <summary>
            Revoke an outstanding contributor invite asynchronously.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="id">fullname of an account</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorInvite(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Revoke an outstanding contributor invite.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.RemoveContributorInviteAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Revoke an outstanding contributor invite asynchronously.
            Requires the manage permission for this thread.
            See also: /api/live/thread/invite_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.SetContributorPermissions(System.String,Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Change a contributor or contributor invite's permissions.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            See also: /api/live/thread/invite_contributor and /api/live/thread/rm_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.SetContributorPermissionsAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsContributorInput)">
            <summary>
            Change a contributor or contributor invite's permissions asynchronously.
            Requires the manage permission for this thread.
            Note that permissions overrides the previous value completely.
            See also: /api/live/thread/invite_contributor and /api/live/thread/rm_contributor.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsContributorInput">A valid LiveThreadsContributorInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.StrikeUpdate(System.String,System.String)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="id">the ID (Name) of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.StrikeUpdateAsync(System.String,System.String)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="id">the ID (Name) of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.StrikeUpdate(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.StrikeUpdateAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsIdInput)">
            <summary>
            Strike (mark incorrect and cross out) the content of an update asynchronously.
            Requires that specified update must have been authored by the user or that you have the edit permission for this thread.
            See also: /api/live/thread/update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsIdInput">A valid LiveThreadsIdInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.UnhideDiscussion(System.String,System.String)">
            <summary>
            Unhide a linked comment thread from the discussions sidebar and listing.
            Requires the discussions permission for this thread.
            See also: /api/live/thread/hide_discussion.
            </summary>
            <param name="thread">id</param>
            <param name="link">The base 36 ID of a Link</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Update(System.String,System.String)">
            <summary>
            Post an update to the thread.
            Requires the update permission for this thread.
            See also: /api/live/thread/strike_update, and /api/live/thread/delete_update.
            </summary>
            <param name="thread">id</param>
            <param name="body">raw markdown text</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.UpdateAsync(System.String,System.String)">
            <summary>
            Post an update to the thread asynchronously.
            Requires the update permission for this thread.
            See also: /api/live/thread/strike_update, and /api/live/thread/delete_update.
            </summary>
            <param name="thread">id</param>
            <param name="body">raw markdown text</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Update(System.String,Reddit.Inputs.LiveThreads.LiveThreadsBodyInput)">
            <summary>
            Post an update to the thread.
            Requires the update permission for this thread.
            See also: /api/live/thread/strike_update, and /api/live/thread/delete_update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsBodyInput">A valid LiveThreadsBodyInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.UpdateAsync(System.String,Reddit.Inputs.LiveThreads.LiveThreadsBodyInput)">
            <summary>
            Post an update to the thread asynchronously.
            Requires the update permission for this thread.
            See also: /api/live/thread/strike_update, and /api/live/thread/delete_update.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsBodyInput">A valid LiveThreadsBodyInput instance</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.GetUpdates(System.String,Reddit.Inputs.LiveThreads.LiveThreadsGetUpdatesInput)">
            <summary>
            Get a list of updates posted in this thread.
            See also: /api/live/thread/update.
            This endpoint is a listing.
            </summary>
            <param name="thread">id</param>
            <param name="liveThreadsGetUpdatesInput">A valid LiveThreadsGetUpdatesInput instance</param>
            <returns>The requested live updates.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.About(System.String)">
            <summary>
            Get some basic information about the live thread.
            See also: /api/live/thread/edit.
            </summary>
            <param name="thread">id</param>
            <returns>The requested live thread.</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Contributors(System.String)">
            <summary>
            Get a list of users that contribute to this thread.
            Note that this includes users who were invited but have not yet accepted.
            See also: /api/live/thread/invite_contributor, and /api/live/thread/rm_contributor.
            </summary>
            <param name="thread">id</param>
            <returns>A list of users (0 => Active contributors, 1 => Invited/pending contributors).</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.Discussions(System.String,Reddit.Inputs.SrListingInput)">
            <summary>
            Get a list of reddit submissions linking to this thread.
            This endpoint is a listing.
            </summary>
            <param name="thread">id</param>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.LiveThreads.GetUpdate(System.String,System.String)">
            <summary>
            Get details about a specific update in a live thread.
            </summary>
            <param name="thread">id</param>
            <param name="updateId">Update Id (not the Name; i.e. without the "LiveUpdate_" prefix)</param>
            <returns>The requested update.</returns>
        </member>
        <member name="M:Reddit.Models.Misc.SavedMediaText(System.String,System.String)">
            <summary>
            Retrieve the advisory text about saving media for relevant media links.
            This endpoint returns a notice for display during the post submission process that is pertinent to media links.
            </summary>
            <param name="url">a valid URL</param>
            <param name="subreddit">A subreddit</param>
            <returns>A Reddit notice message.</returns>
        </member>
        <member name="M:Reddit.Models.Misc.Scopes(System.String)">
            <summary>
            Retrieve descriptions of reddit's OAuth2 scopes.
            If no scopes are given, information on all scopes are returned.
            Invalid scope(s) will result in a 400 error with body that indicates the invalid scope(s).
            </summary>
            <param name="scopes">(optional) An OAuth2 scope string</param>
            <returns>A list of scopes.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.GetLog(Reddit.Inputs.Moderation.ModerationGetLogInput,System.String)">
            <summary>
            Get a list of recent moderation actions.
            Moderator actions taken within a subreddit are logged. This listing is a view of that log with various filters to aid in analyzing the information.
            The optional mod parameter can be a comma-delimited list of moderator names to restrict the results to, or the string a to restrict the results to admin actions taken within the subreddit.
            The type parameter is optional and if sent limits the log entries returned to only those of the type specified.
            This endpoint is a listing.
            </summary>
            <param name="moderationGetLogInput">A valid ModerationGetLogInput instance</param>
            <param name="subreddit">The subreddit being moderated</param>
            <returns>A listing of recent moderation actions.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.ModQueue(Reddit.Inputs.Moderation.ModerationModQueueInput,System.String,System.String)">
            <summary>
            Return a listing of posts relevant to moderators.
            reports: Things that have been reported.
            spam: Things that have been marked as spam or otherwise removed.
            modqueue: Things requiring moderator review, such as reported things and items caught by the spam filter.
            unmoderated: Things that have yet to be approved/removed by a mod.
            edited: Things that have been edited recently.
            Requires the "posts" moderator permission for the subreddit.
            This endpoint is a listing.
            </summary>
            <param name="location">One of (reports, spam, modqueue, unmoderated, edited)</param>
            <param name="moderationModQueueInput">A valid ModerationModQueueInput instance</param>
            <param name="subreddit">The subreddit being moderated</param>
            <returns>A listing of posts relevant to moderators.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.AcceptModeratorInvite(System.String)">
            <summary>
            Accept an invite to moderate the specified subreddit.
            The authenticated user must have been invited to moderate the subreddit by one of its current moderators.
            See also: /api/friend and /subreddits/mine.
            </summary>
            <param name="subreddit">The subreddit being moderated</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.AcceptModeratorInviteAsync(System.String)">
            <summary>
            Asynchronously accept an invite to moderate the specified subreddit.
            The authenticated user must have been invited to moderate the subreddit by one of its current moderators.
            See also: /api/friend and /subreddits/mine.
            </summary>
            <param name="subreddit">The subreddit being moderated</param>
            <returns>A generic response object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.Approve(System.String)">
            <summary>
            Approve a link or comment.
            If the thing was removed, it will be re-inserted into appropriate listings.
            Any reports on the approved thing will be discarded.
            See also: /api/remove.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.ApproveAsync(System.String)">
            <summary>
            Approve a link or comment asynchronously.
            If the thing was removed, it will be re-inserted into appropriate listings.
            Any reports on the approved thing will be discarded.
            See also: /api/remove.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.Distinguish``1(Reddit.Inputs.Moderation.ModerationDistinguishInput)">
            <summary>
            Distinguish a thing's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link or comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="moderationDistinguishInput">A valid ModerationDistinguishInput instance</param>
            <returns>The distinguished post or comment object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.DistinguishAsync``1(Reddit.Inputs.Moderation.ModerationDistinguishInput)">
            <summary>
            Distinguish a thing's author with a sigil asynchronously.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link or comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="moderationDistinguishInput">A valid ModerationDistinguishInput instance</param>
            <returns>The distinguished post or comment object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.DistinguishPost(System.String,System.String)">
            <summary>
            Distinguish a post's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="id">fullname of a thing</param>
            <returns>The distinguished post object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.DistinguishPostAsync(System.String,System.String)">
            <summary>
            Distinguish a post's author with a sigil asynchronously.
            This can be useful to draw attention to and confirm the identity of the user in the context of a link of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish. depends on user.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="id">fullname of a thing</param>
            <returns>The distinguished post object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.DistinguishComment(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Distinguish a comment's author with a sigil.
            This can be useful to draw attention to and confirm the identity of the user in the context of a comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish.depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="id">fullname of a thing</param>
            <param name="sticky">boolean value</param>
            <returns>The distinguished comment object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.DistinguishCommentAsync(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Distinguish a comment's author with a sigil asynchronously.
            This can be useful to draw attention to and confirm the identity of the user in the context of a comment of theirs.
            The options for distinguish are as follows:
            yes - add a moderator distinguish([M]). only if the user is a moderator of the subreddit the thing is in.
            no - remove any distinguishes.
            admin - add an admin distinguish([A]). admin accounts only.
            special - add a user-specific distinguish.depends on user.
            The first time a top-level comment is moderator distinguished, the author of the link the comment is in reply to will get a notification in their inbox.
            sticky is a boolean flag for comments, which will stick the distingushed comment to the top of all comments threads.
            If a comment is marked sticky, it will override any other stickied comment for that link (as only one comment may be stickied at a time). Only top-level comments may be stickied.
            </summary>
            <param name="how">one of (yes, no, admin, special)</param>
            <param name="id">fullname of a thing</param>
            <param name="sticky">boolean value</param>
            <returns>The distinguished comment object.</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.IgnoreReports(System.String)">
            <summary>
            Prevent future reports on a thing from causing notifications.
            Any reports made about a thing after this flag is set on it will not cause notifications or make the thing show up in the various moderation listings.
            See also: /api/unignore_reports.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.IgnoreReportsAsync(System.String)">
            <summary>
            Asynchronously future reports on a thing from causing notifications.
            Any reports made about a thing after this flag is set on it will not cause notifications or make the thing show up in the various moderation listings.
            See also: /api/unignore_reports.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.LeaveContributor(System.String)">
            <summary>
            Abdicate approved submitter status in a subreddit.
            See also: /api/friend.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.LeaveContributorAsync(System.String)">
            <summary>
            Abdicate approved submitter status in a subreddit asynchronously.
            See also: /api/friend.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.LeaveModerator(System.String,System.String)">
            <summary>
            Abdicate moderator status in a subreddit.
            See also: /api/friend.
            </summary>
            <param name="fullname">fullname of the abdicating user</param>
            <param name="subreddit">The name of the subreddit being abdicated</param>
        </member>
        <member name="M:Reddit.Models.Moderation.LeaveModeratorAsync(System.String,System.String)">
            <summary>
            Abdicate moderator status in a subreddit asynchronously.
            See also: /api/friend.
            </summary>
            <param name="fullname">fullname of the abdicating user</param>
            <param name="subreddit">The name of the subreddit being abdicated</param>
        </member>
        <member name="M:Reddit.Models.Moderation.MuteMessageAuthor(System.String)">
            <summary>
            For muting user via modmail.
            </summary>
            <param name="id">fullname of a thing</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.Remove(Reddit.Inputs.Moderation.ModerationRemoveInput)">
            <summary>
            Remove a link, comment, or modmail message.
            If the thing is a link, it will be removed from all subreddit listings. If the thing is a comment, it will be redacted and removed from all subreddit comment listings.
            See also: /api/approve.
            </summary>
            <param name="moderationRemoveInput">A valid ModerationRemoveInput instance</param>
        </member>
        <member name="M:Reddit.Models.Moderation.RemoveAsync(Reddit.Inputs.Moderation.ModerationRemoveInput)">
            <summary>
            Remove a link, comment, or modmail message asynchronously.
            If the thing is a link, it will be removed from all subreddit listings. If the thing is a comment, it will be redacted and removed from all subreddit comment listings.
            See also: /api/approve.
            </summary>
            <param name="moderationRemoveInput">A valid ModerationRemoveInput instance</param>
        </member>
        <member name="M:Reddit.Models.Moderation.UnignoreReports(System.String)">
            <summary>
            Allow future reports on a thing to cause notifications.
            See also: /api/ignore_reports.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.UnignoreReportsAsync(System.String)">
            <summary>
            Asynchronously allow future reports on a thing to cause notifications.
            See also: /api/ignore_reports.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.Moderation.UnmuteMessageAuthor(System.String)">
            <summary>
            For unmuting user via modmail.
            </summary>
            <param name="id">fullname of a thing</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Moderation.Stylesheet(System.String)">
            <summary>
            Redirect to the subreddit's stylesheet if one exists.
            See also: /api/subreddit_stylesheet.
            </summary>
            <param name="subreddit">The subreddit being moderated</param>
            <returns>The subreddit's CSS.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.BulkRead(Reddit.Inputs.Modmail.ModmailBulkReadInput)">
            <summary>
            Marks all conversations read for a particular conversation state within the passed list of subreddits.
            </summary>
            <param name="modmailBulkReadInput">A valid ModmailBulkReadInput instance</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.GetConversations(Reddit.Inputs.Modmail.ModmailGetConversationsInput)">
            <summary>
            Get conversations for a logged in user or subreddits.
            </summary>
            <param name="modmailGetConversationsInput">A valid ModmailGetConversationsInput instance</param>
            <returns>The requested conversations.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.NewConversation(Reddit.Inputs.Modmail.ModmailNewConversationInput)">
            <summary>
            Creates a new conversation for a particular SR.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="modmailNewConversationInput">A valid ModmailNewConversationInput instance</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.NewConversationAsync(Reddit.Inputs.Modmail.ModmailNewConversationInput)">
            <summary>
            Creates a new conversation for a particular SR asynchronously.
            This endpoint will create a ModmailConversation object as well as the first ModmailMessage within the ModmailConversation object.
            </summary>
            <param name="modmailNewConversationInput">A valid ModmailNewConversationInput instance</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.GetConversation(System.String,System.Boolean)">
            <summary>
            Returns all messages, mod actions and conversation metadata for a given conversation id.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="markRead">boolean value</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.NewMessage(System.String,Reddit.Inputs.Modmail.ModmailNewMessageInput)">
            <summary>
            Creates a new message for a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="modmailNewMessageInput">A valid ModmailNewMessageInput instance</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.NewMessageAsync(System.String,Reddit.Inputs.Modmail.ModmailNewMessageInput)">
            <summary>
            Creates a new message for a particular conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <param name="modmailNewMessageInput">A valid ModmailNewMessageInput instance</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.ArchiveConversation(System.String)">
            <summary>
            Marks a conversation as archived.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.RemoveHighlight(System.String)">
            <summary>
            Removes a highlight from a conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.RemoveHighlightAsync(System.String)">
            <summary>
            Removes a highlight from a conversation asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkHighlighted(System.String)">
            <summary>
            Marks a conversation as highlighted.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkHighlightedAsync(System.String)">
            <summary>
            Marks a conversation as highlighted asynchronously.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.Mute(System.String)">
            <summary>
            Mutes the non-mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.MuteAsync(System.String)">
            <summary>
            Asynchronously mutes the non-mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.UnarchiveConversation(System.String)">
            <summary>
            Marks conversation as unarchived.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.UnMute(System.String)">
            <summary>
            Unmutes the non mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.UnMuteAsync(System.String)">
            <summary>
            Asynchronously unmutes the non mod user associated with a particular conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the conversation data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.User(System.String)">
            <summary>
            Returns recent posts, comments and modmail conversations for the user that started this conversation.
            </summary>
            <param name="conversationId">base36 modmail conversation id</param>
            <returns>An object containing the user data.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkRead(System.String)">
            <summary>
            Marks conversations as read for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkReadAsync(System.String)">
            <summary>
            Asynchronously marks conversations as read for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.Modmail.Subreddits">
            <summary>
            Returns a list of srs that the user moderates that are also enrolled in the new modmail.
            </summary>
            <returns>A list of subreddits.</returns>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkUnread(System.String)">
            <summary>
            Marks conversations as unread for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.Modmail.MarkUnreadAsync(System.String)">
            <summary>
            Asynchronously marks conversations as unread for the user.
            </summary>
            <param name="conversationIds">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.Modmail.UnreadCount">
            <summary>
            Endpoint to retrieve the unread conversation count by conversation state.
            </summary>
            <returns>An object with the int properties: highlighted, notifications, archived, new, inprogress, and mod.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Copy(Reddit.Inputs.Multis.MultiURLInput)">
            <summary>
            Copy a multi.
            Responds with 409 Conflict if the target already exists.
            A "copied from ..." line will automatically be appended to the description.
            </summary>
            <param name="multiURLInput">A valid MultiURLInput instance</param>
            <returns>An object containing the multireddit data.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Mine(System.Boolean)">
            <summary>
            Fetch a list of multis belonging to the current user.
            </summary>
            <param name="expandSrs">boolean value</param>
            <returns>A list of multis.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.User(System.String,System.Boolean)">
            <summary>
            Fetch a list of public multis belonging to username.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="expandSrs">boolean value</param>
            <returns>A list of multis.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Delete(System.String,System.Boolean)">
            <summary>
            Delete a multi.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="expandSrs">boolean value</param>
        </member>
        <member name="M:Reddit.Models.Multis.DeleteFilter(System.String,System.Boolean)">
            <summary>
            Delete a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="expandSrs">boolean value</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Get(System.String,System.Boolean)">
            <summary>
            Fetch a multi's data and subreddit list by name.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="expandSrs">boolean value</param>
            <returns>A LabeledMultiContainer.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.GetFilter(System.String,System.Boolean)">
            <summary>
            Get a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="expandSrs">boolean value</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Create(System.String,Reddit.Things.LabeledMultiSubmit,System.Boolean)">
            <summary>
            Create a multi. Responds with 409 Conflict if it already exists.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="model">json data:
            {
            "description_md": raw markdown text,
            "display_name": a string no longer than 50 characters,
            "icon_name": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, 
            `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, 
            `None`),
            "key_color": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "subreddits": [
            {
            "name": subreddit name,
            },
            ...
            ],
            "visibility": one of (`private`, `public`, `hidden`),
            "weighting_scheme": one of(`classic`, `fresh`),
            }</param>
            <param name="expandSrs">boolean value</param>
            <returns>An object containing the multireddit data.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.CreateFilter(System.String,System.String,System.Boolean)">
            <summary>
            Create a filter. Responds with 409 Conflict if it already exists.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="model">json data:
            {
            "description_md": raw markdown text,
            "display_name": a string no longer than 50 characters,
            "icon_name": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, 
            `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, 
            `None`),
            "key_color": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "subreddits": [
            {
            "name": subreddit name,
            },
            ...
            ],
            "visibility": one of (`private`, `public`, `hidden`),
            "weighting_scheme": one of(`classic`, `fresh`),
            }</param>
            <param name="expandSrs">boolean value</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.Update(System.String,Reddit.Things.LabeledMultiSubmit,System.Boolean)">
            <summary>
            Create or update a multi.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="model">json data:
            {
            "description_md": raw markdown text,
            "display_name": a string no longer than 50 characters,
            "icon_name": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, 
            `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, 
            `None`),
            "key_color": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "subreddits": [
            {
            "name": subreddit name,
            },
            ...
            ],
            "visibility": one of (`private`, `public`, `hidden`),
            "weighting_scheme": one of(`classic`, `fresh`),
            }</param>
            <param name="expandSrs">boolean value</param>
            <returns>An object containing the multireddit data.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.UpdateFilter(System.String,System.String,System.Boolean)">
            <summary>
            Create or update a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="model">json data:
            {
            "description_md": raw markdown text,
            "display_name": a string no longer than 50 characters,
            "icon_name": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, 
            `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, 
            `None`),
            "key_color": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "subreddits": [
            {
            "name": subreddit name,
            },
            ...
            ],
            "visibility": one of (`private`, `public`, `hidden`),
            "weighting_scheme": one of(`classic`, `fresh`),
            }</param>
            <param name="expandSrs">boolean value</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.GetDescription(System.String)">
            <summary>
            Get a multi's description.
            </summary>
            <param name="multipath">multireddit url path</param>
            <returns>An object containing a description.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.UpdateDescription(System.String,System.String)">
            <summary>
            Change a multi's markdown description.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="description">The new description markdown text</param>
            <returns>An object containing a description.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.DeleteMultiSub(System.String,System.String)">
            <summary>
            Remove a subreddit from a multi.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="srName">subreddit name</param>
        </member>
        <member name="M:Reddit.Models.Multis.DeleteFilterSub(System.String,System.String)">
            <summary>
            Remove a subreddit from a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="srName">subreddit name</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.GetMultiSub(System.String,System.String)">
            <summary>
            Get data about a subreddit in a multi.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="srName">subreddit name</param>
            <returns>An object containing the subreddit name.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.GetFilterSub(System.String,System.String)">
            <summary>
            Get data about a subreddit in a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="srName">subreddit name</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Multis.AddMultiSub(System.String,System.String)">
            <summary>
            Add a subreddit to a multi.
            </summary>
            <param name="multipath">multireddit url path</param>
            <param name="srName">subreddit name</param>
            <returns>An object containing the name of the added subreddit.</returns>
        </member>
        <member name="M:Reddit.Models.Multis.AddFilterSub(System.String,System.String,System.String)">
            <summary>
            Add a subreddit to a filter.
            </summary>
            <param name="filterpath">filter url path</param>
            <param name="srName">subreddit name</param>
            <param name="model">json data:
            {
            "name": subreddit name,
            }</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="T:Reddit.Models.OAuthCredentials">
            <summary>
            Makes the Reddit OAuth credentials accessible to the calling app.
            Aside from populating these values for that reason, this class is not used by the library, itself.
            Each model class stores these credentials internally.
            </summary>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.Block(System.String)">
            <summary>
            For blocking the author of a thing via inbox.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.BlockAsync(System.String)">
            <summary>
            For asynchronously blocking the author of a thing via inbox.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.CollapseMessage(System.String)">
            <summary>
            Collapse a message.
            See also: /api/uncollapse_message
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.CollapseMessageAsync(System.String)">
            <summary>
            Collapse a message asynchronously.
            See also: /api/uncollapse_message
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.Compose(Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput,System.String)">
            <summary>
            Handles message composition under /message/compose.
            </summary>
            <param name="privateMessagesComposeInput">A valid PrivateMessagesComposeInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <returns>A generic response object containing any errors.</returns>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.ComposeAsync(Reddit.Inputs.PrivateMessages.PrivateMessagesComposeInput,System.String)">
            <summary>
            Handles message composition asynchronously under /message/compose.
            </summary>
            <param name="privateMessagesComposeInput">A valid PrivateMessagesComposeInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <returns>A generic response object containing any errors.</returns>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.DelMsg(System.String)">
            <summary>
            Delete messages from the recipient's view of their inbox.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.DelMsgAsync(System.String)">
            <summary>
            Delete messages from the recipient's view of their inbox asynchronously.
            </summary>
            <param name="id">fullname of a thing</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.ReadAllMessages(System.String)">
            <summary>
            Queue up marking all messages for a user as read.
            This may take some time, and returns 202 to acknowledge acceptance of the request.
            </summary>
            <param name="filterTypes">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.ReadAllMessagesAsync(System.String)">
            <summary>
            Asynchronously queue up marking all messages for a user as read.
            This may take some time, and returns 202 to acknowledge acceptance of the request.
            </summary>
            <param name="filterTypes">A comma-separated list of items</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.ReadMessage(System.String)">
            <summary>
            Mark a message as read.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.ReadMessageAsync(System.String)">
            <summary>
            Mark a message as read asynchronously.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.UnblockSubreddit(System.String)">
            <summary>
            Unblock a subreddit.
            </summary>
            <param name="id">fullname of a thing</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.UncollapseMessage(System.String)">
            <summary>
            Uncollapse a message.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.UncollapseMessageAsync(System.String)">
            <summary>
            Uncollapse a message asynchronously.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.UnreadMessage(System.String)">
            <summary>
            Mark a message as unread.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.UnreadMessageAsync(System.String)">
            <summary>
            Mark a message as unread asynchronously.
            </summary>
            <param name="id">A comma-separated list of thing fullnames</param>
        </member>
        <member name="M:Reddit.Models.PrivateMessages.GetMessages(System.String,Reddit.Inputs.PrivateMessages.PrivateMessagesGetMessagesInput)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="where">One of (inbox, unread, sent)</param>
            <param name="privateMessagesGetMessagesInput">A valid PrivateMessagesGetMessagesInput instance</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:Reddit.Models.RedditGold.Gild(System.String)">
            <summary>
            Gild.
            </summary>
            <param name="fullname">fullname of a thing</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.RedditGold.Give(System.String,System.Int32)">
            <summary>
            Give Reddit gold to the specified user.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="months">an integer between 1 and 36</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Search.GetSearch``1(Reddit.Inputs.Search.SearchGetSearchInput,System.String)">
            <summary>
            Search links page.
            This endpoint is a listing.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <param name="subreddit">The subreddit being searched</param>
            <returns>A listing of things that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Models.Search.SearchSubreddits(Reddit.Inputs.Search.SearchGetSearchInput,System.String)">
            <summary>
            Search Reddit and return the results as subreddit listings.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <param name="subreddit">The subreddit being searched</param>
            <returns>A listing of subreddits that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Models.Search.SearchPosts(Reddit.Inputs.Search.SearchGetSearchInput,System.String)">
            <summary>
            Search Reddit and return the results as post listings.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <param name="subreddit">The subreddit being searched</param>
            <returns>A listing of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Models.Search.SearchUsers(Reddit.Inputs.Search.SearchGetSearchInput,System.String)">
            <summary>
            Search Reddit and return the results as user listings.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <param name="subreddit">The subreddit being searched</param>
            <returns>A listing of users that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Models.Search.MultiSearch(Reddit.Inputs.Search.SearchGetSearchInput,System.String)">
            <summary>
            Search Reddit and return the results as mixed listings.
            Use this method if you're specifying multiple values for the "type" parameter.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <param name="subreddit">The subreddit being searched</param>
            <returns>A listing of things that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.About(System.String,Reddit.Inputs.Subreddits.SubredditsAboutInput,System.String)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="where">One of (banned, muted, wikibanned, contributors, wikicontributors, moderators)</param>
            <param name="subredditsAboutInput">A valid SubredditsAboutInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.About(System.String)">
            <summary>
            Return information about the subreddit.
            Data includes the subscriber count, description, and header image.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>A subreddit listing.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrBanner(System.String)">
            <summary>
            Remove the subreddit's custom mobile banner.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrBannerAsync(System.String)">
            <summary>
            Remove the subreddit's custom mobile banner asynchronously.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrHeader(System.String)">
            <summary>
            Remove the subreddit's custom header image.
            The sitewide-default header image will be shown again after this call.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrHeaderAsync(System.String)">
            <summary>
            Remove the subreddit's custom header image asynchronously.
            The sitewide-default header image will be shown again after this call.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrIcon(System.String)">
            <summary>
            Remove the subreddit's custom mobile icon.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrIconAsync(System.String)">
            <summary>
            Remove the subreddit's custom mobile icon asynchronously.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrImg(Reddit.Inputs.Subreddits.SubredditsDeleteSrImgInput,System.String)">
            <summary>
            Remove an image from the subreddit's custom image set.
            The image will no longer count against the subreddit's image limit. However, the actual image data may still be accessible for an unspecified amount of time. 
            If the image is currently referenced by the subreddit's stylesheet, that stylesheet will no longer validate and won't be editable until the image reference is removed.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subredditsDeleteSrImgInput">A valid SubredditsDeleteSrImgInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.DeleteSrImgAsync(Reddit.Inputs.Subreddits.SubredditsDeleteSrImgInput,System.String)">
            <summary>
            Remove an image from the subreddit's custom image set asynchronously.
            The image will no longer count against the subreddit's image limit. However, the actual image data may still be accessible for an unspecified amount of time. 
            If the image is currently referenced by the subreddit's stylesheet, that stylesheet will no longer validate and won't be editable until the image reference is removed.
            See also: /api/upload_sr_img.
            </summary>
            <param name="subredditsDeleteSrImgInput">A valid SubredditsDeleteSrImgInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Recommended(System.String,Reddit.Inputs.Subreddits.SubredditsRecommendInput)">
            <summary>
            Return subreddits recommended for the given subreddit(s).
            Gets a list of subreddits recommended for srnames, filtering out any that appear in the optional omit param.
            </summary>
            <param name="srNames">comma-delimited list of subreddit names</param>
            <param name="omit">comma-delimited list of subreddit names</param>
            <param name="over18">boolean value</param>
            <returns>A list of subreddits.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SearchRedditNames(Reddit.Inputs.Subreddits.SubredditsSearchNamesInput)">
            <summary>
            List subreddit names that begin with a query string.
            </summary>
            <param name="subredditsSearchInput">A valid SubredditsSearchInput instance</param>
            <returns>A list of subreddit names.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SearchSubreddits(Reddit.Inputs.Subreddits.SubredditsSearchNamesInput)">
            <summary>
            List subreddits that begin with a query string.
            </summary>
            <param name="subredditsSearchInput">A valid SubredditsSearchInput instance</param>
            <returns>A list of subreddit listings.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SiteAdmin(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create or configure a subreddit.  Null values are ignored.
            If sr is specified, the request will attempt to modify the specified subreddit. If not, a subreddit with name name will be created.
            This endpoint expects all values to be supplied on every request. If modifying a subset of options, it may be useful to get the current settings from /about/edit.json first.
            For backwards compatibility, description is the sidebar text and public_description is the publicly visible subreddit description.
            Most of the parameters for this endpoint are identical to options visible in the user interface and their meanings are best explained there.
            See also: /about/edit.json.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle">a string no longer than 500 characters</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SiteAdminAsync(Reddit.Inputs.Subreddits.SubredditsSiteAdminInput,System.String,System.String)">
            <summary>
            Create or configure a subreddit asynchronously.  Null values are ignored.
            If sr is specified, the request will attempt to modify the specified subreddit. If not, a subreddit with name name will be created.
            This endpoint expects all values to be supplied on every request. If modifying a subset of options, it may be useful to get the current settings from /about/edit.json first.
            For backwards compatibility, description is the sidebar text and public_description is the publicly visible subreddit description.
            Most of the parameters for this endpoint are identical to options visible in the user interface and their meanings are best explained there.
            See also: /about/edit.json.
            </summary>
            <param name="subredditsSiteAdminInput">A valid SubredditsSiteAdminInput instance</param>
            <param name="gRecaptchaResponse"></param>
            <param name="headerTitle">a string no longer than 500 characters</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SiteAdmin(Reddit.Things.Subreddit,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create or configure a subreddit.
            If sr is specified, the request will attempt to modify the specified subreddit. If not, a subreddit with name name will be created.
            This endpoint expects all values to be supplied on every request. If modifying a subset of options, it may be useful to get the current settings from /about/edit.json first.
            For backwards compatibility, description is the sidebar text and public_description is the publicly visible subreddit description.
            Most of the parameters for this endpoint are identical to options visible in the user interface and their meanings are best explained there.
            See also: /about/edit.json.
            </summary>
            <param name="subreddit">A valid subreddit object.</param>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="sr">fullname of a thing</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SiteAdminAsync(Reddit.Things.Subreddit,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create or configure a subreddit asynchronously.
            If sr is specified, the request will attempt to modify the specified subreddit. If not, a subreddit with name name will be created.
            This endpoint expects all values to be supplied on every request. If modifying a subset of options, it may be useful to get the current settings from /about/edit.json first.
            For backwards compatibility, description is the sidebar text and public_description is the publicly visible subreddit description.
            Most of the parameters for this endpoint are identical to options visible in the user interface and their meanings are best explained there.
            See also: /about/edit.json.
            </summary>
            <param name="subreddit">A valid subreddit object.</param>
            <param name="allowPostCrossposts">boolean value</param>
            <param name="allowTop">boolean value</param>
            <param name="excludeBannedModqueue">boolean value</param>
            <param name="freeFormReports">boolean value</param>
            <param name="gRecaptchaResponse"></param>
            <param name="linkType">one of (any, link, self)</param>
            <param name="spamComments">one of (low, high, all)</param>
            <param name="spamLinks">one of (low, high, all)</param>
            <param name="spamSelfPosts">one of (low, high, all)</param>
            <param name="sr">fullname of a thing</param>
            <param name="themeSr">subreddit name</param>
            <param name="themeSrUpdate">boolean value</param>
            <param name="wikiMode">one of (disabled, modonly, anyone)</param>
            <param name="wikiEditAge">an integer between 0 and 36600 (default: 0)</param>
            <param name="wikiEditKarma">an integer between 0 and 1000000000 (default: 0)</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubmitText(System.String)">
            <summary>
            Get the submission text for the subreddit.
            This text is set by the subreddit moderators and intended to be displayed on the submission form.
            See also: /api/site_admin.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object containing submission text.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubredditAutocomplete(Reddit.Inputs.Subreddits.SubredditsAutocompleteInput)">
            <summary>
            Return a list of subreddits and data for subreddits whose names start with 'query'.
            Uses typeahead endpoint to recieve the list of subreddits names. 
            Typeahead provides exact matches, typo correction, fuzzy matching and boosts subreddits to the top that the user is subscribed to.
            </summary>
            <param name="subredditsAutocompleteInput">A valid SubredditsAutocompleteInput instance</param>
            <returns>Matching subreddits.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubredditAutocompleteV2(Reddit.Inputs.Subreddits.SubredditsAutocompleteV2Input)">
            <summary>
            Version 2 of SubredditAutocomplete.
            </summary>
            <param name="subredditsAutocompleteV2Input">A valid SubredditsAutocompleteV2Input instance</param>
            <returns>Matching subreddits.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubredditStylesheet(Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput,System.String)">
            <summary>
            Update a subreddit's stylesheet.
            op should be save to update the contents of the stylesheet.
            </summary>
            <param name="subredditsSubredditStylesheetInput">A valid SubredditsSubredditStylesheetInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubredditStylesheetAsync(Reddit.Inputs.Subreddits.SubredditsSubredditStylesheetInput,System.String)">
            <summary>
            Update a subreddit's stylesheet asynchronously.
            op should be save to update the contents of the stylesheet.
            </summary>
            <param name="subredditsSubredditStylesheetInput">A valid SubredditsSubredditStylesheetInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubscribeByFullname(Reddit.Inputs.Subreddits.SubredditsSubByFullnameInput)">
            <summary>
            Subscribe to or unsubscribe from a subreddit.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            See also: /subreddits/mine/.
            </summary>
            <param name="subredditsSubByFullnameInput">A valid SubredditsSubByFullnameInput instance</param>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubscribeByFullnameAsync(Reddit.Inputs.Subreddits.SubredditsSubByFullnameInput)">
            <summary>
            Subscribe to or unsubscribe from a subreddit asynchronously.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            See also: /subreddits/mine/.
            </summary>
            <param name="subredditsSubByFullnameInput">A valid SubredditsSubByFullnameInput instance</param>
        </member>
        <member name="M:Reddit.Models.Subreddits.Subscribe(Reddit.Inputs.Subreddits.SubredditsSubByNameInput)">
            <summary>
            Subscribe to or unsubscribe from a subreddit.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            See also: /subreddits/mine/.
            </summary>
            <param name="subredditsSubByNameInput">A valid SubredditsSubByNameInput instance</param>
        </member>
        <member name="M:Reddit.Models.Subreddits.SubscribeAsync(Reddit.Inputs.Subreddits.SubredditsSubByNameInput)">
            <summary>
            Subscribe to or unsubscribe from a subreddit asynchronously.
            To subscribe, action should be sub.  To unsubscribe, action should be unsub.The user must have access to the subreddit to be able to subscribe to it.
            The skip_initial_defaults param can be set to True to prevent automatically subscribing the user to the current set of defaults when they take their first subscription action.
            Attempting to set it for an unsubscribe action will result in an error.
            See also: /subreddits/mine/.
            </summary>
            <param name="subredditsSubByNameInput">A valid SubredditsSubByNameInput instance</param>
        </member>
        <member name="M:Reddit.Models.Subreddits.UploadSrImg(Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput,System.String)">
            <summary>
            Add or replace a subreddit image, custom header logo, custom mobile icon, or custom mobile banner.
            If the upload_type value is img, an image for use in the subreddit stylesheet is uploaded with the name specified in name.
            If the upload_type value is header then the image uploaded will be the subreddit's new logo and name will be ignored.
            If the upload_type value is icon then the image uploaded will be the subreddit's new mobile icon and name will be ignored.
            If the upload_type value is banner then the image uploaded will be the subreddit's new mobile banner and name will be ignored.
            For backwards compatibility, if upload_type is not specified, the header field will be used instead:
            If the header field has value 0, then upload_type is img.
            If the header field has value 1, then upload_type is header.
            The img_type field specifies whether to store the uploaded image as a PNG or JPEG.
            Subreddits have a limited number of images that can be in use at any given time. If no image with the specified name already exists, one of the slots will be consumed
            If an image with the specified name already exists, it will be replaced. This does not affect the stylesheet immediately, but will take effect the next time the stylesheet is saved.
            See also: /api/delete_sr_img, /api/delete_sr_header, /api/delete_sr_icon, and /api/delete_sr_banner.
            </summary>
            <param name="subredditsUploadSrImgInput">A valid SubredditsUploadSrImgInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.UploadSrImgAsync(Reddit.Inputs.Subreddits.SubredditsUploadSrImgInput,System.String)">
            <summary>
            Add or replace a subreddit image, custom header logo, custom mobile icon, or custom mobile banner asynchronously.
            If the upload_type value is img, an image for use in the subreddit stylesheet is uploaded with the name specified in name.
            If the upload_type value is header then the image uploaded will be the subreddit's new logo and name will be ignored.
            If the upload_type value is icon then the image uploaded will be the subreddit's new mobile icon and name will be ignored.
            If the upload_type value is banner then the image uploaded will be the subreddit's new mobile banner and name will be ignored.
            For backwards compatibility, if upload_type is not specified, the header field will be used instead:
            If the header field has value 0, then upload_type is img.
            If the header field has value 1, then upload_type is header.
            The img_type field specifies whether to store the uploaded image as a PNG or JPEG.
            Subreddits have a limited number of images that can be in use at any given time. If no image with the specified name already exists, one of the slots will be consumed
            If an image with the specified name already exists, it will be replaced. This does not affect the stylesheet immediately, but will take effect the next time the stylesheet is saved.
            See also: /api/delete_sr_img, /api/delete_sr_header, /api/delete_sr_icon, and /api/delete_sr_banner.
            </summary>
            <param name="subredditsUploadSrImgInput">A valid SubredditsUploadSrImgInput instance</param>
            <param name="subreddit">The subreddit being queried</param>
            <returns>An object containing the resulting image URL and any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.SearchProfiles(Reddit.Inputs.Subreddits.SubredditsSearchProfilesInput)">
            <summary>
            Search user profiles by title and description.
            This endpoint is a listing.
            </summary>
            <param name="subredditsSearchProfilesInput">A valid SubredditsSearchProfilesInput instance</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Edit(System.String,Reddit.Inputs.Subreddits.SubredditsEditInput)">
            <summary>
            Get the current settings of a subreddit.
            This returns the current settings of the subreddit as used by /api/site_admin.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <param name="subredditsEditInput">A valid SubredditsEditInput instance</param>
            <returns>Settings for the requested subreddit.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Rules(System.String)">
            <summary>
            Get the rules for the current subreddit.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>Subreddit rules.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Traffic(System.String)">
            <summary>
            Get subreddit traffic.
            </summary>
            <param name="subreddit">The subreddit being queried</param>
            <returns>Subreddit traffic data.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Mine(System.String,Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            Get subreddits the user has a relationship with.
            The where parameter chooses which subreddits are returned as follows:
            subscriber - subreddits the user is subscribed to
            contributor - subreddits the user is an approved submitter in
            moderator - subreddits the user is a moderator of
            streams - subscribed to subreddits that contain hosted video links
            See also: /api/subscribe, /api/friend, and /api/accept_moderator_invite.
            This endpoint is a listing.
            </summary>
            <param name="where">One of (subscriber, contributor, moderator, streams)</param>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Search(Reddit.Inputs.Subreddits.SubredditsSearchInput)">
            <summary>
            Search subreddits by title and description.
            This endpoint is a listing.
            </summary>
            <param name="subredditsSearchInput">A valid SubredditsSearchInput instance</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Search``1(Reddit.Inputs.Subreddits.SubredditsSearchInput)">
            <summary>
            Search subreddits by title and description.
            This endpoint is a listing.
            </summary>
            <param name="subredditsSearchInput">A valid SubredditsSearchInput instance</param>
            <returns>Results of the specified type.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.Get(System.String,Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            Get all subreddits.
            The where parameter chooses the order in which the subreddits are displayed.
            popular sorts on the activity of the subreddit and the position of the subreddits can shift around.
            new sorts the subreddits based on their creation date, newest first.
            This endpoint is a listing.
            </summary>
            <param name="where">One of (popular, new, gold, default)</param>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Models.Subreddits.GetUserSubreddits(System.String,Reddit.Inputs.CategorizedSrListingInput)">
            <summary>
            Get all user subreddits.
            The where parameter chooses the order in which the subreddits are displayed.
            popular sorts on the activity of the subreddit and the position of the subreddits can shift around.
            new sorts the user subreddits based on their creation date, newest first.
            This endpoint is a listing.
            </summary>
            <param name="where">One of (popular, new)</param>
            <param name="categorizedSrListingInput">A valid CategorizedSrListingInput instance</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.Models.Users.BlockUser(Reddit.Inputs.Users.UsersBlockUserInput)">
            <summary>
            For blocking a user.
            </summary>
            <param name="usersBlockUserInput">A valid UserActionResult input</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Models.Users.BlockUserAsync(Reddit.Inputs.Users.UsersBlockUserInput)">
            <summary>
            For blocking a user asynchronously.
            </summary>
            <param name="usersBlockUserInput">A valid UserActionResult input</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Models.Users.Friend(Reddit.Inputs.Users.UsersFriendInput,System.String)">
            <summary>
            Create a relationship between a user and another user or subreddit.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
            <param name="subreddit">A subreddit</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Users.FriendAsync(Reddit.Inputs.Users.UsersFriendInput,System.String)">
            <summary>
            Create a relationship between a user and another user or subreddit asynchronously.
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: Use "moderator_invite"
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_unfriend
            </summary>
            <param name="usersFriendInput">A valid UsersFriendInput instance</param>
            <param name="subreddit">A subreddit</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Users.ReportUser(Reddit.Inputs.Users.UsersReportUserInput)">
            <summary>
            Report a user. Reporting a user brings it to the attention of a Reddit admin.
            </summary>
            <param name="usersReportUserInput">A valid UsersReportUserInput instance</param>
        </member>
        <member name="M:Reddit.Models.Users.ReportUserAsync(Reddit.Inputs.Users.UsersReportUserInput)">
            <summary>
            Report a user asynchronously. Reporting a user brings it to the attention of a Reddit admin.
            </summary>
            <param name="usersReportUserInput">A valid UsersReportUserInput instance</param>
        </member>
        <member name="M:Reddit.Models.Users.SetPermissions(Reddit.Inputs.Users.UsersSetPermissionsInput,System.String)">
            <summary>
            Set permissions.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
            <param name="subreddit">A subreddit</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Users.SetPermissionsAsync(Reddit.Inputs.Users.UsersSetPermissionsInput,System.String)">
            <summary>
            Set permissions asynchronously.
            </summary>
            <param name="usersSetPermissionsInput">A valid UsersSetPermissionsInput instance</param>
            <param name="subreddit">A subreddit</param>
            <returns>An object indicating any errors.</returns>
        </member>
        <member name="M:Reddit.Models.Users.Unfriend(Reddit.Inputs.Users.UsersUnfriendInput,System.String)">
            <summary>
            Remove a relationship between a user and another user or subreddit.
            The user can either be passed in by name (nuser) or by fullname (iuser).
            If type is friend or enemy, 'container' MUST be the current user's fullname; for other types, the subreddit must be set via URL (e.g., /r/funny/api/unfriend).
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: modothers
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="usersUnfriendInput">A valid UsersUnfriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Models.Users.UnfriendAsync(Reddit.Inputs.Users.UsersUnfriendInput,System.String)">
            <summary>
            Remove a relationship between a user and another user or subreddit asynchronously.
            The user can either be passed in by name (nuser) or by fullname (iuser).
            If type is friend or enemy, 'container' MUST be the current user's fullname; for other types, the subreddit must be set via URL (e.g., /r/funny/api/unfriend).
            OAuth2 use requires appropriate scope based on the 'type' of the relationship:
            moderator: modothers
            moderator_invite: modothers
            contributor: modcontributors
            banned: modcontributors
            muted: modcontributors
            wikibanned: modcontributors and modwiki
            wikicontributor: modcontributors and modwiki
            friend: Use /api/v1/me/friends/{username}
            enemy: Use /api/block
            Complement to POST_friend
            </summary>
            <param name="usersUnfriendInput">A valid UsersUnfriendInput instance</param>
            <param name="subreddit">A subreddit</param>
        </member>
        <member name="M:Reddit.Models.Users.UserDataByAccountIds(System.String)">
            <summary>
            Get user data by account IDs.
            </summary>
            <param name="ids">A comma-separated list of account fullnames</param>
            <returns>A dictionary of user summary objects.</returns>
        </member>
        <member name="M:Reddit.Models.Users.UsernameAvailable(System.String)">
            <summary>
            Check whether a username is available for registration.
            </summary>
            <param name="user">a valid, unused username</param>
            <returns>Boolean or null if error (i.e. invalid username).</returns>
        </member>
        <member name="M:Reddit.Models.Users.DeleteFriend(System.String)">
            <summary>
            Stop being friends with a user.
            </summary>
            <param name="username">A valid, existing reddit username</param>
        </member>
        <member name="M:Reddit.Models.Users.DeleteFriendAsync(System.String)">
            <summary>
            Stop being friends with a user asynchronously.
            </summary>
            <param name="username">A valid, existing reddit username</param>
        </member>
        <member name="M:Reddit.Models.Users.GetFriend(System.String)">
            <summary>
            Get information about a specific 'friend', such as notes.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Models.Users.UpdateFriend(System.String,System.String)">
            <summary>
            Create or update a "friend" relationship.
            This operation is idempotent. It can be used to add a new friend, or update an existing friend (e.g., add/change the note on that friend).
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="json">{
            "name": A valid, existing reddit username
            "note": a string no longer than 300 characters
            }</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Models.Users.UpdateFriendAsync(System.String,System.String)">
            <summary>
            Create or update a "friend" relationship asynchronously.
            This operation is idempotent. It can be used to add a new friend, or update an existing friend (e.g., add/change the note on that friend).
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <param name="json">{
            "name": A valid, existing reddit username
            "note": a string no longer than 300 characters
            }</param>
            <returns>An object containing basic info on the target user and the datetime of this action.</returns>
        </member>
        <member name="M:Reddit.Models.Users.Trophies(System.String)">
            <summary>
            Return a list of trophies for the given user.
            </summary>
            <param name="username">A valid, existing reddit username</param>
            <returns>A list of trophies.</returns>
        </member>
        <member name="M:Reddit.Models.Users.About(System.String)">
            <summary>
            Return information about the user, including karma and gold status.
            </summary>
            <param name="username">the name of an existing user</param>
            <returns>A user listing.</returns>
        </member>
        <member name="M:Reddit.Models.Users.GetUser``1(System.String,System.String,Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            This endpoint is a listing.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="where">One of (overview, submitted, upvotes, downvoted, hidden, saved, gilded, moderated_subreddits)</param>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of objects containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Users.ModeratedSubreddits(System.String,Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Retrieve a list of subreddits that the user moderates.
            This endpoint is a listing.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of objects containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Users.Overview(System.String,Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Get a user's post and comment history.
            This endpoint is a listing.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of objects containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Users.PostHistory(System.String,System.String,Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Get a user's post history.
            This endpoint is a listing.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="where">One of (submitted, upvotes, downvoted, hidden, saved, gilded)</param>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of objects containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Users.CommentHistory(System.String,System.String,Reddit.Inputs.Users.UsersHistoryInput)">
            <summary>
            Get a user's comment history.
            This endpoint is a listing.
            </summary>
            <param name="username">the name of an existing user</param>
            <param name="where">One of (comments, saved, gilded)</param>
            <param name="usersHistoryInput">A valid UsersHistoryInput instance</param>
            <returns>A list of objects containing the requested data.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Add``1(System.String,System.String)">
            <summary>
            Add and return a widget to the specified subreddit.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="json">See https://www.reddit.com/dev/api/#POST_api_widget for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Add(Reddit.Things.WidgetTextArea,System.String)">
            <summary>
            Add and return a widget to the specified subreddit.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetTextArea">See https://www.reddit.com/dev/api/#POST_api_widget for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Add(Reddit.Things.WidgetCalendar,System.String)">
            <summary>
            Add and return a widget to the specified subreddit.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetCalendar">See https://www.reddit.com/dev/api/#POST_api_widget for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Add(Reddit.Things.WidgetCommunityList,System.String)">
            <summary>
            Add and return a widget to the specified subreddit.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetCommunityList">See https://www.reddit.com/dev/api/#POST_api_widget for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Delete(System.String,System.String)">
            <summary>
            Delete a widget from the specified subreddit (if it exists).
            </summary>
            <param name="widgetId">id of an existing widget</param>
            <param name="subreddit">The subreddit with the widgets</param>
        </member>
        <member name="M:Reddit.Models.Widgets.Update``1(System.String,System.String,System.String)">
            <summary>
            Update and return the data of a widget.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetId">a valid widget id</param>
            <param name="json">See https://www.reddit.com/dev/api/#PUT_api_widget_{widget_id} for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Update(System.String,Reddit.Things.WidgetTextArea,System.String)">
            <summary>
            Update and return the data of a widget.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetId">a valid widget id</param>
            <param name="widgetTextArea">See https://www.reddit.com/dev/api/#PUT_api_widget_{widget_id} for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Update(System.String,Reddit.Things.WidgetCalendar,System.String)">
            <summary>
            Update and return the data of a widget.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetId">a valid widget id</param>
            <param name="widgetCalendar">See https://www.reddit.com/dev/api/#PUT_api_widget_{widget_id} for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.Update(System.String,Reddit.Things.WidgetCommunityList,System.String)">
            <summary>
            Update and return the data of a widget.
            Accepts a JSON payload representing the widget data to be saved. Valid payloads differ in shape based on the "kind" attribute passed on the root object, which must be a valid widget kind.
            </summary>
            <param name="widgetId">a valid widget id</param>
            <param name="widgetCommunityList">See https://www.reddit.com/dev/api/#PUT_api_widget_{widget_id} for expected format</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The result payload.</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.WidgetImageUploadS3(System.String,System.String)">
            <summary>
            Acquire and return an upload lease to s3 temp bucket.
            The return value of this function is a json object containing credentials for uploading assets to S3 bucket, S3 url for upload request and the key to use for uploading.
            Using this lease the client will upload the emoji image to S3 temp bucket (included as part of the S3 URL).
            This lease is used by S3 to verify that the upload is authorized.
            </summary>
            <param name="filePath">name and extension of the image file e.g. image1.png</param>
            <param name="mimeType">mime type of the image e.g. image/png</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Widgets.UpdateOrder(System.String,System.String,System.String)">
            <summary>
            Update the order of widget_ids in the specified subreddit.
            </summary>
            <param name="section">one of (sidebar)</param>
            <param name="json">json data:
            [
            a string,
            ...
            ]</param>
            <param name="subreddit">The subreddit with the widgets</param>
        </member>
        <member name="M:Reddit.Models.Widgets.UpdateOrder(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Update the order of widget_ids in the specified subreddit.
            </summary>
            <param name="section">one of (sidebar)</param>
            <param name="widgetIds">a list of widget ids</param>
            <param name="subreddit">The subreddit with the widgets</param>
        </member>
        <member name="M:Reddit.Models.Widgets.Get(System.Boolean,System.String)">
            <summary>
            Return all widgets for the given subreddit.
            </summary>
            <param name="progressiveImages">boolean value</param>
            <param name="subreddit">The subreddit with the widgets</param>
            <returns>The requested widgets.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.AllowEditor(Reddit.Inputs.Wiki.WikiPageEditorInput,System.String)">
            <summary>
            Allow username to edit this wiki page.
            </summary>
            <param name="wikiPageEditorInput">A valid WikiPageEditorInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.AllowEditorAsync(Reddit.Inputs.Wiki.WikiPageEditorInput,System.String)">
            <summary>
            Asynchronously allow username to edit this wiki page.
            </summary>
            <param name="wikiPageEditorInput">A valid WikiPageEditorInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.DenyEditor(Reddit.Inputs.Wiki.WikiPageEditorInput,System.String)">
            <summary>
            Deny username to edit this wiki page.
            </summary>
            <param name="wikiPageEditorInput">A valid WikiPageEditorInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.DenyEditorAsync(Reddit.Inputs.Wiki.WikiPageEditorInput,System.String)">
            <summary>
            Asynchronously deny username to edit this wiki page.
            </summary>
            <param name="wikiPageEditorInput">A valid WikiPageEditorInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.Edit(Reddit.Inputs.Wiki.WikiEditPageInput,System.String)">
            <summary>
            Edit a wiki page.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.EditAsync(Reddit.Inputs.Wiki.WikiEditPageInput,System.String)">
            <summary>
            Edit a wiki page asynchronously.
            </summary>
            <param name="wikiEditPageInput">A valid WikiEditPageInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.Create(Reddit.Inputs.Wiki.WikiCreatePageInput,System.String)">
            <summary>
            Create a wiki page.
            </summary>
            <param name="wikiCreatePageInput">A valid WikiCreatePageInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.CreateAsync(Reddit.Inputs.Wiki.WikiCreatePageInput,System.String)">
            <summary>
            Create a wiki page asynchronously.
            </summary>
            <param name="wikiCreatePageInput">A valid WikiCreatePageInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.Hide(Reddit.Inputs.Wiki.WikiPageRevisionInput,System.String)">
            <summary>
            Toggle the public visibility of a wiki page revision.
            </summary>
            <param name="wikiPageRevisionInput">A valid WikiPageRevisionInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>Status object indicating true if page was hidden, false if page was unhidden.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.HideAsync(Reddit.Inputs.Wiki.WikiPageRevisionInput,System.String)">
            <summary>
            Toggle the public visibility of a wiki page revision asynchronously.
            </summary>
            <param name="wikiPageRevisionInput">A valid WikiPageRevisionInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>Status object indicating true if page was hidden, false if page was unhidden.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.Revert(Reddit.Inputs.Wiki.WikiPageRevisionInput,System.String)">
            <summary>
            Revert a wiki page to revision.
            </summary>
            <param name="wikiPageRevisionInput">A valid WikiPageRevisionInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.RevertAsync(Reddit.Inputs.Wiki.WikiPageRevisionInput,System.String)">
            <summary>
            Revert a wiki page to revision asynchronously.
            </summary>
            <param name="wikiPageRevisionInput">A valid WikiPageRevisionInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
        </member>
        <member name="M:Reddit.Models.Wiki.Discussions(System.String,Reddit.Inputs.SrListingInput,System.String)">
            <summary>
            Retrieve a list of discussions about this wiki page.
            This endpoint is a listing.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>(TODO - Untested)</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.Pages(System.String)">
            <summary>
            Retrieve a list of wiki pages in this subreddit.
            </summary>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>A list of wiki pages.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.Revisions(Reddit.Inputs.SrListingInput,System.String)">
            <summary>
            Retrieve a list of recently changed wiki pages in this subreddit.
            </summary>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>A list of wiki pages.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.PageRevisions(System.String,Reddit.Inputs.SrListingInput,System.String)">
            <summary>
            Retrieve a list of revisions of this wiki page.
            This endpoint is a listing.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="srListingInput">A valid SrListingInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>A list of revisions.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.GetPermissions(System.String,System.String)">
            <summary>
            Retrieve the current permission settings for page.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.UpdatePermissions(System.String,Reddit.Inputs.Wiki.WikiUpdatePermissionsInput,System.String)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="wikiUpdatePermissionsInput">A valid WikiUpdatePermissionsInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.UpdatePermissionsAsync(System.String,Reddit.Inputs.Wiki.WikiUpdatePermissionsInput,System.String)">
            <summary>
            Update the permissions and visibility of wiki page asynchronously.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="wikiUpdatePermissionsInput">A valid WikiUpdatePermissionsInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.UpdatePermissions(System.String,Reddit.Things.WikiPageSettings,System.String)">
            <summary>
            Update the permissions and visibility of wiki page.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="wikiPageSettings">A valid instance of WikiPageSettings</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.UpdatePermissionsAsync(System.String,Reddit.Things.WikiPageSettings,System.String)">
            <summary>
            Update the permissions and visibility of wiki page asynchronously.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="wikiPageSettings">A valid instance of WikiPageSettings</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page settings.</returns>
        </member>
        <member name="M:Reddit.Models.Wiki.Page(System.String,Reddit.Inputs.Wiki.WikiPageContentInput,System.String)">
            <summary>
            Return the content of a wiki page.
            If v is given, show the wiki page as it was at that version. If both v and v2 are given, show a diff of the two.
            </summary>
            <param name="page">the name of an existing wiki page</param>
            <param name="wikiPageContentInput">A valid WikiPageContentInput instance</param>
            <param name="subreddit">The subreddit where the wiki lives</param>
            <returns>An object containing wiki page data.</returns>
        </member>
        <member name="T:Reddit.RedditClient">
            <summary>
            The main Reddit API class.
            </summary>
        </member>
        <member name="F:Reddit.RedditClient.Models">
            <summary>
            Endpoint wrapper classes/methods.
            </summary>
        </member>
        <member name="P:Reddit.RedditClient.Account">
            <summary>
            Data/methods pertaining to the authenticated user.
            </summary>
        </member>
        <member name="P:Reddit.RedditClient.FrontPage">
            <summary>
            List of posts on the front page.
            </summary>
        </member>
        <member name="M:Reddit.RedditClient.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a new instance of the Reddit.NET API library.
            This instance will be bound to a single Reddit user.
            </summary>
            <param name="appId">The OAuth application ID</param>
            <param name="refreshToken">The OAuth refresh token for the user we wish to authenticate</param>
            <param name="appSecret">The OAuth application secret; this parameter is required for 'script' apps which use a secret to authenticate</param>
            <param name="accessToken">(optional) An OAuth access token; if not provided, one will be automatically obtained using the refresh token</param>
            <param name="userAgent">(optional) A custom string for the User-Agent header</param>
        </member>
        <member name="M:Reddit.RedditClient.GenerateDeviceId">
            <summary>
            Generates a unique Device ID required for app-only authentication.
            </summary>
            <returns>A random alphanumeric string of 30 characters.</returns>
        </member>
        <member name="M:Reddit.RedditClient.WaitForRequestQueue(System.Int32)">
            <summary>
            Wait until the requests queue is either empty or down to the specified number of remaining requests.
            </summary>
            <param name="waitUntilRequestsAt">The wait ends when the number of requests count goes down to less than or equal to this value</param>
        </member>
        <member name="M:Reddit.RedditClient.Comment(System.String)">
            <summary>
            Create a new comment controller instance, populated only with its fullname.
            </summary>
            <param name="name">fullname of a thing</param>
            <returns>A new comment controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.LinkPost(System.String)">
            <summary>
            Create a new link post controller instance, populated only with its fullname.
            </summary>
            <param name="name">fullname of a thing</param>
            <returns>A new link post controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SelfPost(System.String)">
            <summary>
            Create a new self post controller instance, populated only with its fullname.
            </summary>
            <param name="name">fullname of a thing</param>
            <returns>A new self post controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Post(System.String)">
            <summary>
            Create a new post controller instance, populated only with its fullname.
            </summary>
            <param name="name">fullname of a thing</param>
            <returns>A new post controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.LiveThread(Reddit.Things.LiveUpdateEvent)">
            <summary>
            Create a new live thread controller instance from API return data.
            </summary>
            <param name="liveUpdateEvent"></param>
            <returns>A new live thread controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.LiveThread(Reddit.Controllers.LiveThread)">
            <summary>
            Create a copy of an existing live thread controller instance.
            </summary>
            <param name="liveThread">A valid live thread controller instance</param>
            <returns>A new live thread controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.LiveThread(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.DateTime)">
            <summary>
            Create a new live thread controller instance, populated manually.
            </summary>
            <param name="title">Title of the live thread</param>
            <param name="description">Description of the live thread</param>
            <param name="nsfw">Whether the live thread is NSFW</param>
            <param name="resources"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="websocketUrl"></param>
            <param name="announcementUrl"></param>
            <param name="state"></param>
            <param name="icon"></param>
            <param name="totalViews"></param>
            <param name="viewerCount"></param>
            <param name="created"></param>
            <returns>A new live thread controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.LiveThread(System.String)">
            <summary>
            Create a new live thread controller instance, populated only with its ID.
            </summary>
            <param name="id">A valid live thread ID</param>
            <returns>A new live thread controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.User(Reddit.Things.User)">
            <summary>
            Create a new user controller instance from API return data.
            </summary>
            <param name="user"></param>
            <returns>A new user controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.User(Reddit.Controllers.User)">
            <summary>
            Create a copy of an existing user controller instance.
            </summary>
            <param name="user">A valid user controller instance.</param>
            <returns>A new user controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.User(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Create a new user controller instance, populated manually.
            </summary>
            <param name="name">A valid Reddit username</param>
            <param name="id"></param>
            <param name="isFriend"></param>
            <param name="profanityFilter"></param>
            <param name="isSuspended"></param>
            <param name="hasGoldSubscription"></param>
            <param name="numFriends"></param>
            <param name="IsVerified"></param>
            <param name="hasNewModmail"></param>
            <param name="over18"></param>
            <param name="isGold"></param>
            <param name="isMod"></param>
            <param name="hasVerifiedEmail"></param>
            <param name="iconImg"></param>
            <param name="hasModmail"></param>
            <param name="linkKarma"></param>
            <param name="inboxCount"></param>
            <param name="hasMail"></param>
            <param name="created"></param>
            <param name="commentKarma"></param>
            <param name="hasSubscribed"></param>
            <returns>A new user controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.User">
            <summary>
            Create an empty user controller instance.
            </summary>
            <returns>A new user controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Subreddit(Reddit.Controllers.Subreddit)">
            <summary>
            Create a copy of an existing subreddit controller instance.
            </summary>
            <param name="subreddit">A valid subreddit controller instance</param>
            <returns>A new subreddit controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Subreddit(Reddit.Things.Subreddit)">
            <summary>
            Create a new subreddit instance from API return data.
            </summary>
            <param name="subreddit"></param>
            <returns>A new subreddit controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Subreddit(Reddit.Things.SubredditChild)">
            <summary>
            Create a new subreddit instance from API return data.
            </summary>
            <param name="subredditChild"></param>
            <returns>A new subreddit controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Subreddit(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32,System.Byte[],System.Byte[],System.String,System.String,System.String)">
            <summary>
            Create a new subreddit controller instance, populated manually.
            </summary>
            <param name="name"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="sidebar"></param>
            <param name="submissionText"></param>
            <param name="lang"></param>
            <param name="subredditType"></param>
            <param name="submissionType"></param>
            <param name="submitLinkLabel"></param>
            <param name="submitTextLabel"></param>
            <param name="wikiEnabled"></param>
            <param name="over18"></param>
            <param name="allowDiscovery"></param>
            <param name="allowSpoilers"></param>
            <param name="showMedia"></param>
            <param name="showMediaPreview"></param>
            <param name="allowImages"></param>
            <param name="allowVideos"></param>
            <param name="collapseDeletedComments"></param>
            <param name="suggestedCommentSort"></param>
            <param name="commentScoreHideMins"></param>
            <param name="headerImage"></param>
            <param name="iconImage"></param>
            <param name="primaryColor"></param>
            <param name="keyColor"></param>
            <param name="fullname"></param>
            <returns>A new subreddit controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Subreddit">
            <summary>
            Create an empty subreddit controller instance.
            </summary>
            <returns>A new subreddit controller instance.</returns>
        </member>
        <member name="M:Reddit.RedditClient.GetPosts(System.Collections.Generic.List{System.String})">
            <summary>
            Get a listing of posts by fullname.
            </summary>
            <param name="fullnames">A list of post fullnames</param>
            <returns>A list of populated posts.</returns>
        </member>
        <member name="M:Reddit.RedditClient.GetPosts(System.Collections.Generic.List{Reddit.Controllers.Post})">
            <summary>
            Get a listing of posts by fullname.
            </summary>
            <param name="posts">A list of post objects with valid Fullnames</param>
            <returns>A list of populated posts.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Scopes(System.String)">
            <summary>
            Retrieve descriptions of reddit's OAuth2 scopes.
            If no scopes are given, information on all scopes are returned.
            Invalid scope(s) will result in a 400 error with body that indicates the invalid scope(s).
            </summary>
            <param name="scopes">(optional) An OAuth2 scope string</param>
            <returns>A list of scopes.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SearchRedditNames(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            List subreddit names that begin with a query string.
            Subreddits whose names begin with query will be returned.
            If include_over_18 is false, subreddits with over-18 content restrictions will be filtered from the results.
            If include_unadvertisable is False, subreddits that have hide_ads set to True or are on the anti_ads_subreddits list will be filtered.
            If exact is true, only an exact match will be returned. Exact matches are inclusive of over_18 subreddits, but not hide_ad subreddits when include_unadvertisable is False.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="exact">boolean value</param>
            <param name="includeOver18">boolean value</param>
            <param name="includeUnadvertisable">boolean value</param>
            <returns>A list of subreddit names.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SearchSubredditNames(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            List subreddits that begin with a query string.
            Subreddits whose names begin with query will be returned.
            If include_over_18 is false, subreddits with over-18 content restrictions will be filtered from the results.
            If include_unadvertisable is False, subreddits that have hide_ads set to True or are on the anti_ads_subreddits list will be filtered.
            If exact is true, only an exact match will be returned.Exact matches are inclusive of over_18 subreddits, but not hide_ad subreddits when include_unadvertisable is False.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="exact">boolean value</param>
            <param name="includeOver18">boolean value</param>
            <param name="includeUnadvertisable">boolean value</param>
            <returns>A list of subreddit listings.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SearchSubreddits(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Search subreddits by title and description.
            </summary>
            <param name="query">a search query</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="showUsers">boolean value</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="sort">one of (relevance, activity)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>A list of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SubredditAutocomplete(System.String,System.Boolean,System.Boolean)">
            <summary>
            Return a list of subreddits and data for subreddits whose names start with 'query'.
            Uses typeahead endpoint to recieve the list of subreddits names. 
            Typeahead provides exact matches, typo correction, fuzzy matching and boosts subreddits to the top that the user is subscribed to.
            </summary>
            <param name="query">a string up to 50 characters long, consisting of printable characters</param>
            <param name="includeOver18">boolean value</param>
            <param name="includeProfiles">boolean value</param>
            <returns>Matching subreddits.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Reddit.RedditClient.SubredditAutocompleteV2(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)" -->
        <member name="M:Reddit.RedditClient.SearchSubreddits(Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search Reddit for matching users.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <returns>A list of users that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.SearchUsers(Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search Reddit for matching users.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <returns>A list of users that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.MixedSearch(Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search Reddit for matching things.
            This method can return links, subreddits, and/or users.  To include all of them, set type to "link,sr,user".
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <returns>A list of things that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Search(Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search all subreddits for posts.
            To search a specific subreddit for posts, use the Subreddit controller.
            </summary>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Search(System.String,Reddit.Inputs.Search.SearchGetSearchInput)">
            <summary>
            Search all subreddits for posts.
            To search a specific subreddit for posts, use the Subreddit controller.
            </summary>
            <param name="q">A valid search query</param>
            <param name="searchGetSearchInput">A valid SearchGetSearchInput instance (optional)</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.Search(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Search all subreddits for posts.
            To search a specific subreddit for posts, use the Subreddit controller.
            </summary>
            <param name="q">a string no longer than 512 characters</param>
            <param name="restrictSr">boolean value</param>
            <param name="sort">one of (relevance, hot, top, new, comments)</param>
            <param name="category">a string no longer than 5 characters</param>
            <param name="includeFacets">boolean value</param>
            <param name="type">(optional) comma-delimited list of result types (sr, link, user)</param>
            <param name="t">one of (hour, day, week, month, year, all)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="count">a positive integer (default: 0)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">boolean value</param>
            <returns>A list of posts that match the search criteria.</returns>
        </member>
        <member name="M:Reddit.RedditClient.GetSubreddits(System.String,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Get all subreddits.
            The where parameter chooses the order in which the subreddits are displayed.
            popular sorts on the activity of the subreddit and the position of the subreddits can shift around.
            new sorts the subreddits based on their creation date, newest first.
            </summary>
            <param name="where">One of (popular, new, gold, default)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.RedditClient.GetUserSubreddits(System.String,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            Get all subreddits.
            The where parameter chooses the order in which the subreddits are displayed.
            popular sorts on the activity of the subreddit and the position of the subreddits can shift around.
            new sorts the subreddits based on their creation date, newest first.
            </summary>
            <param name="where">One of (popular, new, gold, default)</param>
            <param name="limit">the maximum number of items desired (default: 25, maximum: 100)</param>
            <param name="after">fullname of a thing</param>
            <param name="before">fullname of a thing</param>
            <param name="includeCategories">boolean value</param>
            <param name="show">(optional) the string all</param>
            <param name="srDetail">(optional) expand subreddits</param>
            <param name="count">a positive integer (default: 0)</param>
            <returns>List of subreddit objects.</returns>
        </member>
        <member name="M:Reddit.RedditClient.UserDataByAccountIds(System.Collections.Generic.List{System.String})">
            <summary>
            Get user data by account IDs.
            </summary>
            <param name="fullnames">A list of account fullnames</param>
            <returns>A dictionary of user summary objects.</returns>
        </member>
        <member name="M:Reddit.RedditClient.UserDataByAccountIds(System.Collections.Generic.List{Reddit.Controllers.User})">
            <summary>
            Get user data by account IDs.
            </summary>
            <param name="users">A list of user objects with valid Fullnames</param>
            <returns>A dictionary of user summary objects.</returns>
        </member>
        <member name="T:Reddit.RedditAPI">
            <summary>
            (deprecated) The old name for the main Reddit API class.
            </summary>
        </member>
        <member name="M:Reddit.RedditAPI.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (deprecated) Create a new instance of the Reddit.NET API library.
            This instance will be bound to a single Reddit user.
            </summary>
            <param name="appId">The OAuth application ID</param>
            <param name="refreshToken">The OAuth refresh token for the user we wish to authenticate</param>
            <param name="appSecret">The OAuth application secret; this parameter is required for 'script' apps which use a secret to authenticate</param>
            <param name="accessToken">(optional) An OAuth access token; if not provided, one will be automatically obtained using the refresh token</param>
            <param name="userAgent">(optional) A custom string for the User-Agent header</param>
        </member>
        <member name="M:Reddit.Things.LabeledMultiSubmit.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Reddit.Things.SubredditName},System.String,System.String)">
            <summary>
            Create a new multireddit submission object.
            </summary>
            <param name="descriptionMd">Description of the multireddit in markdown</param>
            <param name="displayName">The multireddit name as it appears to users</param>
            <param name="iconName">One of (art and design, ask, books, business, cars, comics, cute animals, diy, entertainment, food and drink, funny, 
            games, grooming, health, life advice, military, models pinup, music, news, philosophy, pictures and gifs, science, shopping, sports, style, 
            tech, travel, unusual stories, video, none)</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="subreddits">List of subreddits with which to initially populate the multireddit</param>
            <param name="visibility">One of (public, private, hidden)</param>
            <param name="weightingScheme">One of (classic, fresh)</param>
        </member>
        <member name="M:Reddit.Things.LabeledMultiSubmit.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Reddit.Things.Subreddit},System.String,System.String)">
            <summary>
            Create a new multireddit submission object.
            </summary>
            <param name="descriptionMd">Description of the multireddit in markdown</param>
            <param name="displayName">The multireddit name as it appears to users</param>
            <param name="iconName">One of (art and design, ask, books, business, cars, comics, cute animals, diy, entertainment, food and drink, funny, 
            games, grooming, health, life advice, military, models pinup, music, news, philosophy, pictures and gifs, science, shopping, sports, style, 
            tech, travel, unusual stories, video, none)</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="subreddits">List of subreddits with which to initially populate the multireddit</param>
            <param name="visibility">One of (public, private, hidden)</param>
            <param name="weightingScheme">One of (classic, fresh)</param>
        </member>
        <member name="M:Reddit.Things.LabeledMultiSubmit.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Reddit.Controllers.Subreddit},System.String,System.String)">
            <summary>
            Create a new multireddit submission object.
            </summary>
            <param name="descriptionMd">Description of the multireddit in markdown</param>
            <param name="displayName">The multireddit name as it appears to users</param>
            <param name="iconName">One of (art and design, ask, books, business, cars, comics, cute animals, diy, entertainment, food and drink, funny, 
            games, grooming, health, life advice, military, models pinup, music, news, philosophy, pictures and gifs, science, shopping, sports, style, 
            tech, travel, unusual stories, video, none)</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="subreddits">List of subreddits with which to initially populate the multireddit</param>
            <param name="visibility">One of (public, private, hidden)</param>
            <param name="weightingScheme">One of (classic, fresh)</param>
        </member>
        <member name="M:Reddit.Things.LabeledMultiSubmit.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Create a new multireddit submission object.
            </summary>
            <param name="descriptionMd">Description of the multireddit in markdown</param>
            <param name="displayName">The multireddit name as it appears to users</param>
            <param name="iconName">One of (art and design, ask, books, business, cars, comics, cute animals, diy, entertainment, food and drink, funny, 
            games, grooming, health, life advice, military, models pinup, music, news, philosophy, pictures and gifs, science, shopping, sports, style, 
            tech, travel, unusual stories, video, none)</param>
            <param name="keyColor">a 6-digit rgb hex color, e.g. #AABBCC</param>
            <param name="subreddits">List of subreddits with which to initially populate the multireddit</param>
            <param name="visibility">One of (public, private, hidden)</param>
            <param name="weightingScheme">One of (classic, fresh)</param>
        </member>
        <member name="P:Reddit.Things.Snoomoji.CreatedBy">
            <summary>
            ID of user who created this flair.
            </summary>
        </member>
    </members>
</doc>
